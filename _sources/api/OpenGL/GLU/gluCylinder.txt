.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `gluCylinder`
----------------------

.. source file man/gluCylinder

.. currentmodule:: OpenGL.GLU

Draw a cylinder

.. c:function:: gluCylinder
.. c:function:: void gluCylinder(GLUquadric*  quad, GLdouble  base, GLdouble  top, GLdouble  height, GLint  slices, GLint  stacks)
   :noindex: 


   
   :param quad:
      Specifies the quadrics object (created with :c:func:`gluNewQuadric`).
   
   :param base:
      Specifies the radius of the cylinder at *`z`* = 0.
   
   :param top:
      Specifies the radius of the cylinder at *`z`* = *height* .
   
   :param height:
      Specifies the height of the cylinder.
   
   :param slices:
      Specifies the number of subdivisions around the *`z`* axis.
   
   :param stacks:
      Specifies the number of subdivisions along the *`z`* axis.
   

.. seealso::

   
   :c:func:`gluDisk`, :c:func:`gluNewQuadric`, :c:func:`gluPartialDisk`, :c:func:`gluQuadricTexture`, :c:func:`gluSphere`
   
.. rubric:: Description


:c:func:`gluCylinder` draws a cylinder oriented along the *`z`* axis. The base of the cylinder is placed at *`z`* = 0 and the top at |EQUATION_1_| . Like a sphere, a cylinder is subdivided around the *`z`* axis into slices and along the *`z`* axis into stacks.

Note that if *top* is set to 0.0, this routine generates a cone.

If the orientation is set to ``GLU_OUTSIDE`` (with :c:func:`gluQuadricOrientation`), then any generated normals point away from the *`z`* axis. Otherwise, they point toward the *`z`* axis.

If texturing is turned on (with :c:func:`gluQuadricTexture`), then texture coordinates are generated so that *`t`* ranges linearly from 0.0 at *`z`* = 0 to 1.0 at *`z`* = *height* , and *`s`* ranges from 0.0 at the + *`y`* axis, to 0.25 at the + *`x`* axis, to 0.5 at the - *`y`* axis, to 0.75 at the \- *`x`* axis, and back to 1.0 at the + *`y`* axis.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mi mathvariant="italic">z</mi> <mo>=</mo> <mi mathvariant="italic">height</mi> </mrow> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

