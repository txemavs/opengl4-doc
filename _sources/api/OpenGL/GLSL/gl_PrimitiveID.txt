.. nabla.opengl-sphinx project

.. ---------------------------

.. this dodument source file 'man/gl_PrimitiveID'is copyrighted by Khronos Group
   See license details at http://opencontent.org/openpub/


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   

function `gl_PrimitiveID`
-------------------------

.. currentmodule:: OpenGL.GLSL

Contains the index of the current primitive

.. c:function:: gl_PrimitiveID


.. rubric:: Specification

.. c:function:: in int gl_PrimitiveID)

.. seealso::

   
   :c:func:`gl_InstanceID`, :c:func:`gl_VertexID`, :c:func:`gl_PrimitiveIDIn`
   
.. rubric:: Description


:c:func:`gl_PrimitiveID` is a tessellation control, tessellation evaluation and fragment language input variable. For the tessellation control and tessellation evaluation languages, it holds the number of primitives processed by the shader since the current set of rendering primitives was started. The first primitive processed by the drawing command is numbered zero and the primitive ID counter is incremented after every individual point, line or triangle primitive is processed. For triangles drawn in point or line mode, the primitive ID counter is incremented only once, even through multiple points or lines may actually be drawn. Restarting a primitive topology using the primitive restart index has no effect on the primitive ID counter.

In the geometry language, :c:func:`gl_PrimitiveID` is an output variable that is passed to the corresponding :c:func:`gl_PrimitiveID` input variable in the fragment shader. If no geomery shader is present then :c:func:`gl_PrimitiveID` in the fragment language behaves identically as it would in the tessellation control and evaluation languages. If a geometry shader is present but does not write to :c:func:`gl_PrimitiveID`, the value of :c:func:`gl_PrimitiveID` in the fragment shader is undefined.



.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2011 Khronos Group. Open Publication License.

