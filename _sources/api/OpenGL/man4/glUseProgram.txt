.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:31
.. *****************************************************************************

.. following information was extracted from file 'man4/glUseProgram.xml'
.. (c)2003-2005 3Dlabs Inc. Ltd.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glUseProgram`
-----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Installs a program object as part of current rendering state

.. c:function:: glUseProgram


   :param program:

      Specifies the handle of the program object
      whose executables are to be used as part of current
      rendering state.

.. rubric:: Specification

.. c:function:: void glUseProgram(GLuint  program)
   :noindex: 


.. seealso::

   :c:func:`glAttachShader`\ ,
   :c:func:`glBindAttribLocation`\ ,
   :c:func:`glCompileShader`\ ,
   :c:func:`glCreateProgram`\ ,
   :c:func:`glDeleteProgram`\ ,
   :c:func:`glDetachShader`\ ,
   :c:func:`glLinkProgram`\ ,
   :c:func:`glUniform`\ ,
   :c:func:`glValidateProgram`\ ,
   :c:func:`glVertexAttrib`

..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glUseProgram` installs the program
object specified by *program* as part of
current rendering state. One or more executables are created in
a program object by successfully attaching shader objects to it
with
:c:func:`glAttachShader`\ ,
successfully compiling the shader objects with
:c:func:`glCompileShader`\ ,
and successfully linking the program object with
:c:func:`glLinkProgram`\ .


A program object will contain an executable that will run
on the vertex processor if it contains one or more shader
objects of type ``GL_VERTEX_SHADER`` that have
been successfully compiled and linked. A program object will contain an
executable that will run on the geometry processor if it contains one or
more shader objects of type ``GL_GEOMETRY_SHADER`` that
have been successfully compiled and linked.
Similarly, a program object will contain an executable that will run on the
fragment processor if it contains one or more shader objects of type
``GL_FRAGMENT_SHADER`` that have been
successfully compiled and linked.

While a program object is in use, applications are free to
modify attached shader objects, compile attached shader objects,
attach additional shader objects, and detach or delete shader
objects. None of these operations will affect the executables
that are part of the current state. However, relinking the
program object that is currently in use will install the program
object as part of the current rendering state if the link
operation was successful (see
:c:func:`glLinkProgram`
). If the program object currently in use is relinked
unsuccessfully, its link status will be set to
``GL_FALSE``\ , but the executables and
associated state will remain part of the current state until a
subsequent call to :c:func:`glUseProgram` removes it
from use. After it is removed from use, it cannot be made part
of current state until it has been successfully relinked.

If *program* is zero, then the current rendering
state refers to an :strong:`invalid` program object and the
results of shader execution are undefined. However, this is not an error.

If *program* does not
contain shader objects of type ``GL_FRAGMENT_SHADER``\ , an
executable will be installed on the vertex, and possibly geometry processors,
but the results of fragment shader execution will be undefined.


.. note::

   Like buffer and texture objects, the name space for
   program objects may be shared across a set of contexts, as long
   as the server sides of the contexts share the same address
   space. If the name space is shared across contexts, any attached
   objects and the data associated with those attached objects are
   shared as well.

   Applications are responsible for providing the
   synchronization across API calls when objects are accessed from
   different execution threads.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` is generated if *program* is neither 0 nor a value generated by OpenGL.
* ``GL_INVALID_OPERATION`` is generated if *program* is not a program object.
* ``GL_INVALID_OPERATION`` is generated if *program* could not be made part of current state.
* ``GL_INVALID_OPERATION`` is generated if transform feedback mode is active.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with the argument ``GL_CURRENT_PROGRAM``
* :c:func:`glGetActiveAttrib` with a valid program object and the index of an active attribute variable
* :c:func:`glGetActiveUniform` with a valid program object and the index of an active uniform variable
* :c:func:`glGetAttachedShaders` with a valid program object
* :c:func:`glGetAttribLocation` with a valid program object and the name of an attribute variable
* :c:func:`glGetProgram` with a valid program object and the parameter to be queried
* :c:func:`glGetProgramInfoLog` with a valid program object
* :c:func:`glGetUniform` with a valid program object and the location of a uniform variable
* :c:func:`glGetUniformLocation` with a valid program object and the name of a uniform variable
* :c:func:`glIsProgram`


.. -----------------------------------------------------------------------------

.. <foot 'glUseProgram'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2003-2005 3Dlabs Inc. Ltd. Open Publication License.

