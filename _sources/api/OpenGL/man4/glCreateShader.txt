.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glCreateShader.xml'
.. (c)2003-2005 3Dlabs Inc. Ltd.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glCreateShader`
-------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Creates a shader object

.. c:function:: glCreateShader


   :param shaderType:

      Specifies the type of shader to be created.
      Must be one of ``GL_VERTEX_SHADER``\ ,
      ``GL_TESS_CONTROL_SHADER``\ ,
      ``GL_TESS_EVALUATION_SHADER``\ ,
      ``GL_GEOMETRY_SHADER``\ ,
      or ``GL_FRAGMENT_SHADER``\ .

.. rubric:: Specification

.. c:function:: GLuint glCreateShader(GLenum  shaderType)
   :noindex: 


.. seealso::

   :c:func:`glAttachShader`\ ,
   :c:func:`glCompileShader`\ ,
   :c:func:`glDeleteShader`\ ,
   :c:func:`glDetachShader`\ ,
   :c:func:`glShaderSource`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glCreateShader` creates an empty
shader object and returns a non-zero value by which it can be
referenced. A shader object is used to maintain the source code
strings that define a shader. *shaderType*
indicates the type of shader to be created. Five types of shader
are supported. A shader of type
``GL_VERTEX_SHADER`` is a shader that is
intended to run on the programmable vertex processor.
A shader of type ``GL_TESS_CONTROL_SHADER`` is a shader that
is intended to run on the programmable tessellation processor in the control stage.
A shader of type ``GL_TESS_EVALUATION_SHADER`` is a shader that
is intended to run on the programmable tessellation processor in the evaluation stage.
A shader of type
``GL_GEOMETRY_SHADER`` is a shader that is intended to
run on the programmable geometry processor. A shader of
type ``GL_FRAGMENT_SHADER`` is a shader that is
intended to run on the programmable fragment processor.

When created, a shader object's
``GL_SHADER_TYPE`` parameter is set to either
``GL_VERTEX_SHADER``\ , ``GL_TESS_CONTROL_SHADER``\ ,
``GL_TESS_EVALUATION_SHADER``\ , ``GL_GEOMETRY_SHADER``
or ``GL_FRAGMENT_SHADER``\ , depending on the value
of *shaderType*\ .


.. note::

   Like buffer and texture objects, the name space for
   shader objects may be shared across a set of contexts, as long
   as the server sides of the contexts share the same address
   space. If the name space is shared across contexts, any attached
   objects and the data associated with those attached objects are
   shared as well.

   Applications are responsible for providing the
   synchronization across API calls when objects are accessed from
   different execution threads.

..


.. -----------------------------------------------------------------------------

**Errors:**

* This function returns 0 if an error occurs creating the shader object.
* ``GL_INVALID_ENUM`` is generated if *shaderType* is not an accepted value.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetShader` with a valid shader object and the parameter to be queried
* :c:func:`glGetShaderInfoLog` with a valid shader object
* :c:func:`glGetShaderSource` with a valid shader object
* :c:func:`glIsShader`


.. -----------------------------------------------------------------------------

.. <foot 'glCreateShader'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2003-2005 3Dlabs Inc. Ltd. Open Publication License.

