.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man4/glClearBuffer.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glClearBuffer`
------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Clear individual buffers of the currently bound draw framebuffer

.. c:function:: glClearBuffer


         :param buffer:

                  Specify the buffer to clear.

         :param drawBuffer:

                  Specify a particular draw buffer to clear.

         :param value:

                  For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to.
                  For depth buffers, a pointer to a single depth value to clear the buffer to.
                  For stencil buffers, a pointer to a single stencil value to clear the buffer to.

         :param depth:

                  The value to clear a depth render buffer to.

         :param stencil:

                  The value to clear a stencil render buffer to.

.. rubric:: Specification

.. c:function:: void glClearBufferiv(GLenum  buffer, GLint  drawBuffer, const GLint *  value, GLenum  buffer, GLint  drawBuffer, const GLuint *  value, GLenum  buffer, GLint  drawBuffer, const GLfloat *  value, GLenum  buffer, GLint  drawBuffer, GLfloat  depth, GLint  stencil)


.. seealso::


            :c:func:`glClearColor`\ ,
            :c:func:`glClearDepth`\ ,
            :c:func:`glClearStencil`\ ,
            :c:func:`glClear`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glClearBuffer\*` clears the specified buffer to the specified value(s). If *buffer* is
``GL_COLOR``\ , a particular draw buffer ``GL_DRAWBUFFER i`` is specified
by passing *i* as *drawBuffer*\ . In this case, *value* points to
a four-element vector specifying the R, G, B and A color to clear that draw buffer to. If *buffer* is
one of ``GL_FRONT``\ , ``GL_BACK``\ , ``GL_LEFT``\ , ``GL_RIGHT``\ ,
or ``GL_FRONT_AND_BACK``\ , identifying multiple buffers, each selected buffer is cleared to the same value.
Clamping and conversion for fixed-point color buffers are performed in the same fashion as
:c:func:`glClearColor`\ .


If *buffer* is ``GL_DEPTH``\ , *drawBuffer* must be zero, and *value*
points to a single value to clear the depth buffer to. Only :c:func:`glClearBufferfv` should be used to clear
depth buffers. Clamping and conversion for fixed-point depth buffers are performed in the same fashion as
:c:func:`glClearDepth`\ .


If *buffer* is ``GL_STENCIL``\ , *drawBuffer* must be zero, and *value*
points to a single value to clear the stencil buffer to. Only :c:func:`glClearBufferiv` should be used to clear
stencil buffers. Masking and type conversion are performed in the same fashion as
:c:func:`glClearStencil`\ .


:c:func:`glClearBufferfi` may be used to clear the depth and stencil buffers. *buffer* must be
``GL_DEPTH_STENCIL`` and *drawBuffer* must be zero. *depth* and
*stencil* are the depth and stencil values, respectively.


The result of :c:func:`glClearBuffer` is undefined if no conversion between the type of *value*
and the buffer being cleared is defined. However, this is not an error.


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated by :c:func:`glClearBufferif`\ , :c:func:`glClearBufferfv` and :c:func:`glClearBufferuiv` if *buffer* is not ``GL_COLOR``\ , ``GL_FRONT``\ , ``GL_BACK``\ , ``GL_LEFT``\ , ``GL_RIGHT``\ , ``GL_FRONT_AND_BACK``\ , ``GL_DEPTH`` or ``GL_STENCIL``\ .
* ``GL_INVALID_ENUM`` is generated by :c:func:`glClearBufferfi` if *buffer* is not ``GL_DEPTH_STENCIL``\ .
* ``GL_INVALID_VALUE`` is generated if *buffer* is ``GL_COLOR``\ , ``GL_FRONT``\ , ``GL_BACK``\ , ``GL_LEFT``\ , ``GL_RIGHT``\ , or ``GL_FRONT_AND_BACK`` and *drawBuffer* is greater than or equal to ``GL_MAX_DRAW_BUFFERS``\ .
* ``GL_INVALID_VALUE`` is generated if *buffer* is ``GL_DEPTH``\ , ``GL_STENCIL`` or ``GL_DEPTH_STENCIL`` and *drawBuffer* is not zero.


.. -----------------------------------------------------------------------------

.. <foot 'glClearBuffer'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

