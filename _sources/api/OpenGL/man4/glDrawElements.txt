.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glDrawElements.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man4

function `glDrawElements`
-------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Render primitives from array data

.. c:function:: glDrawElements


         :param mode:

                  Specifies what kind of primitives to render.
                  Symbolic constants
                  ``GL_POINTS``\ ,
                  ``GL_LINE_STRIP``\ ,
                  ``GL_LINE_LOOP``\ ,
                  ``GL_LINES``\ ,
                  ``GL_LINE_STRIP_ADJACENCY``\ ,
                  ``GL_LINES_ADJACENCY``\ ,
                  ``GL_TRIANGLE_STRIP``\ ,
                  ``GL_TRIANGLE_FAN``\ ,
                  ``GL_TRIANGLES``\ ,
                  ``GL_TRIANGLE_STRIP_ADJACENCY``\ ,
                  ``GL_TRIANGLES_ADJACENCY`` and ``GL_PATCHES``
                  are accepted.

         :param count:

                  Specifies the number of elements to be rendered.

         :param type:

                  Specifies the type of the values in *indices*\ . Must be one of
                  ``GL_UNSIGNED_BYTE``\ , ``GL_UNSIGNED_SHORT``\ , or
                  ``GL_UNSIGNED_INT``\ .

         :param indices:

                  Specifies a pointer to the location where the indices are stored.

.. rubric:: Specification

.. c:function:: void glDrawElements(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid *  indices)
   :noindex: 


.. seealso::


            :c:func:`glDrawArrays`\ ,
            :c:func:`glDrawElementsInstanced`\ ,
            :c:func:`glDrawElementsBaseVertex`\ ,
            :c:func:`glDrawRangeElements`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glDrawElements` specifies multiple geometric primitives
with very few subroutine calls. Instead of calling a GL function
to pass each individual vertex, normal, texture coordinate, edge
flag, or color, you can prespecify
separate arrays of vertices, normals, and so on, and use them to
construct a sequence of primitives with a single
call to :c:func:`glDrawElements`\ .


When :c:func:`glDrawElements` is called, it uses *count* sequential elements from an
enabled array, starting at *indices* to construct a sequence of
geometric primitives. *mode* specifies what kind of primitives are
constructed and how the array elements construct these primitives. If
more than one array is enabled, each is used.


Vertex attributes that are modified by :c:func:`glDrawElements` have an
unspecified value after :c:func:`glDrawElements` returns.  Attributes that aren't
modified maintain their previous values.


.. note::


   ``GL_LINE_STRIP_ADJACENCY``\ ,
   ``GL_LINES_ADJACENCY``\ ,
   ``GL_TRIANGLE_STRIP_ADJACENCY`` and
   ``GL_TRIANGLES_ADJACENCY``
   are available only if the GL version is 3.2 or greater.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *mode* is not an accepted value.
* ``GL_INVALID_VALUE`` is generated if *count* is negative.
* ``GL_INVALID_OPERATION`` is generated if a geometry shader is active and *mode* is incompatible with the input primitive type of the geometry shader in the currently installed program object.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to an enabled array or the element array and the buffer object's data store is currently mapped.


.. -----------------------------------------------------------------------------

.. <foot 'glDrawElements'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

