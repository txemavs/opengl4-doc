.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man4/glBufferData.xml'
.. (c)2005 Addison-Wesley.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glBufferData`
-----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Creates and initializes a buffer object's data store

.. c:function:: glBufferData


         :param target:

                  Specifies the target buffer object.
                  The symbolic constant must be ``GL_ARRAY_BUFFER``\ ,
                  ``GL_COPY_READ_BUFFER``\ ,
                  ``GL_COPY_WRITE_BUFFER``\ ,
                  ``GL_ELEMENT_ARRAY_BUFFER``\ ,
                  ``GL_PIXEL_PACK_BUFFER``\ ,
                  ``GL_PIXEL_UNPACK_BUFFER``\ ,
                  ``GL_TEXTURE_BUFFER``\ ,
                  ``GL_TRANSFORM_FEEDBACK_BUFFER``\ , or
                  ``GL_UNIFORM_BUFFER``\ .

         :param size:

                  Specifies the size in bytes of the buffer object's new data store.

         :param data:

                  Specifies a pointer to data that will be copied into the data store for initialization,
                  or ``NULL`` if no data is to be copied.

         :param usage:

                  Specifies the expected usage pattern of the data store. The symbolic constant must be
                  ``GL_STREAM_DRAW``\ , ``GL_STREAM_READ``\ , ``GL_STREAM_COPY``\ ,
                  ``GL_STATIC_DRAW``\ , ``GL_STATIC_READ``\ , ``GL_STATIC_COPY``\ ,
                  ``GL_DYNAMIC_DRAW``\ , ``GL_DYNAMIC_READ``\ , or ``GL_DYNAMIC_COPY``\ .

.. rubric:: Specification

.. c:function:: void glBufferData(GLenum  target, GLsizeiptr  size, const GLvoid *  data, GLenum  usage)
   :noindex: 


.. seealso::


            :c:func:`glBindBuffer`\ ,
            :c:func:`glBufferSubData`\ ,
            :c:func:`glMapBuffer`\ ,
            :c:func:`glUnmapBuffer`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glBufferData` creates a new data store for the buffer object currently bound to
*target*\ . Any pre-existing data store is deleted. The new data store is created with the
specified *size* in bytes and *usage*\ . If *data*
is not ``NULL``\ , the data store is initialized with data from this pointer. In its initial
state, the new data store is not mapped, it has a ``NULL`` mapped pointer, and its mapped access
is ``GL_READ_WRITE``\ .


*usage* is a hint to the GL implementation as to how a buffer object's data store will be
accessed. This enables the GL implementation to make more intelligent decisions that may significantly
impact buffer object performance. It does not, however, constrain the actual usage of the data store.
*usage* can be broken down into two parts: first, the frequency of access (modification
and usage), and second, the nature of that access. The frequency of access may be one of these:


         STREAM


               The data store contents will be modified once and used at most a few times.


         STATIC


               The data store contents will be modified once and used many times.


         DYNAMIC


               The data store contents will be modified repeatedly and used many times.


The nature of access may be one of these:


         DRAW


               The data store contents are modified by the application, and used as the source for GL drawing and
               image specification commands.


         READ


               The data store contents are modified by reading data from the GL, and used to return that data
               when queried by the application.


         COPY


               The data store contents are modified by reading data from the GL, and used as the source for GL
               drawing and image specification commands.


.. note::


   If *data* is ``NULL``\ , a data store of the specified size is still created,
   but its contents remain uninitialized and thus undefined.


   Clients must align data elements consistent with the requirements of the client
   platform, with an additional base-level requirement that an offset within a buffer to
   a datum comprising |EQUATION_1_|\ .


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *target* is not one of the accepted buffer targets.
* ``GL_INVALID_ENUM`` is generated if *usage* is not ``GL_STREAM_DRAW``\ , ``GL_STREAM_READ``\ , ``GL_STREAM_COPY``\ , ``GL_STATIC_DRAW``\ , ``GL_STATIC_READ``\ , ``GL_STATIC_COPY``\ , ``GL_DYNAMIC_DRAW``\ , ``GL_DYNAMIC_READ``\ , or ``GL_DYNAMIC_COPY``\ .
* ``GL_INVALID_VALUE`` is generated if *size* is negative.
* ``GL_INVALID_OPERATION`` is generated if the reserved buffer object name 0 is bound to *target*\ .
* ``GL_OUT_OF_MEMORY`` is generated if the GL is unable to create a data store with the specified *size*\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetBufferSubData`
* :c:func:`glGetBufferParameter` with argument ``GL_BUFFER_SIZE`` or ``GL_BUFFER_USAGE``


.. -----------------------------------------------------------------------------

.. <foot 'glBufferData'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">N</mi> bytes be a multiple of <mi mathvariant="italic">N</mi></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2005 Addison-Wesley. Open Publication License.

