.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:30
.. *****************************************************************************

.. following information was extracted from file 'man4/glLogicOp.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man4

function `glLogicOp`
--------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Specify a logical pixel operation for rendering

.. c:function:: glLogicOp


         :param opcode:

                  Specifies a symbolic constant that selects a logical operation.
                  The following symbols are accepted:
                  ``GL_CLEAR``\ ,
                  ``GL_SET``\ ,
                  ``GL_COPY``\ ,
                  ``GL_COPY_INVERTED``\ ,
                  ``GL_NOOP``\ ,
                  ``GL_INVERT``\ ,
                  ``GL_AND``\ ,
                  ``GL_NAND``\ ,
                  ``GL_OR``\ ,
                  ``GL_NOR``\ ,
                  ``GL_XOR``\ ,
                  ``GL_EQUIV``\ ,
                  ``GL_AND_REVERSE``\ ,
                  ``GL_AND_INVERTED``\ ,
                  ``GL_OR_REVERSE``\ , and
                  ``GL_OR_INVERTED``\ . The initial value is ``GL_COPY``\ .

.. rubric:: Specification

.. c:function:: void glLogicOp(GLenum  opcode)
   :noindex: 


.. seealso::


            :c:func:`glBlendFunc`\ ,
            :c:func:`glDrawBuffer`\ ,
            :c:func:`glEnable`\ ,
            :c:func:`glStencilOp`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glLogicOp` specifies a logical operation that,
when enabled,
is applied between the incoming RGBA color
and the RGBA color at the corresponding location in the
frame buffer.
To enable or disable the logical operation, call
:c:func:`glEnable` and :c:func:`glDisable`
using the symbolic constant ``GL_COLOR_LOGIC_OP``\ . The initial value is
disabled.


+----------------------+-------------------------------+
| :strong:`Opcode`     | :strong:`Resulting Operation` |
+----------------------+-------------------------------+
| ``GL_CLEAR``         | 0                             |
+----------------------+-------------------------------+
| ``GL_SET``           | 1                             |
+----------------------+-------------------------------+
| ``GL_COPY``          | s                             |
+----------------------+-------------------------------+
| ``GL_COPY_INVERTED`` | ~s                            |
+----------------------+-------------------------------+
| ``GL_NOOP``          | d                             |
+----------------------+-------------------------------+
| ``GL_INVERT``        | ~d                            |
+----------------------+-------------------------------+
| ``GL_AND``           | s & d                         |
+----------------------+-------------------------------+
| ``GL_NAND``          | ~(s & d)                      |
+----------------------+-------------------------------+
| ``GL_OR``            | s \| d                        |
+----------------------+-------------------------------+
| ``GL_NOR``           | ~(s \| d)                     |
+----------------------+-------------------------------+
| ``GL_XOR``           | s ^ d                         |
+----------------------+-------------------------------+
| ``GL_EQUIV``         | ~(s ^ d)                      |
+----------------------+-------------------------------+
| ``GL_AND_REVERSE``   | s & ~d                        |
+----------------------+-------------------------------+
| ``GL_AND_INVERTED``  | ~s & d                        |
+----------------------+-------------------------------+
| ``GL_OR_REVERSE``    | s \| ~d                       |
+----------------------+-------------------------------+
| ``GL_OR_INVERTED``   | ~s \| d                       |
+----------------------+-------------------------------+


*opcode* is a symbolic constant chosen from the list above.
In the explanation of the logical operations,
:strong:`s` represents the incoming color and
:strong:`d` represents the color in the frame buffer.
Standard C-language operators are used.
As these bitwise operators suggest,
the logical operation is applied independently to each bit pair of the
source and destination colors.


.. note::


   When more than one RGBA color buffer is enabled for drawing,
   logical operations are performed separately for each enabled buffer,
   using for the destination value the contents of that buffer
   (see :c:func:`glDrawBuffer`\ ).


   Logic operations have no effect on floating point draw buffers. However, if
   ``GL_COLOR_LOGIC_OP`` is enabled, blending is still disabled
   in this case.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *opcode* is not an accepted value.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_LOGIC_OP_MODE``\ .
* :c:func:`glIsEnabled` with argument ``GL_COLOR_LOGIC_OP``\ .


.. -----------------------------------------------------------------------------

.. <foot 'glLogicOp'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

