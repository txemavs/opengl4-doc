.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:30
.. *****************************************************************************

.. following information was extracted from file 'man4/glGetUniformLocation.xml'
.. (c)2003-2005 3Dlabs Inc. Ltd. 2011 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glGetUniformLocation`
-------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Returns the location of a uniform variable

.. c:function:: glGetUniformLocation


      :param program:

            Specifies the program object to be
            queried.

      :param name:

            Points to a null terminated string containing
            the name of the uniform variable whose location is
            to be queried.

.. rubric:: Specification

.. c:function:: GLint glGetUniformLocation(GLuint  program, const GLchar * name)
   :noindex: 


.. seealso::

   :c:func:`glLinkProgram`\ ,
   :c:func:`glUniform`

..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glGetUniformLocation` returns an
integer that represents the location of a specific uniform
variable within a program object. *name*
must be a null terminated string that contains no white space.
*name* must be an active uniform variable
name in *program* that is not a structure,
an array of structures, or a subcomponent of a vector or a
matrix. This function returns -1 if *name*
does not correspond to an active uniform variable in
*program*\ , if *name*
starts with the reserved prefix ``gl_``, or if
*name* is associated with an atomic counter or
a named uniform block.

Uniform variables that are structures or arrays of
structures may be queried by calling
:c:func:`glGetUniformLocation` for each field within
the structure. The array element operator "[]" and the
structure field operator "." may be used in
*name* in order to select elements within
an array or fields within a structure. The result of using these
operators is not allowed to be another structure, an array of
structures, or a subcomponent of a vector or a matrix. Except if
the last part of *name* indicates a uniform
variable array, the location of the first element of an array
can be retrieved by using the name of the array, or by using the
name appended by "[0]".

The actual locations assigned to uniform variables are not
known until the program object is linked successfully. After
linking has occurred, the command
:c:func:`glGetUniformLocation` can be used to obtain
the location of a uniform variable. This location value can then
be passed to
:c:func:`glUniform`
to set the value of the uniform variable or to
:c:func:`glGetUniform`
in order to query the current value of the uniform variable.
After a program object has been linked successfully, the index
values for uniform variables remain fixed until the next link
command occurs. Uniform variable locations and values can only
be queried after a link if the link was successful.


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` is generated if *program* is not a value generated by OpenGL.
* ``GL_INVALID_OPERATION`` is generated if *program* is not a program object.
* ``GL_INVALID_OPERATION`` is generated if *program* has not been successfully linked.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetActiveUniform` with arguments *program* and the index of an active uniform variable
* :c:func:`glGetProgram` with arguments *program* and ``GL_ACTIVE_UNIFORMS`` or ``GL_ACTIVE_UNIFORM_MAX_LENGTH``
* :c:func:`glGetUniform` with arguments *program* and the name of a uniform variable
* :c:func:`glIsProgram`


.. -----------------------------------------------------------------------------

.. <foot 'glGetUniformLocation'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2003-2005 3Dlabs Inc. Ltd. 2011 Khronos Group. Open Publication License.

