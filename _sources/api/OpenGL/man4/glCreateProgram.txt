.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glCreateProgram.xml'
.. (c)2003-2005 3Dlabs Inc. Ltd.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glCreateProgram`
--------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Creates a program object

.. c:function:: glCreateProgram


.. rubric:: Specification

.. c:function:: GLuint glCreateProgram( void)
   :noindex: 


.. seealso::

   :c:func:`glAttachShader`\ ,
   :c:func:`glBindAttribLocation`\ ,
   :c:func:`glCreateShader`\ ,
   :c:func:`glDeleteProgram`\ ,
   :c:func:`glDetachShader`\ ,
   :c:func:`glLinkProgram`\ ,
   :c:func:`glUniform`\ ,
   :c:func:`glUseProgram`\ ,
   :c:func:`glValidateProgram`

..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glCreateProgram` creates an empty
program object and returns a non-zero value by which it can be
referenced. A program object is an object to which shader
objects can be attached. This provides a mechanism to specify
the shader objects that will be linked to create a program. It
also provides a means for checking the compatibility of the
shaders that will be used to create a program (for instance,
checking the compatibility between a vertex shader and a
fragment shader). When no longer needed as part of a program
object, shader objects can be detached.

One or more executables are created in a program object by
successfully attaching shader objects to it with
:c:func:`glAttachShader`\ ,
successfully compiling the shader objects with
:c:func:`glCompileShader`\ ,
and successfully linking the program object with
:c:func:`glLinkProgram`\ .
These executables are made part of current state when
:c:func:`glUseProgram`
is called. Program objects can be deleted by calling
:c:func:`glDeleteProgram`\ .
The memory associated with the program object will be deleted
when it is no longer part of current rendering state for any
context.


.. note::

   Like buffer and texture objects, the name space for
   program objects may be shared across a set of contexts, as long
   as the server sides of the contexts share the same address
   space. If the name space is shared across contexts, any attached
   objects and the data associated with those attached objects are
   shared as well.

   Applications are responsible for providing the
   synchronization across API calls when objects are accessed from
   different execution threads.

..


.. -----------------------------------------------------------------------------

**Errors:**

* This function returns 0 if an error occurs creating the program object.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with the argument ``GL_CURRENT_PROGRAM``
* :c:func:`glGetActiveAttrib` with a valid program object and the index of an active attribute variable
* :c:func:`glGetActiveUniform` with a valid program object and the index of an active uniform variable
* :c:func:`glGetAttachedShaders` with a valid program object
* :c:func:`glGetAttribLocation` with a valid program object and the name of an attribute variable
* :c:func:`glGetProgram` with a valid program object and the parameter to be queried
* :c:func:`glGetProgramInfoLog` with a valid program object
* :c:func:`glGetUniform` with a valid program object and the location of a uniform variable
* :c:func:`glGetUniformLocation` with a valid program object and the name of a uniform variable
* :c:func:`glIsProgram`


.. -----------------------------------------------------------------------------

.. <foot 'glCreateProgram'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2003-2005 3Dlabs Inc. Ltd. Open Publication License.

