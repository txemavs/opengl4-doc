.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:30
.. *****************************************************************************

.. following information was extracted from file 'man4/glStencilFuncSeparate.xml'
.. (c)2006 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glStencilFuncSeparate`
--------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Set front and/or back function and reference value for stencil testing

.. c:function:: glStencilFuncSeparate


         :param face:

                  Specifies whether front and/or back stencil state is updated.
                  Three symbolic constants are valid:
                  ``GL_FRONT``\ ,
                  ``GL_BACK``\ , and
                  ``GL_FRONT_AND_BACK``\ .

         :param func:

                  Specifies the test function.
                  Eight symbolic constants are valid:
                  ``GL_NEVER``\ ,
                  ``GL_LESS``\ ,
                  ``GL_LEQUAL``\ ,
                  ``GL_GREATER``\ ,
                  ``GL_GEQUAL``\ ,
                  ``GL_EQUAL``\ ,
                  ``GL_NOTEQUAL``\ , and
                  ``GL_ALWAYS``\ . The initial value is ``GL_ALWAYS``\ .

         :param ref:

                  Specifies the reference value for the stencil test.
                  *ref* is clamped to the range |EQUATION_1_|\ ,
                  where |EQUATION_2_| is the number of bitplanes in the stencil buffer. The
                  initial value is 0.

         :param mask:

                  Specifies a mask that is ANDed with both the reference value
                  and the stored stencil value when the test is done. The initial value
                  is all 1's.

.. rubric:: Specification

.. c:function:: void glStencilFuncSeparate(GLenum  face, GLenum  func, GLint  ref, GLuint  mask)
   :noindex: 


.. seealso::


            :c:func:`glBlendFunc`\ ,
            :c:func:`glDepthFunc`\ ,
            :c:func:`glEnable`\ ,
            :c:func:`glLogicOp`\ ,
            :c:func:`glStencilFunc`\ ,
            :c:func:`glStencilMask`\ ,
            :c:func:`glStencilMaskSeparate`\ ,
            :c:func:`glStencilOp`\ ,
            :c:func:`glStencilOpSeparate`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Stenciling,
like depth-buffering,
enables and disables drawing on a per-pixel basis.
You draw into the stencil planes using GL drawing primitives,
then render geometry and images,
using the stencil planes to mask out portions of the screen.
Stenciling is typically used in multipass rendering algorithms
to achieve special effects,
such as decals,
outlining,
and constructive solid geometry rendering.


The stencil test conditionally eliminates a pixel based on the outcome
of a comparison between the reference value
and the value in the stencil buffer.
To enable and disable the test, call :c:func:`glEnable` and :c:func:`glDisable`
with argument ``GL_STENCIL_TEST``\ .
To specify actions based on the outcome of the stencil test, call
:c:func:`glStencilOp` or
:c:func:`glStencilOpSeparate`\ .


There can be two separate sets of *func*\ , *ref*\ , and
*mask* parameters; one affects back-facing polygons, and the other
affects front-facing polygons as well as other non-polygon primitives.
:c:func:`glStencilFunc` sets both front
and back stencil state to the same values, as if
:c:func:`glStencilFuncSeparate` were called
with *face* set to ``GL_FRONT_AND_BACK``\ .


*func* is a symbolic constant that determines the stencil comparison function.
It accepts one of eight values,
shown in the following list.
*ref* is an integer reference value that is used in the stencil comparison.
It is clamped to the range |EQUATION_3_|\ ,
where |EQUATION_4_| is the number of bitplanes in the stencil buffer.
*mask* is bitwise ANDed with both the reference value
and the stored stencil value,
with the ANDed values participating in the comparison.


If :strong:`stencil` represents the value stored in the corresponding
stencil buffer location,
the following list shows the effect of each comparison function
that can be specified by *func*\ .
Only if the comparison succeeds is the pixel passed through
to the next stage in the rasterization process
(see :c:func:`glStencilOp`\ ).
All tests treat :strong:`stencil` values as unsigned integers in the range |EQUATION_5_|\ ,
where |EQUATION_6_| is the number of bitplanes in the stencil buffer.


The following values are accepted by *func* :


         ``GL_NEVER``


               Always fails.


         ``GL_LESS``


               Passes if ( *ref* & *mask* ) < (\ :strong:`stencil` & *mask* ).


         ``GL_LEQUAL``


               Passes if ( *ref* & *mask* ) <= (\ :strong:`stencil` & *mask* ).


         ``GL_GREATER``


               Passes if ( *ref* & *mask* ) > (\ :strong:`stencil` & *mask* ).


         ``GL_GEQUAL``


               Passes if ( *ref* & *mask* ) >= (\ :strong:`stencil` & *mask* ).


         ``GL_EQUAL``


               Passes if ( *ref* & *mask* ) = (\ :strong:`stencil` & *mask* ).


         ``GL_NOTEQUAL``


               Passes if ( *ref* & *mask* ) != (\ :strong:`stencil` & *mask* ).


         ``GL_ALWAYS``


               Always passes.


.. note::


   Initially, the stencil test is disabled.
   If there is no stencil buffer,
   no stencil modification can occur and it is as if
   the stencil test always passes.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *func* is not one of the eight accepted values.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_STENCIL_FUNC``\ , ``GL_STENCIL_VALUE_MASK``\ , ``GL_STENCIL_REF``\ , ``GL_STENCIL_BACK_FUNC``\ , ``GL_STENCIL_BACK_VALUE_MASK``\ , ``GL_STENCIL_BACK_REF``\ , or ``GL_STENCIL_BITS``
* :c:func:`glIsEnabled` with argument ``GL_STENCIL_TEST``


.. -----------------------------------------------------------------------------

.. <foot 'glStencilFuncSeparate'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"><mn>0</mn><mrow><msup><mn>2</mn><mi mathvariant="italic">n</mi></msup><mo>-</mo><mn>1</mn></mrow></mfenced></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"><mn>0</mn><mrow><msup><mn>2</mn><mi mathvariant="italic">n</mi></msup><mo>-</mo><mn>1</mn></mrow></mfenced></math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"><mn>0</mn><mrow><msup><mn>2</mn><mi mathvariant="italic">n</mi></msup><mo>-</mo><mn>1</mn></mrow></mfenced></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2006 Khronos Group. Open Publication License.

