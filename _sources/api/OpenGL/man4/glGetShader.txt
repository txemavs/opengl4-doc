.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glGetShader.xml'
.. (c)2003-2005 3Dlabs Inc. Ltd.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glGetShader`
----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Returns a parameter from a shader object

.. c:function:: glGetShader


   :param shader:

      Specifies the shader object to be
      queried.

   :param pname:

      Specifies the object parameter. Accepted
      symbolic names are
      ``GL_SHADER_TYPE``\ ,
      ``GL_DELETE_STATUS``\ ,
      ``GL_COMPILE_STATUS``\ ,
      ``GL_INFO_LOG_LENGTH``\ ,
      ``GL_SHADER_SOURCE_LENGTH``\ .

   :param params:

      Returns the requested object parameter.

.. rubric:: Specification

.. c:function:: void glGetShaderiv(GLuint  shader, GLenum  pname, GLint * params)


.. seealso::

   :c:func:`glCompileShader`\ ,
   :c:func:`glCreateShader`\ ,
   :c:func:`glDeleteShader`\ ,
   :c:func:`glGetProgram`\ ,
   :c:func:`glShaderSource`

..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glGetShader`
returns in *params*
the value of a parameter for a specific shader object. The
following parameters are defined:


``GL_SHADER_TYPE``

      *params* returns
      ``GL_VERTEX_SHADER`` if
      *shader* is a vertex shader
      object, ``GL_GEOMETRY_SHADER`` if *shader*
      is a geometry shader object, and ``GL_FRAGMENT_SHADER``
      if *shader* is a fragment
      shader object.


``GL_DELETE_STATUS``

      *params* returns
      ``GL_TRUE`` if
      *shader* is currently flagged
      for deletion, and ``GL_FALSE``
      otherwise.


``GL_COMPILE_STATUS``

      *params* returns
      ``GL_TRUE`` if the last compile
      operation on *shader* was
      successful, and ``GL_FALSE``
      otherwise.


``GL_INFO_LOG_LENGTH``

      *params* returns the
      number of characters in the information log for
      *shader* including the null
      termination character (i.e., the size of the
      character buffer required to store the information
      log). If *shader* has no
      information log, a value of 0 is returned.


``GL_SHADER_SOURCE_LENGTH``

      *params* returns the
      length of the concatenation of the source strings
      that make up the shader source for the
      *shader*\ , including the null
      termination character. (i.e., the size of the
      character buffer required to store the shader
      source). If no source code exists, 0 is
      returned.


.. note::

   If an error is generated, no change is made to the
   contents of *params*\ .

..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` is generated if *shader* is not a value generated by OpenGL.
* ``GL_INVALID_OPERATION`` is generated if *shader* does not refer to a shader object.
* ``GL_INVALID_ENUM`` is generated if *pname* is not an accepted value.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetShaderInfoLog` with argument *shader*
* :c:func:`glGetShaderSource` with argument *shader*
* :c:func:`glIsShader`


.. -----------------------------------------------------------------------------

.. <foot 'glGetShader'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2003-2005 3Dlabs Inc. Ltd. Open Publication License.

