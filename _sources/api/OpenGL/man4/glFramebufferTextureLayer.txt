.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glFramebufferTextureLayer.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glFramebufferTextureLayer`
------------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Attach a single layer of a texture to a framebuffer

.. c:function:: glFramebufferTextureLayer


         :param target:

                  Specifies the framebuffer target. *target* must be ``GL_DRAW_FRAMEBUFFER``\ ,
                  ``GL_READ_FRAMEBUFFER``\ , or ``GL_FRAMEBUFFER``\ . ``GL_FRAMEBUFFER``
                  is equivalent to ``GL_DRAW_FRAMEBUFFER``\ .

         :param attachment:

                  Specifies the attachment point of the framebuffer. *attachment* must be
                  ``GL_COLOR_ATTACHMENT i``\ , ``GL_DEPTH_ATTACHMENT``\ ,
                  ``GL_STENCIL_ATTACHMENT`` or ``GL_DEPTH_STENCIL_ATTACHMMENT``\ .

         :param texture:

                  Specifies the texture object to attach to the framebuffer attachment point named by *attachment*\ .

         :param level:

                  Specifies the mipmap level of *texture* to attach.

         :param layer:

                  Specifies the layer of *texture* to attach.

.. rubric:: Specification

.. c:function:: void glFramebufferTextureLayer(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer)
   :noindex: 


.. seealso::


            :c:func:`glGenFramebuffers`\ ,
            :c:func:`glBindFramebuffer`\ ,
            :c:func:`glGenRenderbuffers`\ ,
            :c:func:`glFramebufferTexture`\ ,
            :c:func:`glFramebufferTextureFace`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glFramebufferTextureLayer` operates like :c:func:`glFramebufferTexture`\ ,
except that only a single layer of the texture level, given by *layer*\ , is attached to the attachment point.
If *texture* is not zero, *layer* must be greater than or equal to zero.
*texture* must either be zero or the name of an existing three-dimensional texture, one- or two-dimensional array texture,
or multisample array texture.


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *target* is not one of the accepted tokens.
* ``GL_INVALID_ENUM`` is generated if *attachment* is not one of the accepted tokens.
* ``GL_INVALID_VALUE`` is generated if *texture* is not zero or the name of an existing texture object.
* ``GL_INVALID_VALUE`` is generated if *texture* is not zero and *layer* is negative.
* ``GL_INVALID_OPERATION`` is generated if zero is bound to *target*\ .
* ``GL_INVALID_OPERATION`` is generated if *texture* is not zero or the name of an existing cube map texture.


.. -----------------------------------------------------------------------------

.. <foot 'glFramebufferTextureLayer'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

