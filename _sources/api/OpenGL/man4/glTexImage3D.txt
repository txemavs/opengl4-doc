.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:30
.. *****************************************************************************

.. following information was extracted from file 'man4/glTexImage3D.xml'
.. (c)1991-2006 Silicon Graphics, Inc. 2011 Khronos Group.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man4

function `glTexImage3D`
-----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Specify a three-dimensional texture image

.. c:function:: glTexImage3D


         :param target:

                  Specifies the target texture.
                  Must be one of ``GL_TEXTURE_3D``\ , ``GL_PROXY_TEXTURE_3D``\ ,
                  ``GL_TEXTURE_2D_ARRAY`` or ``GL_PROXY_TEXTURE_2D_ARRAY``\ .

         :param level:

                  Specifies the level-of-detail number.
                  Level 0 is the base image level.
                  Level
                  |EQUATION_1_| is the |EQUATION_2_| mipmap reduction image.

         :param internalFormat:

                  Specifies the number of color components in the texture.
                  Must be one of base internal formats given in Table 1,
                  one of the sized internal formats given in Table 2, or one
                  of the compressed internal formats given in Table 3, below.

         :param width:

                  Specifies the width of the texture image.
                  All implementations support 3D texture images that are at least 16 texels
                  wide.

         :param height:

                  Specifies the height of the texture image.
                  All implementations support 3D texture images that are at least 256 texels
                  high.

         :param depth:

                  Specifies the depth of the texture image, or the number of layers in a texture array.
                  All implementations support 3D texture images that are at least 256 texels
                  deep, and texture arrays that are at least 256 layers deep.

         :param border:

                  This value must be 0.

         :param format:

                  Specifies the format of the pixel data.
                  The following symbolic values are accepted:
                  ``GL_RED``\ ,
                  ``GL_RG``\ ,
                  ``GL_RGB``\ ,
                  ``GL_BGR``\ ,
                  ``GL_RGBA``\ , and
                  ``GL_BGRA``\ .

         :param type:

                  Specifies the data type of the pixel data.
                  The following symbolic values are accepted:
                  ``GL_UNSIGNED_BYTE``\ ,
                  ``GL_BYTE``\ ,
                  ``GL_UNSIGNED_SHORT``\ ,
                  ``GL_SHORT``\ ,
                  ``GL_UNSIGNED_INT``\ ,
                  ``GL_INT``\ ,
                  ``GL_FLOAT``\ ,
                  ``GL_UNSIGNED_BYTE_3_3_2``\ ,
                  ``GL_UNSIGNED_BYTE_2_3_3_REV``\ ,
                  ``GL_UNSIGNED_SHORT_5_6_5``\ ,
                  ``GL_UNSIGNED_SHORT_5_6_5_REV``\ ,
                  ``GL_UNSIGNED_SHORT_4_4_4_4``\ ,
                  ``GL_UNSIGNED_SHORT_4_4_4_4_REV``\ ,
                  ``GL_UNSIGNED_SHORT_5_5_5_1``\ ,
                  ``GL_UNSIGNED_SHORT_1_5_5_5_REV``\ ,
                  ``GL_UNSIGNED_INT_8_8_8_8``\ ,
                  ``GL_UNSIGNED_INT_8_8_8_8_REV``\ ,
                  ``GL_UNSIGNED_INT_10_10_10_2``\ , and
                  ``GL_UNSIGNED_INT_2_10_10_10_REV``\ .

         :param data:

                  Specifies a pointer to the image data in memory.

.. rubric:: Specification

.. c:function:: void glTexImage3D(GLenum  target, GLint  level, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid *  data)
   :noindex: 


.. seealso::


            :c:func:`glActiveTexture`\ ,
            :c:func:`glCompressedTexImage1D`\ ,
            :c:func:`glCompressedTexImage2D`\ ,
            :c:func:`glCompressedTexImage3D`\ ,
            :c:func:`glCompressedTexSubImage1D`\ ,
            :c:func:`glCompressedTexSubImage2D`\ ,
            :c:func:`glCompressedTexSubImage3D`\ ,
            :c:func:`glCopyTexImage1D`\ ,
            :c:func:`glCopyTexImage2D`\ ,
            :c:func:`glCopyTexSubImage1D`\ ,
            :c:func:`glCopyTexSubImage2D`\ ,
            :c:func:`glCopyTexSubImage3D`\ ,
            :c:func:`glGetCompressedTexImage`\ ,
            :c:func:`glPixelStore`\ ,
            :c:func:`glTexImage1D`\ ,
            :c:func:`glTexImage2D`\ ,
            :c:func:`glTexSubImage1D`\ ,
            :c:func:`glTexSubImage2D`\ ,
            :c:func:`glTexSubImage3D`\ ,
            :c:func:`glTexParameter`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Texturing maps a portion of a specified texture image
onto each graphical primitive for which texturing is enabled.
To enable and disable three-dimensional texturing, call :c:func:`glEnable`
and :c:func:`glDisable` with argument ``GL_TEXTURE_3D``\ .


To define texture images, call :c:func:`glTexImage3D`\ .
The arguments describe the parameters of the texture image,
such as height,
width, depth,
width of the border,
level-of-detail number
(see :c:func:`glTexParameter`\ ),
and number of color components provided.
The last three arguments describe how the image is represented in memory.


If *target* is ``GL_PROXY_TEXTURE_3D``\ , no data is read from *data*\ , but
all of the texture image state is recalculated, checked for
consistency, and checked
against the implementation's capabilities. If the implementation cannot
handle a texture of the requested texture size, it sets
all of the image state to 0,
but does not generate an error (see :c:func:`glGetError`\ ). To query for an
entire mipmap array, use an image array level greater than or equal to
1.


If *target* is ``GL_TEXTURE_3D``\ ,
data is read from *data* as a sequence of signed or unsigned bytes,
shorts,
or longs,
or single-precision floating-point values,
depending on *type*\ .
These values are grouped into sets of one,
two,
three,
or four values,
depending on *format*\ ,
to form elements.
Each data byte is treated as eight 1-bit elements,
with bit ordering determined by ``GL_UNPACK_LSB_FIRST``
(see :c:func:`glPixelStore`\ ).


If a non-zero named buffer object is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target
(see :c:func:`glBindBuffer`\ ) while a texture image is
specified, *data* is treated as a byte offset into the buffer object's data store.


The first element corresponds to the lower left corner of the texture
image.
Subsequent elements progress left-to-right through the remaining texels
in the lowest row of the texture image, and then in successively higher
rows of the texture image.
The final element corresponds to the upper right corner of the texture
image.


*format* determines the composition of each element in *data*\ .
It can assume one of these symbolic values:


         ``GL_RED``


               Each element is a single red component.
               The GL converts it to floating point and assembles it into an RGBA element
               by attaching 0 for green and blue, and 1 for alpha.
               Each component is then multiplied by the signed scale factor ``GL_c_SCALE``\ ,
               added to the signed bias ``GL_c_BIAS``\ ,
               and clamped to the range [0,1].


         ``GL_RG``


               Each element is a red and green pair.
               The GL converts each to floating point and assembles it into an RGBA element
               by attaching 0 for blue, and 1 for alpha.
               Each component is then multiplied by the signed scale factor ``GL_c_SCALE``\ ,
               added to the signed bias ``GL_c_BIAS``\ ,
               and clamped to the range [0,1].


         ``GL_RGB``


         ``GL_BGR``


               Each element is an RGB triple.
               The GL converts it to floating point and assembles it into an RGBA element
               by attaching 1 for alpha.
               Each component is then multiplied by the signed scale factor ``GL_c_SCALE``\ ,
               added to the signed bias ``GL_c_BIAS``\ ,
               and clamped to the range [0,1].


         ``GL_RGBA``


         ``GL_BGRA``


               Each element contains all four components.
               Each component is multiplied by the signed scale factor ``GL_c_SCALE``\ ,
               added to the signed bias ``GL_c_BIAS``\ ,
               and clamped to the range [0,1].


If an application wants to store the texture at a certain
resolution or in a certain format, it can request the resolution
and format with *internalFormat*\ . The GL will choose an internal
representation that closely approximates that requested by *internalFormat*\ , but
it may not match exactly.
(The representations specified by ``GL_RED``\ , ``GL_RG``\ , ``GL_RGB``\ ,
and ``GL_RGBA`` must match exactly.)


*internalFormat* may be one of the base internal formats shown in
Table 1, below


.. list-table:: Base Internal Formats
   :header-rows: 1

   * - :strong:`Base Internal Format`
     - :strong:`RGBA, Depth and Stencil Values`
     - :strong:`Internal Components`
   * - ``GL_DEPTH_COMPONENT``
     - Depth
     - D
   * - ``GL_DEPTH_STENCIL``
     - Depth, Stencil
     - D, S
   * - ``GL_RED``
     - Red
     - R
   * - ``GL_RG``
     - Red, Green
     - R, G
   * - ``GL_RGB``
     - Red, Green, Blue
     - R, G, B
   * - ``GL_RGBA``
     - Red, Green, Blue, Alpha
     - R, G, B, A


..


*internalFormat* may also be one of the sized internal formats
shown in Table 2, below


.. list-table:: Sized Internal Formats
   :header-rows: 1

   * - :strong:`Sized Internal Format`
     - :strong:`Base Internal Format`
     - :strong:`Red Bits`
     - :strong:`Green Bits`
     - :strong:`Blue Bits`
     - :strong:`Alpha Bits`
     - :strong:`Shared Bits`
   * - ``GL_R8``
     - ``GL_RED``
     - 8
     -
     -
     -
     -
   * - ``GL_R8_SNORM``
     - ``GL_RED``
     - s8
     -
     -
     -
     -
   * - ``GL_R16``
     - ``GL_RED``
     - 16
     -
     -
     -
     -
   * - ``GL_R16_SNORM``
     - ``GL_RED``
     - s16
     -
     -
     -
     -
   * - ``GL_RG8``
     - ``GL_RG``
     - 8
     - 8
     -
     -
     -
   * - ``GL_RG8_SNORM``
     - ``GL_RG``
     - s8
     - s8
     -
     -
     -
   * - ``GL_RG16``
     - ``GL_RG``
     - 16
     - 16
     -
     -
     -
   * - ``GL_RG16_SNORM``
     - ``GL_RG``
     - s16
     - s16
     -
     -
     -
   * - ``GL_R3_G3_B2``
     - ``GL_RGB``
     - 3
     - 3
     - 2
     -
     -
   * - ``GL_RGB4``
     - ``GL_RGB``
     - 4
     - 4
     - 4
     -
     -
   * - ``GL_RGB5``
     - ``GL_RGB``
     - 5
     - 5
     - 5
     -
     -
   * - ``GL_RGB8``
     - ``GL_RGB``
     - 8
     - 8
     - 8
     -
     -
   * - ``GL_RGB8_SNORM``
     - ``GL_RGB``
     - s8
     - s8
     - s8
     -
     -
   * - ``GL_RGB10``
     - ``GL_RGB``
     - 10
     - 10
     - 10
     -
     -
   * - ``GL_RGB12``
     - ``GL_RGB``
     - 12
     - 12
     - 12
     -
     -
   * - ``GL_RGB16_SNORM``
     - ``GL_RGB``
     - 16
     - 16
     - 16
     -
     -
   * - ``GL_RGBA2``
     - ``GL_RGB``
     - 2
     - 2
     - 2
     - 2
     -
   * - ``GL_RGBA4``
     - ``GL_RGB``
     - 4
     - 4
     - 4
     - 4
     -
   * - ``GL_RGB5_A1``
     - ``GL_RGBA``
     - 5
     - 5
     - 5
     - 1
     -
   * - ``GL_RGBA8``
     - ``GL_RGBA``
     - 8
     - 8
     - 8
     - 8
     -
   * - ``GL_RGBA8_SNORM``
     - ``GL_RGBA``
     - s8
     - s8
     - s8
     - s8
     -
   * - ``GL_RGB10_A2``
     - ``GL_RGBA``
     - 10
     - 10
     - 10
     - 2
     -
   * - ``GL_RGB10_A2UI``
     - ``GL_RGBA``
     - ui10
     - ui10
     - ui10
     - ui2
     -
   * - ``GL_RGBA12``
     - ``GL_RGBA``
     - 12
     - 12
     - 12
     - 12
     -
   * - ``GL_RGBA16``
     - ``GL_RGBA``
     - 16
     - 16
     - 16
     - 16
     -
   * - ``GL_SRGB8``
     - ``GL_RGB``
     - 8
     - 8
     - 8
     -
     -
   * - ``GL_SRGB8_ALPHA8``
     - ``GL_RGBA``
     - 8
     - 8
     - 8
     - 8
     -
   * - ``GL_R16F``
     - ``GL_RED``
     - f16
     -
     -
     -
     -
   * - ``GL_RG16F``
     - ``GL_RG``
     - f16
     - f16
     -
     -
     -
   * - ``GL_RGB16F``
     - ``GL_RGB``
     - f16
     - f16
     - f16
     -
     -
   * - ``GL_RGBA16F``
     - ``GL_RGBA``
     - f16
     - f16
     - f16
     - f16
     -
   * - ``GL_R32F``
     - ``GL_RED``
     - f32
     -
     -
     -
     -
   * - ``GL_RG32F``
     - ``GL_RG``
     - f32
     - f32
     -
     -
     -
   * - ``GL_RGB32F``
     - ``GL_RGB``
     - f32
     - f32
     - f32
     -
     -
   * - ``GL_RGBA32F``
     - ``GL_RGBA``
     - f32
     - f32
     - f32
     - f32
     -
   * - ``GL_R11F_G11F_B10F``
     - ``GL_RGB``
     - f11
     - f11
     - f10
     -
     -
   * - ``GL_RGB9_E5``
     - ``GL_RGB``
     - 9
     - 9
     - 9
     -
     - 5
   * - ``GL_R8I``
     - ``GL_RED``
     - i8
     -
     -
     -
     -
   * - ``GL_R8UI``
     - ``GL_RED``
     - ui8
     -
     -
     -
     -
   * - ``GL_R16I``
     - ``GL_RED``
     - i16
     -
     -
     -
     -
   * - ``GL_R16UI``
     - ``GL_RED``
     - ui16
     -
     -
     -
     -
   * - ``GL_R32I``
     - ``GL_RED``
     - i32
     -
     -
     -
     -
   * - ``GL_R32UI``
     - ``GL_RED``
     - ui32
     -
     -
     -
     -
   * - ``GL_RG8I``
     - ``GL_RG``
     - i8
     - i8
     -
     -
     -
   * - ``GL_RG8UI``
     - ``GL_RG``
     - ui8
     - ui8
     -
     -
     -
   * - ``GL_RG16I``
     - ``GL_RG``
     - i16
     - i16
     -
     -
     -
   * - ``GL_RG16UI``
     - ``GL_RG``
     - ui16
     - ui16
     -
     -
     -
   * - ``GL_RG32I``
     - ``GL_RG``
     - i32
     - i32
     -
     -
     -
   * - ``GL_RG32UI``
     - ``GL_RG``
     - ui32
     - ui32
     -
     -
     -
   * - ``GL_RGB8I``
     - ``GL_RGB``
     - i8
     - i8
     - i8
     -
     -
   * - ``GL_RGB8UI``
     - ``GL_RGB``
     - ui8
     - ui8
     - ui8
     -
     -
   * - ``GL_RGB16I``
     - ``GL_RGB``
     - i16
     - i16
     - i16
     -
     -
   * - ``GL_RGB16UI``
     - ``GL_RGB``
     - ui16
     - ui16
     - ui16
     -
     -
   * - ``GL_RGB32I``
     - ``GL_RGB``
     - i32
     - i32
     - i32
     -
     -
   * - ``GL_RGB32UI``
     - ``GL_RGB``
     - ui32
     - ui32
     - ui32
     -
     -
   * - ``GL_RGBA8I``
     - ``GL_RGBA``
     - i8
     - i8
     - i8
     - i8
     -
   * - ``GL_RGBA8UI``
     - ``GL_RGBA``
     - ui8
     - ui8
     - ui8
     - ui8
     -
   * - ``GL_RGBA16I``
     - ``GL_RGBA``
     - i16
     - i16
     - i16
     - i16
     -
   * - ``GL_RGBA16UI``
     - ``GL_RGBA``
     - ui16
     - ui16
     - ui16
     - ui16
     -
   * - ``GL_RGBA32I``
     - ``GL_RGBA``
     - i32
     - i32
     - i32
     - i32
     -
   * - ``GL_RGBA32UI``
     - ``GL_RGBA``
     - ui32
     - ui32
     - ui32
     - ui32
     -


..


Finally, *internalFormat* may also be one of the generic or compressed
compressed texture formats shown in Table 3 below


.. list-table:: Compressed Internal Formats
   :header-rows: 1

   * - :strong:`Compressed Internal Format`
     - :strong:`Base Internal Format`
     - :strong:`Type`
   * - ``GL_COMPRESSED_RED``
     - ``GL_RED``
     - Generic
   * - ``GL_COMPRESSED_RG``
     - ``GL_RG``
     - Generic
   * - ``GL_COMPRESSED_RGB``
     - ``GL_RGB``
     - Generic
   * - ``GL_COMPRESSED_RGBA``
     - ``GL_RGBA``
     - Generic
   * - ``GL_COMPRESSED_SRGB``
     - ``GL_RGB``
     - Generic
   * - ``GL_COMPRESSED_SRGB_ALPHA``
     - ``GL_RGBA``
     - Generic
   * - ``GL_COMPRESSED_RED_RGTC1``
     - ``GL_RED``
     - Specific
   * - ``GL_COMPRESSED_SIGNED_RED_RGTC1``
     - ``GL_RED``
     - Specific
   * - ``GL_COMPRESSED_RG_RGTC2``
     - ``GL_RG``
     - Specific
   * - ``GL_COMPRESSED_SIGNED_RG_RGTC2``
     - ``GL_RG``
     - Specific
   * - ``GL_COMPRESSED_RGBA_BPTC_UNORM``
     - ``GL_RGBA``
     - Specific
   * - ``GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM``
     - ``GL_RGBA``
     - Specific
   * - ``GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT``
     - ``GL_RGB``
     - Specific
   * - ``GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT``
     - ``GL_RGB``
     - Specific


..


If the *internalFormat* parameter is one of the generic compressed formats,
``GL_COMPRESSED_RED``\ , ``GL_COMPRESSED_RG``\ ,
``GL_COMPRESSED_RGB``\ , or
``GL_COMPRESSED_RGBA``\ , the GL will replace the internal format with the symbolic constant for a specific internal format and compress the texture before storage.  If no corresponding internal format is available, or the GL can not compress that image for any reason, the internal format is instead replaced with a corresponding base internal format.


If the *internalFormat* parameter is
``GL_SRGB``\ ,
``GL_SRGB8``\ ,
``GL_SRGB_ALPHA``\ , or
``GL_SRGB8_ALPHA8``\ , the texture is treated as if the red, green, blue, or luminance components are encoded in the sRGB color space.    Any alpha component is left unchanged.  The conversion from the sRGB encoded component
|EQUATION_3_| 			to a linear component
|EQUATION_4_| is:


|EQUATION_5_|


Assume
|EQUATION_6_| 			is the sRGB component in the range [0,1].


Use the ``GL_PROXY_TEXTURE_3D`` target to try out a resolution and
format. The implementation will
update and recompute its best match for the requested storage resolution
and format. To then query this state, call :c:func:`glGetTexLevelParameter`\ .
If the texture cannot be accommodated, texture state is set to 0.


A one-component texture image uses only the red component of the RGBA
color extracted from *data*\ .
A two-component image uses the R and A values.
A three-component image uses the R, G, and B values.
A four-component image uses all of the RGBA components.


.. note::


   The :c:func:`glPixelStore` mode affects texture images.


   *data* may be a null pointer.
   In this case texture memory is
   allocated to accommodate a texture of width *width*\ , height *height*\ ,
   and depth *depth*\ .
   You can then download subtextures to initialize this
   texture memory.
   The image is undefined if the user tries to apply
   an uninitialized portion of the texture image to a primitive.


   :c:func:`glTexImage3D` specifies the three-dimensional texture for the current texture unit,
   specified with :c:func:`glActiveTexture`\ .


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_TEXTURE_3D`` or ``GL_PROXY_TEXTURE_3D``\ .
* ``GL_INVALID_ENUM`` is generated if *format* is not an accepted format constant. Format constants other than ``GL_STENCIL_INDEX`` and ``GL_DEPTH_COMPONENT`` are accepted.
* ``GL_INVALID_ENUM`` is generated if *type* is not a type constant.
* ``GL_INVALID_VALUE`` is generated if *level* is less than 0.
* ``GL_INVALID_VALUE`` may be generated if *level* is greater than |EQUATION_7_|\ , where :strong:`max` is the returned value of ``GL_MAX_TEXTURE_SIZE``\ .
* ``GL_INVALID_VALUE`` is generated if *internalFormat* is not one of the accepted resolution and format symbolic constants.
* ``GL_INVALID_VALUE`` is generated if *width*\ , *height*\ , or *depth* is less than 0 or greater than ``GL_MAX_TEXTURE_SIZE``\ .
* ``GL_INVALID_VALUE`` is generated if non-power-of-two textures are not supported and the *width*\ , *height*\ , or *depth* cannot be represented as |EQUATION_8_| for some integer value of :strong:`k`\ .
* ``GL_INVALID_VALUE`` is generated if *border* is not 0 or 1.
* ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_BYTE_3_3_2``\ , ``GL_UNSIGNED_BYTE_2_3_3_REV``\ , ``GL_UNSIGNED_SHORT_5_6_5``\ , or ``GL_UNSIGNED_SHORT_5_6_5_REV`` and *format* is not ``GL_RGB``\ .
* ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``\ , ``GL_UNSIGNED_SHORT_4_4_4_4_REV``\ , ``GL_UNSIGNED_SHORT_5_5_5_1``\ , ``GL_UNSIGNED_SHORT_1_5_5_5_REV``\ , ``GL_UNSIGNED_INT_8_8_8_8``\ , ``GL_UNSIGNED_INT_8_8_8_8_REV``\ , ``GL_UNSIGNED_INT_10_10_10_2``\ , or ``GL_UNSIGNED_INT_2_10_10_10_REV`` and *format* is neither ``GL_RGBA`` nor ``GL_BGRA``\ .
* ``GL_INVALID_OPERATION`` is generated if *format* or *internalFormat* is ``GL_DEPTH_COMPONENT``\ , ``GL_DEPTH_COMPONENT16``\ , ``GL_DEPTH_COMPONENT24``\ , or ``GL_DEPTH_COMPONENT32``\ .
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the buffer object's data store is currently mapped.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type*\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetTexImage`
* :c:func:`glGet` with argument ``GL_PIXEL_UNPACK_BUFFER_BINDING``


.. -----------------------------------------------------------------------------

.. <foot 'glTexImage3D'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <msup><mi mathvariant="italic">n</mi><mi mathvariant="italic">th</mi></msup></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">s</mi></msub></math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">l</mi></msub></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">l</mi></msub><mo>=</mo><mrow><mo>{</mo><mtable columnalign="left"><mtr><mtd columnalign="left"><mfrac><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">s</mi></msub><mn>12.92</mn></mfrac></mtd><mtd columnalign="left"><mrow><mspace width="1ex"/><mo>if</mo><mspace width="1ex"/></mrow><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">s</mi></msub><mo>&le;</mo><mn>0.04045</mn></mtd></mtr><mtr><mtd columnalign="left"><msup><mrow><mo>(</mo><mfrac><mrow><msub><mi>c</mi><mi>s</mi></msub><mo>+</mo><mn>0.055</mn></mrow><mn>1.055</mn></mfrac><mo>)</mo></mrow><mn>2.4</mn></msup></mtd><mtd columnalign="left"><mrow><mspace width="1ex"/><mo>if</mo><mspace width="1ex"/></mrow><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">s</mi></msub><mo>></mo><mn>0.04045</mn></mtd></mtr></mtable></mrow></mrow></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><msub><mi mathvariant="italic">c</mi><mi mathvariant="italic">s</mi></msub></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><msub><mi mathvariant="italic">log</mi><mn>2</mn></msub><mo>&af;</mo><mfenced open="(" close=")"><mi mathvariant="italic">max</mi></mfenced></mrow></math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><msup><mn>2</mn><mi mathvariant="italic">k</mi></msup><mo>+</mo><mrow><mn>2</mn><mo>&af;</mo><mfenced open="(" close=")"><mi mathvariant="italic">border</mi></mfenced></mrow></mrow></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. (\ c\ )2011 Khronos Group. SGI Free Software B License.

