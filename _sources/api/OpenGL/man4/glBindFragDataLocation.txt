.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man4/glBindFragDataLocation.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glBindFragDataLocation`
---------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Bind a user-defined varying out variable to a fragment shader color number

.. c:function:: glBindFragDataLocation


         :param program:

                  The name of the program containing varying out variable whose binding to modify

         :param colorNumber:

                  The color number to bind the user-defined varying out variable to

         :param name:

                  The name of the user-defined varying out variable whose binding to modify

.. rubric:: Specification

.. c:function:: void glBindFragDataLocation(GLuint  program, GLuint  colorNumber, const char *  name)
   :noindex: 


.. seealso::


            :c:func:`glCreateProgram`\ ,
            :c:func:`glGetFragDataLocation`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glBindFragDataLocation` explicitly specifies the binding of the user-defined varying out variable
*name* to fragment shader color number *colorNumber* for program
*program*\ . If *name* was bound previously, its assigned binding is replaced
with *colorNumber*\ . *name* must be a null-terminated string. *colorNumber*
must be less than ``GL_MAX_DRAW_BUFFERS``\ .


The bindings specified by :c:func:`glBindFragDataLocation` have no effect until *program*
is next linked. Bindings may be specified at any time after *program* has been created. Specifically,
they may be specified before shader objects are attached to the program. Therefore, any name may be specified in *name*\ ,
including a name that is never used as a varying out variable in any fragment shader object. Names beginning with ``gl_`` are
reserved by the GL.


In addition to the errors generated by :c:func:`glBindFragDataLocation`\ , the
program *program* will fail to link if:

         *  The number of active outputs is greater than the value ``GL_MAX_DRAW_BUFFERS``\ .
         *  More than one varying out variable is bound to the same color number.


.. note::


   Varying out varyings may have indexed locations assigned explicitly in the shader text using a ``location``
   layout qualifier. If a shader statically assigns a location to a varying out variable in the shader text,
   that location is used and any location assigned with :c:func:`glBindFragDataLocation` is ignored.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` is generated if *colorNumber* is greater than or equal to ``GL_MAX_DRAW_BUFFERS``\ .
* ``GL_INVALID_OPERATION`` is generated if *name* starts with the reserved ``gl_`` prefix.
* ``GL_INVALID_OPERATION`` is generated if :c:func:`program` is not the name of a program object.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetFragDataLocation` with a valid program object and the the name of a user-defined varying out variable


.. -----------------------------------------------------------------------------

.. <foot 'glBindFragDataLocation'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

