.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:29
.. *****************************************************************************

.. following information was extracted from file 'man4/glDrawArraysInstanced.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glDrawArraysInstanced`
--------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Draw multiple instances of a range of elements

.. c:function:: glDrawArraysInstanced


         :param mode:

                  Specifies what kind of primitives to render. Symbolic constants ``GL_POINTS``\ ,
                  ``GL_LINE_STRIP``\ , ``GL_LINE_LOOP``\ , ``GL_LINES``\ ,
                  ``GL_TRIANGLE_STRIP``\ , ``GL_TRIANGLE_FAN``\ , ``GL_TRIANGLES``
                  ``GL_LINES_ADJACENCY``\ , ``GL_LINE_STRIP_ADJACENCY``\ ,
                  ``GL_TRIANGLES_ADJACENCY``\ , ``GL_TRIANGLE_STRIP_ADJACENCY`` and ``GL_PATCHES``
                  are accepted.

         :param first:

                  Specifies the starting index in the enabled arrays.

         :param count:

                  Specifies the number of indices to be rendered.

         :param primcount:

                  Specifies the number of instances of the specified range of indices to be rendered.

.. rubric:: Specification

.. c:function:: void glDrawArraysInstanced(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount)
   :noindex: 


.. seealso::


            :c:func:`glDrawArrays`\ ,
            :c:func:`glDrawElementsInstanced`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glDrawArraysInstanced` behaves identically to :c:func:`glDrawArrays`
except that *primcount* instances of the range of elements are executed and the value of the internal counter
*instanceID* advances for each iteration. *instanceID* is an internal 32-bit integer counter
that may be read by a vertex shader as ``gl_InstanceID``\ .


:c:func:`glDrawArraysInstanced` has the same effect as:

.. code-block:: c

       if ( mode or count is invalid )
           generate appropriate error
       else {
           for (int i = 0; i < primcount ; i++) {
               instanceID = i;
               glDrawArrays(mode, first, count);
           }
           instanceID = 0;
       }
..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *mode* is not one of the accepted values.
* ``GL_INVALID_OPERATION`` is generated if a geometry shader is active and *mode* is incompatible with the input primitive type of the geometry shader in the currently installed program object.
* ``GL_INVALID_VALUE`` is generated if *count* or *primcount* are negative.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to an enabled array and the buffer object's data store is currently mapped.


.. -----------------------------------------------------------------------------

.. <foot 'glDrawArraysInstanced'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

