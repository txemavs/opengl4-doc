.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man4/glBeginTransformFeedback.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glBeginTransformFeedback`
-----------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Start transform feedback operation

.. c:function:: glBeginTransformFeedback


         :param primitiveMode:

                  Specify the output type of the primitives that will be recorded into the
                  buffer objects that are bound for transform feedback.

.. rubric:: Specification

.. c:function:: void glBeginTransformFeedback(GLenum  primitiveMode)
   :noindex: 

.. c:function:: void glEndTransformFeedback( void)


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Transform feedback mode captures the values of varying variables written by the vertex shader (or, if active, the geometry shader).
Transform feedback is said to be active after a call to :c:func:`glBeginTransformFeedback`
until a subsequent call to :c:func:`glEndTransformFeedback`\ .
Transform feedback commands must be paired.


If no geometry shader is present, while transform feedback is active the *mode* parameter to
:c:func:`glDrawArrays` must match those specified
in the following table:


+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :strong:`Transform Feedback *primitiveMode*` | :strong:`Allowed Render Primitive *modes*`                                                                                        |
+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ``GL_POINTS``                                | ``GL_POINTS``                                                                                                                     |
+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ``GL_LINES``                                 | ``GL_LINES``\ , ``GL_LINE_LOOP``\ , ``GL_LINE_STRIP``\ , ``GL_LINES_ADJACENCY``\ , ``GL_LINE_STRIP_ADJACENCY``                    |
+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ``GL_TRIANGLES``                             | ``GL_TRIANGLES``\ , ``GL_TRIANGLE_STRIP``\ , ``GL_TRIANGLE_FAN``\ , ``GL_TRIANGLES_ADJACENCY``\ , ``GL_TRIANGLE_STRIP_ADJACENCY`` |
+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+


If a geometry shader is present, the output primitive type from the geometry shader must match those
provided in the following table:

      +----------------------------------------------+---------------------------------------------------------+
      | :strong:`Transform Feedback *primitiveMode*` | :strong:`Allowed Geometry Shader Output Primitive Type` |
      +----------------------------------------------+---------------------------------------------------------+
      | ``GL_POINTS``                                | ``points``                                              |
      +----------------------------------------------+---------------------------------------------------------+
      | ``GL_LINES``                                 | ``line_strip``                                          |
      +----------------------------------------------+---------------------------------------------------------+
      | ``GL_TRIANGLES``                             | ``triangle_strip``                                      |
      +----------------------------------------------+---------------------------------------------------------+


.. note::


   Geometry shaders, and the ``GL_TRIANGLES_ADJACENCY``\ , ``GL_TRIANGLE_STRIP_ADJACENCY``\ ,
   ``GL_LINES_ADJACENCY`` and ``GL_LINE_STRIP_ADJACENCY`` primtive modes are available
   only if the GL version is 3.2 or greater.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_OPERATION`` is generated if :c:func:`glBeginTransformFeedback` is executed while transform feedback is active.
* ``GL_INVALID_OPERATION`` is generated if :c:func:`glEndTransformFeedback` is executed while transform feedback is not active.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glDrawArrays` if no geometry shader is present, transform feedback is active and *mode* is not one of the allowed modes.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glDrawArrays` if a geometry shader is present, transform feedback is active and the output primitive type of the geometry shader does not match the transform feedback *primitiveMode*\ .
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glEndTransformFeedback` if any binding point used in transform feedback mode does not have a buffer object bound.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glEndTransformFeedback` if no binding points would be used, either because no program object is active of because the active program object has specified no varying variables to record.


.. -----------------------------------------------------------------------------

.. <foot 'glBeginTransformFeedback'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

