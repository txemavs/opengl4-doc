.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man4/glBlitFramebuffer.xml'
.. (c)2010 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glBlitFramebuffer`
----------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Copy a block of pixels from the read framebuffer to the draw framebuffer

.. c:function:: glBlitFramebuffer


         :param srcX0:
         :param srcY0:
         :param srcX1:
         :param srcY1:

                  Specify the bounds of the source rectangle within the read buffer of the read framebuffer.

         :param dstX0:
         :param dstY0:
         :param dstX1:
         :param dstY1:

                  Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.

         :param mask:

                  The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are
                  ``GL_COLOR_BUFFER_BIT``\ , ``GL_DEPTH_BUFFER_BIT`` and ``GL_STENCIL_BUFFER_BIT``\ .

         :param filter:

                  Specifies the interpolation to be applied if the image is stretched. Must be ``GL_NEAREST`` or ``GL_LINEAR``\ .

.. rubric:: Specification

.. c:function:: void glBlitFramebuffer(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter)
   :noindex: 


.. seealso::


            :c:func:`glReadPixels`
            :c:func:`glCheckFramebufferStatus`\ ,
            :c:func:`glGenFramebuffers`
            :c:func:`glBindFramebuffer`
            :c:func:`glDeleteFramebuffers`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glBlitFramebuffer` transfers a rectangle of pixel values from one region of the read framebuffer to another region in
the draw framebuffer. *mask* is the bitwise OR of a number of values indicating which buffers are
to be copied. The values are ``GL_COLOR_BUFFER_BIT``\ , ``GL_DEPTH_BUFFER_BIT``\ , and
``GL_STENCIL_BUFFER_BIT``\ . The pixels corresponding to these buffers are copied from the source rectangle bounded by the
locations (\ *srcX0*\ ; *srcY0*\ ) and (\ *srcX1*\ ; *srcY1*\ )
to the destination rectangle bounded by the locations (\ *dstX0*\ ; *dstY0*\ ) and
(\ *dstX1*\ ; *dstY1*\ ). The lower bounds of the rectangle are inclusive, while the upper
bounds are exclusive.


The actual region taken from the read framebuffer is limited to the intersection of the source buffers being transferred, which may
include the color buffer selected by the read buffer, the depth buffer, and/or the stencil buffer depending on mask. The actual region
written to the draw framebuffer is limited to the intersection of the destination buffers being written, which may include multiple draw
buffers, the depth buffer, and/or the stencil buffer depending on mask. Whether or not the source or destination regions are altered due
to these limits, the scaling and offset applied to pixels being transferred is performed as though no such limits were present.


If the sizes of the source and destination rectangles are not equal, *filter* specifies the interpolation method that
will be applied to resize the source image , and must be ``GL_NEAREST`` or ``GL_LINEAR``\ .
``GL_LINEAR`` is only a valid interpolation method for the color buffer. If *filter* is not
``GL_NEAREST`` and *mask* includes ``GL_DEPTH_BUFFER_BIT`` or
``GL_STENCIL_BUFFER_BIT``\ , no data is transferred and a ``GL_INVALID_OPERATION`` error is generated.


If *filter* is ``GL_LINEAR`` and the source rectangle would require sampling outside the bounds of
the source framebuffer, values are read as if the ``GL_CLAMP_TO_EDGE`` texture wrapping mode were applied.


When the color buffer is transferred, values are taken from the read buffer of the read framebuffer and written to each of the draw
buffers of the draw framebuffer.


If the source and destination rectangles overlap or are the same, and the read and draw buffers are the same, the result of the operation
is undefined.


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_OPERATION`` is generated if *mask* contains any of the ``GL_DEPTH_BUFFER_BIT`` or ``GL_STENCIL_BUFFER_BIT`` and *filter* is not ``GL_NEAREST``\ .
* ``GL_INVALID_OPERATION`` is generated if *mask* contains ``GL_COLOR_BUFFER_BIT`` and any of the following conditions hold: * The read buffer contains fixed-point or floating-point values and any draw buffer contains neither fixed-point nor floating-point values. * The read buffer contains unsigned integer values and any draw buffer does not contain unsigned integer values. * The read buffer contains signed integer values and any draw buffer does not contain signed integer values.
* ``GL_INVALID_OPERATION`` is generated if *mask* contains ``GL_DEPTH_BUFFER_BIT`` or ``GL_STENCIL_BUFFER_BIT`` and the source and destination depth and stencil formats do not match.
* ``GL_INVALID_OPERATION`` is generated if *filter* is ``GL_LINEAR`` and the read buffer contains integer data.
* ``GL_INVALID_OPERATION`` is generated if the value of *GL_SAMPLES* for the read and draw buffers is not identical.
* ``GL_INVALID_OPERATION`` is generated if *GL_SAMPLE_BUFFERS* for both read and draw buffers greater than zero and the dimensions of the source and destination rectangles is not identical.
* ``GL_INVALID_FRAMEBUFFER_OPERATION`` is generated if the objects bound to ``GL_DRAW_FRAMEBUFFER_BINDING`` or ``GL_READ_FRAMEBUFFER_BINDING`` are not framebuffer complete.


.. -----------------------------------------------------------------------------

.. <foot 'glBlitFramebuffer'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2010 Khronos Group. Open Publication License.

