.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:30
.. *****************************************************************************

.. following information was extracted from file 'man4/glStencilOpSeparate.xml'
.. (c)2006 Khronos Group.
.. See license details at http://opencontent.org/openpub/


.. currentmodule:: OpenGL.man4

function `glStencilOpSeparate`
------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 4 Vol. 3G

Set front and/or back stencil test actions

.. c:function:: glStencilOpSeparate


         :param face:

                  Specifies whether front and/or back stencil state is updated.
                  Three symbolic constants are valid:
                  ``GL_FRONT``\ ,
                  ``GL_BACK``\ , and
                  ``GL_FRONT_AND_BACK``\ .

         :param sfail:

                  Specifies the action to take when the stencil test fails.
                  Eight symbolic constants are accepted:
                  ``GL_KEEP``\ ,
                  ``GL_ZERO``\ ,
                  ``GL_REPLACE``\ ,
                  ``GL_INCR``\ ,
                  ``GL_INCR_WRAP``\ ,
                  ``GL_DECR``\ ,
                  ``GL_DECR_WRAP``\ , and
                  ``GL_INVERT``\ . The initial value is ``GL_KEEP``\ .

         :param dpfail:

                  Specifies the stencil action when the stencil test passes,
                  but the depth test fails.
                  *dpfail* accepts the same symbolic constants as *sfail*\ . The initial value
                  is ``GL_KEEP``\ .

         :param dppass:

                  Specifies the stencil action when both the stencil test and the depth
                  test pass, or when the stencil test passes and either there is no
                  depth buffer or depth testing is not enabled.
                  *dppass* accepts the same symbolic constants as *sfail*\ . The initial value
                  is ``GL_KEEP``\ .

.. rubric:: Specification

.. c:function:: void glStencilOpSeparate(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass)
   :noindex: 


.. seealso::


            :c:func:`glBlendFunc`\ ,
            :c:func:`glDepthFunc`\ ,
            :c:func:`glEnable`\ ,
            :c:func:`glLogicOp`\ ,
            :c:func:`glStencilFunc`\ ,
            :c:func:`glStencilFuncSeparate`\ ,
            :c:func:`glStencilMask`\ ,
            :c:func:`glStencilMaskSeparate`\ ,
            :c:func:`glStencilOp`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Stenciling,
like depth-buffering,
enables and disables drawing on a per-pixel basis.
You draw into the stencil planes using GL drawing primitives,
then render geometry and images,
using the stencil planes to mask out portions of the screen.
Stenciling is typically used in multipass rendering algorithms
to achieve special effects,
such as decals,
outlining,
and constructive solid geometry rendering.


The stencil test conditionally eliminates a pixel based on the outcome
of a comparison between the value in the stencil buffer and a
reference value. To enable and disable the test, call :c:func:`glEnable`
and :c:func:`glDisable` with argument
``GL_STENCIL_TEST``\ ; to control it, call
:c:func:`glStencilFunc` or
:c:func:`glStencilFuncSeparate`\ .


There can be two separate sets of *sfail*\ , *dpfail*\ , and
*dppass* parameters; one affects back-facing polygons, and the other
affects front-facing polygons as well as other non-polygon primitives.
:c:func:`glStencilOp` sets both front
and back stencil state to the same values, as if
:c:func:`glStencilOpSeparate` were called
with *face* set to ``GL_FRONT_AND_BACK``\ .


:c:func:`glStencilOpSeparate` takes three arguments that indicate what happens
to the stored stencil value while stenciling is enabled.
If the stencil test fails,
no change is made to the pixel's color or depth buffers,
and *sfail* specifies what happens to the stencil buffer contents.
The following eight actions are possible.


         ``GL_KEEP``


               Keeps the current value.


         ``GL_ZERO``


               Sets the stencil buffer value to 0.


         ``GL_REPLACE``


               Sets the stencil buffer value to :strong:`ref`\ ,
               as specified by :c:func:`glStencilFunc`\ .


         ``GL_INCR``


               Increments the current stencil buffer value.
               Clamps to the maximum representable unsigned value.


         ``GL_INCR_WRAP``


               Increments the current stencil buffer value.
               Wraps stencil buffer value to zero when incrementing the maximum
               representable unsigned value.


         ``GL_DECR``


               Decrements the current stencil buffer value.
               Clamps to 0.


         ``GL_DECR_WRAP``


               Decrements the current stencil buffer value.
               Wraps stencil buffer value to the maximum representable unsigned value when
               decrementing a stencil buffer value of zero.


         ``GL_INVERT``


               Bitwise inverts the current stencil buffer value.


Stencil buffer values are treated as unsigned integers.
When incremented and decremented,
values are clamped to 0 and
|EQUATION_1_|\ ,
where |EQUATION_2_| is the value returned by querying ``GL_STENCIL_BITS``\ .


The other two arguments to :c:func:`glStencilOpSeparate` specify stencil buffer actions
that depend on whether subsequent depth buffer tests succeed (\ *dppass*\ )
or fail (\ *dpfail*\ ) (see
:c:func:`glDepthFunc`\ ).
The actions are specified using the same eight symbolic constants as *sfail*\ .
Note that *dpfail* is ignored when there is no depth buffer,
or when the depth buffer is not enabled.
In these cases, *sfail* and *dppass* specify stencil action when the
stencil test fails and passes,
respectively.


.. note::


   Initially the stencil test is disabled.
   If there is no stencil buffer,
   no stencil modification can occur
   and it is as if the stencil test always passes.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *face* is any value other than ``GL_FRONT``\ , ``GL_BACK``\ , or ``GL_FRONT_AND_BACK``\ .
* ``GL_INVALID_ENUM`` is generated if *sfail*\ , *dpfail*\ , or *dppass* is any value other than the eight defined constant values.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_STENCIL_FAIL``\ , ``GL_STENCIL_PASS_DEPTH_PASS``\ , ``GL_STENCIL_PASS_DEPTH_FAIL``\ , ``GL_STENCIL_BACK_FAIL``\ , ``GL_STENCIL_BACK_PASS_DEPTH_PASS``\ , ``GL_STENCIL_BACK_PASS_DEPTH_FAIL``\ , or ``GL_STENCIL_BITS``
* :c:func:`glIsEnabled` with argument ``GL_STENCIL_TEST``


.. -----------------------------------------------------------------------------

.. <foot 'glStencilOpSeparate'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><msup><mn>2</mn><mi mathvariant="italic">n</mi></msup><mo>-</mo><mn>1</mn></mrow></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )2006 Khronos Group. Open Publication License.

