.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glReadPixels`
-----------------------

.. source file man4/glReadPixels

.. currentmodule:: OpenGL.GL

Read a block of pixels from the frame buffer

.. c:function:: glReadPixels
.. c:function:: void glReadPixels(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLvoid *  data)
   :noindex: 


   
   :param x:
      Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
   
   :param width:
      Specify the dimensions of the pixel rectangle. *width* and *height* of one correspond to a single pixel.
   
   :param format:
      Specifies the format of the pixel data. The following symbolic values are accepted: ``GL_STENCIL_INDEX``, ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_STENCIL``, ``GL_RED``, ``GL_GREEN``, ``GL_BLUE``, ``GL_RGB``, ``GL_BGR``, ``GL_RGBA``, and ``GL_BGRA``.
   
   :param type:
      Specifies the data type of the pixel data. Must be one of ``GL_UNSIGNED_BYTE``, ``GL_BYTE``, ``GL_UNSIGNED_SHORT``, ``GL_SHORT``, ``GL_UNSIGNED_INT``, ``GL_INT``, ``GL_HALF_FLOAT``, ``GL_FLOAT``, ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, ``GL_UNSIGNED_INT_2_10_10_10_REV``, ``GL_UNSIGNED_INT_24_8``, ``GL_UNSIGNED_INT_10F_11F_11F_REV``, ``GL_UNSIGNED_INT_5_9_9_9_REV``, or ``GL_FLOAT_32_UNSIGNED_INT_24_8_REV``.
   
   :param data:
      Returns the pixel data.
   

.. seealso::

   
   :c:func:`glPixelStore`, :c:func:`glReadBuffer`
   
.. rubric:: Description


:c:func:`glReadPixels` returns pixel data from the frame buffer, starting with the pixel whose lower left corner is at location ( *x* , *y* ), into client memory starting at location *data* . Several parameters control the processing of the pixel data before it is placed into client memory. These parameters are set with :c:func:`glPixelStore`. This reference page describes the effects on :c:func:`glReadPixels` of most, but not all of the parameters specified by these three commands.

If a non-zero named buffer object is bound to the ``GL_PIXEL_PACK_BUFFER`` target (see :c:func:`glBindBuffer`) while a block of pixels is requested, *data* is treated as a byte offset into the buffer object's data store rather than a pointer to client memory.

:c:func:`glReadPixels` returns values from each pixel with lower left corner at |EQUATION_1_| for |EQUATION_2_| and |EQUATION_3_| . This pixel is said to be the |EQUATION_4_| th pixel in the |EQUATION_5_| th row. Pixels are returned in row order from the lowest to the highest row, left to right in each row.

*format* specifies the format for the returned pixel values; accepted values are:


   
   ``GL_STENCIL_INDEX``
      Stencil values are read from the stencil buffer. Each index is converted to fixed point, shifted left or right depending on the value and sign of ``GL_INDEX_SHIFT``, and added to ``GL_INDEX_OFFSET``. If ``GL_MAP_STENCIL`` is ``GL_TRUE``, indices are replaced by their mappings in the table ``GL_PIXEL_MAP_S_TO_S``.
   
   ``GL_DEPTH_COMPONENT``
      Depth values are read from the depth buffer. Each component is converted to floating point such that the minimum depth value maps to 0 and the maximum value maps to 1. Each component is then multiplied by ``GL_DEPTH_SCALE``, added to ``GL_DEPTH_BIAS``, and finally clamped to the range |EQUATION_6_| .
   
   ``GL_DEPTH_STENCIL``
      Values are taken from both the depth and stencil buffers. The *type* parameter must be ``GL_UNSIGNED_INT_24_8`` or ``GL_FLOAT_32_UNSIGNED_INT_24_8_REV``.
   
   ``GL_RED``
      [empty]
   
   ``GL_GREEN``
      [empty]
   
   ``GL_BLUE``
      [empty]
   
   ``GL_RGB``
      [empty]
   
   ``GL_BGR``
      [empty]
   
   ``GL_RGBA``
      [empty]
   
   ``GL_BGRA``
      [empty]
   
Finally, the indices or components are converted to the proper format, as specified by *type* . If *format* is ``GL_STENCIL_INDEX`` and *type* is not ``GL_FLOAT``, each index is masked with the mask value given in the following table. If *type* is ``GL_FLOAT``, then each integer index is converted to single-precision floating-point format.

If *format* is ``GL_RED``, ``GL_GREEN``, ``GL_BLUE``, ``GL_RGB``, ``GL_BGR``, ``GL_RGBA``, or ``GL_BGRA`` and *type* is not ``GL_FLOAT``, each component is multiplied by the multiplier shown in the following table. If type is ``GL_FLOAT``, then each component is passed as is (or converted to the client's single-precision floating-point format if it is different from the one used by the GL).



Return values are placed in memory as follows. If *format* is ``GL_STENCIL_INDEX``, ``GL_DEPTH_COMPONENT``, ``GL_RED``, ``GL_GREEN``, or ``GL_BLUE``, a single value is returned and the data for the |EQUATION_7_| th pixel in the |EQUATION_8_| th row is placed in location |EQUATION_9_| . ``GL_RGB`` and ``GL_BGR`` return three values, ``GL_RGBA`` and ``GL_BGRA`` return four values for each pixel, with all values corresponding to a single pixel occupying contiguous space in *data* . Storage parameters set by :c:func:`glPixelStore`, such as ``GL_PACK_LSB_FIRST`` and ``GL_PACK_SWAP_BYTES``, affect the way that data is written into memory. See :c:func:`glPixelStore` for a description.


**Associated gets:**


   * :c:func:`glGet` with argument ``GL_INDEX_MODE``
   * :c:func:`glGet` with argument ``GL_PIXEL_PACK_BUFFER_BINDING``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *format* or *type* is not an accepted value.
   * ``GL_INVALID_VALUE`` is generated if either *width* or *height* is negative.
   * ``GL_INVALID_OPERATION`` is generated if *format* is ``GL_STENCIL_INDEX`` and there is no stencil buffer.
   * ``GL_INVALID_OPERATION`` is generated if *format* is ``GL_DEPTH_COMPONENT`` and there is no depth buffer.
   * ``GL_INVALID_OPERATION`` is generated if *format* is ``GL_DEPTH_STENCIL`` and there is no depth buffer or if there is no stencil buffer.
   * ``GL_INVALID_ENUM`` is generated if *format* is ``GL_DEPTH_STENCIL`` and *type* is not ``GL_UNSIGNED_INT_24_8`` or ``GL_FLOAT_32_UNSIGNED_INT_24_8_REV``.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, or ``GL_UNSIGNED_SHORT_5_6_5_REV`` and *format* is not ``GL_RGB``.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, or ``GL_UNSIGNED_INT_2_10_10_10_REV`` and *format* is neither ``GL_RGBA`` nor ``GL_BGRA``.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the data would be packed to the buffer object such that the memory writes required would exceed the data store size.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type* .
   * ``GL_INVALID_OPERATION`` is generated if ``GL_READ_FRAMEBUFFER_BINDING`` is non-zero, the read framebuffer is complete, and the value of ``GL_SAMPLE_BUFFERS`` for the read framebuffer is greater than zero.



.. note::

   * Values for pixels that lie outside the window connected to the current GL context are undefined.
   * If an error is generated, no change is made to the contents of *data* .



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="(" close=")"> <mrow> <mi mathvariant="italic">x</mi> <mo>+</mo> <mi mathvariant="italic">i</mi> </mrow> <mrow> <mi mathvariant="italic">y</mi> <mo>+</mo> <mi mathvariant="italic">j</mi> </mrow> </mfenced> </math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mn>0</mn> <mo>&lt;=</mo> <mi mathvariant="italic">i</mi> <mo>&lt;</mo> <mi mathvariant="italic">width</mi> </mrow> </math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mn>0</mn> <mo>&lt;=</mo> <mi mathvariant="italic">j</mi> <mo>&lt;</mo> <mi mathvariant="italic">height</mi> </mrow> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">i</mi></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">j</mi></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">i</mi></math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">j</mi></math>` 

.. |EQUATION_9_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mfenced open="(" close=")"> <mi mathvariant="italic">j</mi> </mfenced> <mo>&it;</mo> <mi mathvariant="italic">width</mi> <mo>+</mo> <mi mathvariant="italic">i</mi> </mrow> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

