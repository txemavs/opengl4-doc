.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glUniform`
--------------------

.. source file man4/glUniform

.. currentmodule:: OpenGL.GL

Specify the value of a uniform variable for the current program object

.. c:function:: glUniform
.. c:function:: void glUniform1f(GLint  location, GLfloat  v0, GLint  location, GLfloat  v0, GLfloat  v1, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3, GLint  location, GLint  v0, GLint  location, GLint  v0, GLint  v1, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3, GLint  location, GLuint  v0, GLint  location, GLuint  v0, GLuint  v1, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3)


   
   :param location:
      Specifies the location of the uniform variable to be modified.
   
   :param v0:, :param v1:, :param v2:, :param v3:
      Specifies the new values to be used for the specified uniform variable.
   
.. c:function:: void glUniform1fv(GLint  location, GLsizei  count, const GLfloat * value, GLint  location, GLsizei  count, const GLfloat * value, GLint  location, GLsizei  count, const GLfloat * value, GLint  location, GLsizei  count, const GLfloat * value, GLint  location, GLsizei  count, const GLint * value, GLint  location, GLsizei  count, const GLint * value, GLint  location, GLsizei  count, const GLint * value, GLint  location, GLsizei  count, const GLint * value, GLint  location, GLsizei  count, const GLuint * value, GLint  location, GLsizei  count, const GLuint * value, GLint  location, GLsizei  count, const GLuint * value, GLint  location, GLsizei  count, const GLuint * value)


   
   :param location:
      Specifies the location of the uniform value to be modified.
   
   :param count:
      Specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
   
   :param value:
      Specifies a pointer to an array of *count* values that will be used to update the specified uniform variable.
   
.. c:function:: void glUniformMatrix2fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)


   
   :param location:
      Specifies the location of the uniform value to be modified.
   
   :param count:
      Specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
   
   :param transpose:
      Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
   
   :param value:
      Specifies a pointer to an array of *count* values that will be used to update the specified uniform variable.
   

.. seealso::

   
   :c:func:`glLinkProgram`, :c:func:`glUseProgram`
   
.. rubric:: Description


:c:func:`glUniform` modifies the value of a uniform variable or a uniform variable array. The location of the uniform variable to be modified is specified by *location* , which should be a value returned by :c:func:`glGetUniformLocation`. :c:func:`glUniform` operates on the program object that was made part of current state by calling :c:func:`glUseProgram`.

The commands :c:func:`glUniform{1|2|3|4}{f|i|ui}` are used to change the value of the uniform variable specified by *location* using the values passed as arguments. The number specified in the command should match the number of components in the data type of the specified uniform variable (e.g., :c:func:`1` for ``float``, ``int``, ``unsigned int``, ``bool``; :c:func:`2` for ``vec2``, ``ivec2``, ``uvec2``, ``bvec2``, etc.). The suffix :c:func:`f` indicates that floating-point values are being passed; the suffix :c:func:`i` indicates that integer values are being passed; the suffix :c:func:`ui` indicates that unsigned integer values are being passed, and this type should also match the data type of the specified uniform variable. The :c:func:`i` variants of this function should be used to provide values for uniform variables defined as ``int``, ``ivec2``, ``ivec3``, ``ivec4``, or arrays of these. The :c:func:`ui` variants of this function should be used to provide values for uniform variables defined as ``unsigned int``, ``uvec2``, ``uvec3``, ``uvec4``, or arrays of these. The :c:func:`f` variants should be used to provide values for uniform variables of type ``float``, ``vec2``, ``vec3``, ``vec4``, or arrays of these. Either the :c:func:`i`, :c:func:`ui` or :c:func:`f` variants may be used to provide values for uniform variables of type ``bool``, ``bvec2``, ``bvec3``, ``bvec4``, or arrays of these. The uniform variable will be set to ``false`` if the input value is 0 or 0.0f, and it will be set to ``true`` otherwise.

All active uniform variables defined in a program object are initialized to 0 when the program object is linked successfully. They retain the values assigned to them by a call to :c:func:`glUniform ` until the next successful link operation occurs on the program object, when they are once again initialized to 0.

The commands :c:func:`glUniform{1|2|3|4}{f|i|ui}v` can be used to modify a single uniform variable or a uniform variable array. These commands pass a count and a pointer to the values to be loaded into a uniform variable or a uniform variable array. A count of 1 should be used if modifying the value of a single uniform variable, and a count of 1 or greater can be used to modify an entire array or part of an array. When loading *`n`* elements starting at an arbitrary position *`m`* in a uniform variable array, elements *`m`* + *`n`* - 1 in the array will be replaced with the new values. If *m* + *n* - 1 is larger than the size of the uniform variable array, values for all array elements beyond the end of the array will be ignored. The number specified in the name of the command indicates the number of components for each element in *value* , and it should match the number of components in the data type of the specified uniform variable (e.g., :c:func:`1` for float, int, bool; :c:func:`2` for vec2, ivec2, bvec2, etc.). The data type specified in the name of the command must match the data type for the specified uniform variable as described previously for :c:func:`glUniform{1|2|3|4}{f|i|ui}`.

For uniform variable arrays, each element of the array is considered to be of the type indicated in the name of the command (e.g., :c:func:`glUniform3f` or :c:func:`glUniform3fv` can be used to load a uniform variable array of type vec3). The number of elements of the uniform variable array to be modified is specified by *count*

The commands :c:func:`glUniformMatrix{2|3|4|2x3|3x2|2x4|4x2|3x4|4x3}fv` are used to modify a matrix or an array of matrices. The numbers in the command name are interpreted as the dimensionality of the matrix. The number :c:func:`2` indicates a 2 &#215; 2 matrix (i.e., 4 values), the number :c:func:`3` indicates a 3 &#215; 3 matrix (i.e., 9 values), and the number :c:func:`4` indicates a 4 &#215; 4 matrix (i.e., 16 values). Non-square matrix dimensionality is explicit, with the first number representing the number of columns and the second number representing the number of rows. For example, :c:func:`2x4` indicates a 2 &#215; 4 matrix with 2 columns and 4 rows (i.e., 8 values). If *transpose* is ``GL_FALSE``, each matrix is assumed to be supplied in column major order. If *transpose* is ``GL_TRUE``, each matrix is assumed to be supplied in row major order. The *count* argument indicates the number of matrices to be passed. A count of 1 should be used if modifying the value of a single matrix, and a count greater than 1 can be used to modify an array of matrices.


**Associated gets:**


   * :c:func:`glGet` with the argument ``GL_CURRENT_PROGRAM``
   * :c:func:`glGetActiveUniform` with the handle of a program object and the index of an active uniform variable
   * :c:func:`glGetUniform` with the handle of a program object and the location of a uniform variable
   * :c:func:`glGetUniformLocation` with the handle of a program object and the name of a uniform variable

**Errors:**

   * ``GL_INVALID_OPERATION`` is generated if there is no current program object.
   * ``GL_INVALID_OPERATION`` is generated if the size of the uniform variable declared in the shader does not match the size indicated by the :c:func:`glUniform` command.
   * ``GL_INVALID_OPERATION`` is generated if one of the signed or unsigned integer variants of this function is used to load a uniform variable of type ``float``, ``vec2``, ``vec3``, ``vec4``, or an array of these, or if one of the floating-point variants of this function is used to load a uniform variable of type ``int``, ``ivec2``, ``ivec3``, ``ivec4``, ``unsigned int``, ``uvec2``, ``uvec3``, ``uvec4``, or an array of these.
   * ``GL_INVALID_OPERATION`` is generated if one of the signed integer variants of this function is used to load a uniform variable of type ``unsigned int``, ``uvec2``, ``uvec3``, ``uvec4``, or an array of these.
   * ``GL_INVALID_OPERATION`` is generated if one of the unsigned integer variants of this function is used to load a uniform variable of type ``int``, ``ivec2``, ``ivec3``, ``ivec4``, or an array of these.
   * ``GL_INVALID_OPERATION`` is generated if *location* is an invalid uniform location for the current program object and *location* is not equal to -1.
   * ``GL_INVALID_VALUE`` is generated if *count* is less than 0.
   * ``GL_INVALID_OPERATION`` is generated if *count* is greater than 1 and the indicated uniform variable is not an array variable.
   * ``GL_INVALID_OPERATION`` is generated if a sampler is loaded using a command other than :c:func:`glUniform1i` and :c:func:`glUniform1iv`.



.. note::

   * :c:func:`glUniform1i` and :c:func:`glUniform1iv` are the only two functions that may be used to load uniform variables defined as sampler types. Loading samplers with any other function will result in a ``GL_INVALID_OPERATION`` error.
   * If *count* is greater than 1 and the indicated uniform variable is not an array, a ``GL_INVALID_OPERATION`` error is generated and the specified uniform variable will remain unchanged.
   * Other than the preceding exceptions, if the type and size of the uniform variable as defined in the shader do not match the type and size specified in the name of the command used to load its value, a ``GL_INVALID_OPERATION`` error will be generated and the specified uniform variable will remain unchanged.
   * If *location* is a value other than -1 and it does not represent a valid uniform variable location in the current program object, an error will be generated, and no changes will be made to the uniform variable storage of the current program object. If *location* is equal to -1, the data passed in will be silently ignored and the specified uniform variable will not be changed.



.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

