.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glSampleCoverage`
---------------------------

.. source file man4/glSampleCoverage

.. currentmodule:: OpenGL.GL

Specify multisample coverage parameters

.. c:function:: glSampleCoverage
.. c:function:: void glSampleCoverage(GLfloat  value, GLboolean  invert)
   :noindex: 


   
   :param value:
      Specify a single floating-point sample coverage value. The value is clamped to the range |EQUATION_1_| . The initial value is 1.0.
   
   :param invert:
      Specify a single boolean value representing if the coverage masks should be inverted. ``GL_TRUE`` and ``GL_FALSE`` are accepted. The initial value is ``GL_FALSE``.
   

.. seealso::

   
   :c:func:`glEnable`, :c:func:`removedTypes`
   
.. rubric:: Description


Multisampling samples a pixel multiple times at various implementation-dependent subpixel locations to generate antialiasing effects. Multisampling transparently antialiases points, lines, polygons, and images if it is enabled.

*value* is used in constructing a temporary mask used in determining which samples will be used in resolving the final fragment color. This mask is bitwise-anded with the coverage mask generated from the multisampling computation. If the *invert* flag is set, the temporary mask is inverted (all bits flipped) and then the bitwise-and is computed.

If an implementation does not have any multisample buffers available, or multisampling is disabled, rasterization occurs with only a single sample computing a pixel's final RGB color.

Provided an implementation supports multisample buffers, and multisampling is enabled, then a pixel's final color is generated by combining several samples per pixel. Each sample contains color, depth, and stencil information, allowing those operations to be performed on each sample.


**Associated gets:**


   * :c:func:`glGet` with argument ``GL_SAMPLE_COVERAGE_VALUE``
   * :c:func:`glGet` with argument ``GL_SAMPLE_COVERAGE_INVERT``
   * :c:func:`glIsEnabled` with argument ``GL_MULTISAMPLE``
   * :c:func:`glIsEnabled` with argument ``GL_SAMPLE_ALPHA_TO_COVERAGE``
   * :c:func:`glIsEnabled` with argument ``GL_SAMPLE_ALPHA_TO_ONE``
   * :c:func:`glIsEnabled` with argument ``GL_SAMPLE_COVERAGE``



.. note::

   * The type of the *value* parameter was changed from GLclampf to GLfloat. This change is transparent to user code and is described in detail on the :c:func:`removedTypes` page.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

