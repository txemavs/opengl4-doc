.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glAccum`
------------------

.. source file man/glAccum

.. currentmodule:: OpenGL.GL

Operate on the accumulation buffer

.. c:function:: glAccum
.. c:function:: void glAccum(GLenum  op, GLfloat  value)
   :noindex: 


   
   :param op:
      Specifies the accumulation buffer operation. Symbolic constants ``GL_ACCUM``, ``GL_LOAD``, ``GL_ADD``, ``GL_MULT``, and ``GL_RETURN`` are accepted.
   
   :param value:
      Specifies a floating-point value used in the accumulation buffer operation. *op* determines how *value* is used.
   

.. seealso::

   
   :c:func:`glClear`, :c:func:`glClearAccum`, :c:func:`glCopyPixels`, :c:func:`glDrawBuffer`, :c:func:`glGet`, :c:func:`glReadBuffer`, :c:func:`glReadPixels`, :c:func:`glScissor`, :c:func:`glStencilOp`
   
.. rubric:: Description


The accumulation buffer is an extended-range color buffer. Images are not rendered into it. Rather, images rendered into one of the color buffers are added to the contents of the accumulation buffer after rendering. Effects such as antialiasing (of points, lines, and polygons), motion blur, and depth of field can be created by accumulating images generated with different transformation matrices.

Each pixel in the accumulation buffer consists of red, green, blue, and alpha values. The number of bits per component in the accumulation buffer depends on the implementation. You can examine this number by calling :c:func:`glGetIntegerv` four times, with arguments ``GL_ACCUM_RED_BITS``, ``GL_ACCUM_GREEN_BITS``, ``GL_ACCUM_BLUE_BITS``, and ``GL_ACCUM_ALPHA_BITS``. Regardless of the number of bits per component, the range of values stored by each component is |EQUATION_1_| . The accumulation buffer pixels are mapped one-to-one with frame buffer pixels.

:c:func:`glAccum` operates on the accumulation buffer. The first argument, *op* , is a symbolic constant that selects an accumulation buffer operation. The second argument, *value* , is a floating-point value to be used in that operation. Five operations are specified: ``GL_ACCUM``, ``GL_LOAD``, ``GL_ADD``, ``GL_MULT``, and ``GL_RETURN``.

All accumulation buffer operations are limited to the area of the current scissor box and applied identically to the red, green, blue, and alpha components of each pixel. If a :c:func:`glAccum` operation results in a value outside the range |EQUATION_2_| , the contents of an accumulation buffer pixel component are undefined.

The operations are as follows:


   
   ``GL_ACCUM``
      Obtains R, G, B, and A values from the buffer currently selected for reading (see :c:func:`glReadBuffer`). Each component value is divided by |EQUATION_3_| , where |EQUATION_4_| is the number of bits allocated to each color component in the currently selected buffer. The result is a floating-point value in the range |EQUATION_5_| , which is multiplied by *value* and added to the corresponding pixel component in the accumulation buffer, thereby updating the accumulation buffer.
   
   ``GL_LOAD``
      Similar to ``GL_ACCUM``, except that the current value in the accumulation buffer is not used in the calculation of the new value. That is, the R, G, B, and A values from the currently selected buffer are divided by |EQUATION_6_| , multiplied by *value* , and then stored in the corresponding accumulation buffer cell, overwriting the current value.
   
   ``GL_ADD``
      Adds *value* to each R, G, B, and A in the accumulation buffer.
   
   ``GL_MULT``
      Multiplies each R, G, B, and A in the accumulation buffer by *value* and returns the scaled component to its corresponding accumulation buffer location.
   
   ``GL_RETURN``
      Transfers accumulation buffer values to the color buffer or buffers currently selected for writing. Each R, G, B, and A component is multiplied by *value* , then multiplied by |EQUATION_7_| , clamped to the range |EQUATION_8_| , and stored in the corresponding display buffer cell. The only fragment operations that are applied to this transfer are pixel ownership, scissor, dithering, and color writemasks.
   
To clear the accumulation buffer, call :c:func:`glClearAccum` with R, G, B, and A values to set it to, then call :c:func:`glClear` with the accumulation buffer enabled.


**Associated gets:**


   * :c:func:`glGet` with argument ``GL_ACCUM_RED_BITS``
   * :c:func:`glGet` with argument ``GL_ACCUM_GREEN_BITS``
   * :c:func:`glGet` with argument ``GL_ACCUM_BLUE_BITS``
   * :c:func:`glGet` with argument ``GL_ACCUM_ALPHA_BITS``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *op* is not an accepted value.
   * ``GL_INVALID_OPERATION`` is generated if there is no accumulation buffer.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glAccum` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.



.. note::

   * Only pixels within the current scissor box are updated by a :c:func:`glAccum` operation.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>-1</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>-1</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </mfenced> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

