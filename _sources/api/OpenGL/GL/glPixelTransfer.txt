.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glPixelTransfer`
--------------------------

.. source file man/glPixelTransfer

.. currentmodule:: OpenGL.GL

Set pixel transfer modes

.. c:function:: glPixelTransfer
.. c:function:: void glPixelTransferf(GLenum  pname, GLfloat  param, GLenum  pname, GLint  param)


   
   :param pname:
      Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: ``GL_MAP_COLOR``, ``GL_MAP_STENCIL``, ``GL_INDEX_SHIFT``, ``GL_INDEX_OFFSET``, ``GL_RED_SCALE``, ``GL_RED_BIAS``, ``GL_GREEN_SCALE``, ``GL_GREEN_BIAS``, ``GL_BLUE_SCALE``, ``GL_BLUE_BIAS``, ``GL_ALPHA_SCALE``, ``GL_ALPHA_BIAS``, ``GL_DEPTH_SCALE``, or ``GL_DEPTH_BIAS``. Additionally, if the ``ARB_imaging`` extension is supported, the following symbolic names are accepted: ``GL_POST_COLOR_MATRIX_RED_SCALE``, ``GL_POST_COLOR_MATRIX_GREEN_SCALE``, ``GL_POST_COLOR_MATRIX_BLUE_SCALE``, ``GL_POST_COLOR_MATRIX_ALPHA_SCALE``, ``GL_POST_COLOR_MATRIX_RED_BIAS``, ``GL_POST_COLOR_MATRIX_GREEN_BIAS``, ``GL_POST_COLOR_MATRIX_BLUE_BIAS``, ``GL_POST_COLOR_MATRIX_ALPHA_BIAS``, ``GL_POST_CONVOLUTION_RED_SCALE``, ``GL_POST_CONVOLUTION_GREEN_SCALE``, ``GL_POST_CONVOLUTION_BLUE_SCALE``, ``GL_POST_CONVOLUTION_ALPHA_SCALE``, ``GL_POST_CONVOLUTION_RED_BIAS``, ``GL_POST_CONVOLUTION_GREEN_BIAS``, ``GL_POST_CONVOLUTION_BLUE_BIAS``, and ``GL_POST_CONVOLUTION_ALPHA_BIAS``.
   
   :param param:
      Specifies the value that *pname* is set to.
   

.. seealso::

   
   :c:func:`glCallList`, :c:func:`glColorTable`, :c:func:`glColorSubTable`, :c:func:`glConvolutionFilter1D`, :c:func:`glConvolutionFilter2D`, :c:func:`glCopyPixels`, :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, :c:func:`glDrawPixels`, :c:func:`glNewList`, :c:func:`glPixelMap`, :c:func:`glPixelStore`, :c:func:`glPixelZoom`, :c:func:`glReadPixels`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, :c:func:`glTexSubImage3D`
   
.. rubric:: Description


:c:func:`glPixelTransfer` sets pixel transfer modes that affect the operation of subsequent :c:func:`glCopyPixels`, :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, :c:func:`glDrawPixels`, :c:func:`glReadPixels`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, and :c:func:`glTexSubImage3D` commands. Additionally, if the ``ARB_imaging`` subset is supported, the routines :c:func:`glColorTable`, :c:func:`glColorSubTable`, :c:func:`glConvolutionFilter1D`, :c:func:`glConvolutionFilter2D`, :c:func:`glHistogram`, :c:func:`glMinmax`, and :c:func:`glSeparableFilter2D` are also affected. The algorithms that are specified by pixel transfer modes operate on pixels after they are read from the frame buffer (:c:func:`glCopyPixels` :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, and :c:func:`glReadPixels`), or unpacked from client memory (:c:func:`glDrawPixels`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, and :c:func:`glTexSubImage3D`). Pixel transfer operations happen in the same order, and in the same manner, regardless of the command that resulted in the pixel operation. Pixel storage modes (see :c:func:`glPixelStore`) control the unpacking of pixels being read from client memory and the packing of pixels being written back into client memory.

Pixel transfer operations handle four fundamental pixel types: *`color`* , *`color index`* , *`depth`* , and *`stencil`* . *`Color`* pixels consist of four floating-point values with unspecified mantissa and exponent sizes, scaled such that 0 represents zero intensity and 1 represents full intensity. *`Color indices`* comprise a single fixed-point value, with unspecified precision to the right of the binary point. *`Depth`* pixels comprise a single floating-point value, with unspecified mantissa and exponent sizes, scaled such that 0.0 represents the minimum depth buffer value, and 1.0 represents the maximum depth buffer value. Finally, *`stencil`* pixels comprise a single fixed-point value, with unspecified precision to the right of the binary point.

The pixel transfer operations performed on the four basic pixel types are as follows:


   
   *`Color`*
      Each of the four color components is multiplied by a scale factor, then added to a bias factor. That is, the red component is multiplied by ``GL_RED_SCALE``, then added to ``GL_RED_BIAS``; the green component is multiplied by ``GL_GREEN_SCALE``, then added to ``GL_GREEN_BIAS``; the blue component is multiplied by ``GL_BLUE_SCALE``, then added to ``GL_BLUE_BIAS``; and the alpha component is multiplied by ``GL_ALPHA_SCALE``, then added to ``GL_ALPHA_BIAS``. After all four color components are scaled and biased, each is clamped to the range |EQUATION_1_| . All color, scale, and bias values are specified with :c:func:`glPixelTransfer`. If ``GL_MAP_COLOR`` is true, each color component is scaled by the size of the corresponding color-to-color map, then replaced by the contents of that map indexed by the scaled component. That is, the red component is scaled by ``GL_PIXEL_MAP_R_TO_R_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_R_TO_R`` indexed by itself. The green component is scaled by ``GL_PIXEL_MAP_G_TO_G_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_G_TO_G`` indexed by itself. The blue component is scaled by ``GL_PIXEL_MAP_B_TO_B_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_B_TO_B`` indexed by itself. And the alpha component is scaled by ``GL_PIXEL_MAP_A_TO_A_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_A_TO_A`` indexed by itself. All components taken from the maps are then clamped to the range |EQUATION_2_| . ``GL_MAP_COLOR`` is specified with :c:func:`glPixelTransfer`. The contents of the various maps are specified with :c:func:`glPixelMap`. If the ``ARB_imaging`` extension is supported, each of the four color components may be scaled and biased after transformation by the color matrix. That is, the red component is multiplied by ``GL_POST_COLOR_MATRIX_RED_SCALE``, then added to ``GL_POST_COLOR_MATRIX_RED_BIAS``; the green component is multiplied by ``GL_POST_COLOR_MATRIX_GREEN_SCALE``, then added to ``GL_POST_COLOR_MATRIX_GREEN_BIAS``; the blue component is multiplied by ``GL_POST_COLOR_MATRIX_BLUE_SCALE``, then added to ``GL_POST_COLOR_MATRIX_BLUE_BIAS``; and the alpha component is multiplied by ``GL_POST_COLOR_MATRIX_ALPHA_SCALE``, then added to ``GL_POST_COLOR_MATRIX_ALPHA_BIAS``. After all four color components are scaled and biased, each is clamped to the range |EQUATION_3_| . Similarly, if the ``ARB_imaging`` extension is supported, each of the four color components may be scaled and biased after processing by the enabled convolution filter. That is, the red component is multiplied by ``GL_POST_CONVOLUTION_RED_SCALE``, then added to ``GL_POST_CONVOLUTION_RED_BIAS``; the green component is multiplied by ``GL_POST_CONVOLUTION_GREEN_SCALE``, then added to ``GL_POST_CONVOLUTION_GREEN_BIAS``; the blue component is multiplied by ``GL_POST_CONVOLUTION_BLUE_SCALE``, then added to ``GL_POST_CONVOLUTION_BLUE_BIAS``; and the alpha component is multiplied by ``GL_POST_CONVOLUTION_ALPHA_SCALE``, then added to ``GL_POST_CONVOLUTION_ALPHA_BIAS``. After all four color components are scaled and biased, each is clamped to the range |EQUATION_4_| .
   
   *`Color index`*
      Each color index is shifted left by ``GL_INDEX_SHIFT`` bits; any bits beyond the number of fraction bits carried by the fixed-point index are filled with zeros. If ``GL_INDEX_SHIFT`` is negative, the shift is to the right, again zero filled. Then ``GL_INDEX_OFFSET`` is added to the index. ``GL_INDEX_SHIFT`` and ``GL_INDEX_OFFSET`` are specified with :c:func:`glPixelTransfer`. From this point, operation diverges depending on the required format of the resulting pixels. If the resulting pixels are to be written to a color index buffer, or if they are being read back to client memory in ``GL_COLOR_INDEX`` format, the pixels continue to be treated as indices. If ``GL_MAP_COLOR`` is true, each index is masked by |EQUATION_5_| , where |EQUATION_6_| is ``GL_PIXEL_MAP_I_TO_I_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_I_TO_I`` indexed by the masked value. ``GL_MAP_COLOR`` is specified with :c:func:`glPixelTransfer`. The contents of the index map is specified with :c:func:`glPixelMap`. If the resulting pixels are to be written to an RGBA color buffer, or if they are read back to client memory in a format other than ``GL_COLOR_INDEX``, the pixels are converted from indices to colors by referencing the four maps ``GL_PIXEL_MAP_I_TO_R``, ``GL_PIXEL_MAP_I_TO_G``, ``GL_PIXEL_MAP_I_TO_B``, and ``GL_PIXEL_MAP_I_TO_A``. Before being dereferenced, the index is masked by |EQUATION_7_| , where |EQUATION_8_| is ``GL_PIXEL_MAP_I_TO_R_SIZE`` for the red map, ``GL_PIXEL_MAP_I_TO_G_SIZE`` for the green map, ``GL_PIXEL_MAP_I_TO_B_SIZE`` for the blue map, and ``GL_PIXEL_MAP_I_TO_A_SIZE`` for the alpha map. All components taken from the maps are then clamped to the range |EQUATION_9_| . The contents of the four maps is specified with :c:func:`glPixelMap`.
   
   *`Depth`*
      Each depth value is multiplied by ``GL_DEPTH_SCALE``, added to ``GL_DEPTH_BIAS``, then clamped to the range |EQUATION_10_| .
   
   *`Stencil`*
      Each index is shifted ``GL_INDEX_SHIFT`` bits just as a color index is, then added to ``GL_INDEX_OFFSET``. If ``GL_MAP_STENCIL`` is true, each index is masked by |EQUATION_11_| , where |EQUATION_12_| is ``GL_PIXEL_MAP_S_TO_S_SIZE``, then replaced by the contents of ``GL_PIXEL_MAP_S_TO_S`` indexed by the masked value.
   
The following table gives the type, initial value, and range of valid values for each of the pixel transfer parameters that are set with :c:func:`glPixelTransfer`.



:c:func:`glPixelTransferf` can be used to set any pixel transfer parameter. If the parameter type is boolean, 0 implies false and any other value implies true. If *pname* is an integer parameter, *param* is rounded to the nearest integer.

Likewise, :c:func:`glPixelTransferi` can be used to set any of the pixel transfer parameters. Boolean parameters are set to false if *param* is 0 and to true otherwise. *param* is converted to floating point before being assigned to real-valued parameters.


**Associated gets:**


   * :c:func:`glGet` with argument ``GL_MAP_COLOR``
   * :c:func:`glGet` with argument ``GL_MAP_STENCIL``
   * :c:func:`glGet` with argument ``GL_INDEX_SHIFT``
   * :c:func:`glGet` with argument ``GL_INDEX_OFFSET``
   * :c:func:`glGet` with argument ``GL_RED_SCALE``
   * :c:func:`glGet` with argument ``GL_RED_BIAS``
   * :c:func:`glGet` with argument ``GL_GREEN_SCALE``
   * :c:func:`glGet` with argument ``GL_GREEN_BIAS``
   * :c:func:`glGet` with argument ``GL_BLUE_SCALE``
   * :c:func:`glGet` with argument ``GL_BLUE_BIAS``
   * :c:func:`glGet` with argument ``GL_ALPHA_SCALE``
   * :c:func:`glGet` with argument ``GL_ALPHA_BIAS``
   * :c:func:`glGet` with argument ``GL_DEPTH_SCALE``
   * :c:func:`glGet` with argument ``GL_DEPTH_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_RED_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_RED_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_GREEN_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_GREEN_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_BLUE_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_BLUE_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_ALPHA_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_COLOR_MATRIX_ALPHA_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_RED_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_RED_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_GREEN_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_GREEN_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_BLUE_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_BLUE_BIAS``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_ALPHA_SCALE``
   * :c:func:`glGet` with argument ``GL_POST_CONVOLUTION_ALPHA_BIAS``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *pname* is not an accepted value.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glPixelTransfer` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.



.. note::

   * If a :c:func:`glColorTable`, :c:func:`glColorSubTable`, :c:func:`glConvolutionFilter1D`, :c:func:`glConvolutionFilter2D`, :c:func:`glCopyPixels`, :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, :c:func:`glDrawPixels`, :c:func:`glReadPixels`, :c:func:`glSeparableFilter2D`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, or :c:func:`glTexSubImage3D` command is placed in a display list (see :c:func:`glNewList` and :c:func:`glCallList`), the pixel transfer mode settings in effect when the display list is *`executed`* are the ones that are used. They may be different from the settings when the command was compiled into the display list.



.. role:: mml(raw)
   :format: html



.. |EQUATION_10_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_11_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_12_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_9_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

