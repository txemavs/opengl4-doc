.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glHistogram`
----------------------

.. source file man/glHistogram

.. currentmodule:: OpenGL.GL

Define histogram table

.. c:function:: glHistogram
.. c:function:: void glHistogram(GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink)
   :noindex: 


   
   :param target:
      The histogram whose parameters are to be set. Must be one of ``GL_HISTOGRAM`` or ``GL_PROXY_HISTOGRAM``.
   
   :param width:
      The number of entries in the histogram table. Must be a power of 2.
   
   :param internalformat:
      The format of entries in the histogram table. Must be one of ``GL_ALPHA``, ``GL_ALPHA4``, ``GL_ALPHA8``, ``GL_ALPHA12``, ``GL_ALPHA16``, ``GL_LUMINANCE``, ``GL_LUMINANCE4``, ``GL_LUMINANCE8``, ``GL_LUMINANCE12``, ``GL_LUMINANCE16``, ``GL_LUMINANCE_ALPHA``, ``GL_LUMINANCE4_ALPHA4``, ``GL_LUMINANCE6_ALPHA2``, ``GL_LUMINANCE8_ALPHA8``, ``GL_LUMINANCE12_ALPHA4``, ``GL_LUMINANCE12_ALPHA12``, ``GL_LUMINANCE16_ALPHA16``, ``GL_R3_G3_B2``, ``GL_RGB``, ``GL_RGB4``, ``GL_RGB5``, ``GL_RGB8``, ``GL_RGB10``, ``GL_RGB12``, ``GL_RGB16``, ``GL_RGBA``, ``GL_RGBA2``, ``GL_RGBA4``, ``GL_RGB5_A1``, ``GL_RGBA8``, ``GL_RGB10_A2``, ``GL_RGBA12``, or ``GL_RGBA16``.
   
   :param sink:
      If ``GL_TRUE``, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If ``GL_FALSE``, pixels will proceed to the minmax process after histogramming.
   

.. seealso::

   
   :c:func:`glGetHistogram`, :c:func:`glResetHistogram`
   
.. rubric:: Description


When ``GL_HISTOGRAM`` is enabled, RGBA color components are converted to histogram table indices by clamping to the range [0,1], multiplying by the width of the histogram table, and rounding to the nearest integer. The table entries selected by the RGBA indices are then incremented. (If the internal format of the histogram table includes luminance, then the index derived from the R color component determines the luminance table entry to be incremented.) If a histogram table entry is incremented beyond its maximum value, then its value becomes undefined. (This is not an error.)

Histogramming is performed only for RGBA pixels (though these may be specified originally as color indices and converted to RGBA by index table lookup). Histogramming is enabled with :c:func:`glEnable` and disabled with :c:func:`glDisable`.

When *target* is ``GL_HISTOGRAM``, :c:func:`glHistogram` redefines the current histogram table to have *width* entries of the format specified by *internalformat* . The entries are indexed 0 through |EQUATION_1_| , and all entries are initialized to zero. The values in the previous histogram table, if any, are lost. If *sink* is ``GL_TRUE``, then pixels are discarded after histogramming; no further processing of the pixels takes place, and no drawing, texture loading, or pixel readback will result.

When *target* is ``GL_PROXY_HISTOGRAM``, :c:func:`glHistogram` computes all state information as if the histogram table were to be redefined, but does not actually define the new table. If the requested histogram table is too large to be supported, then the state information will be set to zero. This provides a way to determine if a histogram table with the given parameters can be supported.




**Associated gets:**


   * :c:func:`glGetHistogramParameter`

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not one of the allowable values.
   * ``GL_INVALID_VALUE`` is generated if *width* is less than zero or is not a power of 2.
   * ``GL_INVALID_ENUM`` is generated if *internalformat* is not one of the allowable values.
   * ``GL_TABLE_TOO_LARGE`` is generated if *target* is ``GL_HISTOGRAM`` and the histogram table specified is too large for the implementation.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glHistogram` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.



.. note::

   * :c:func:`glHistogram` is present only if ``ARB_imaging`` is returned when :c:func:`glGetString` is called with an argument of ``GL_EXTENSIONS``.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mi mathvariant="italic">width</mi> <mo>-</mo> <mn>1</mn> </mrow> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

