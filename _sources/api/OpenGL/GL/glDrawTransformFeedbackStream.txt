.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glDrawTransformFeedbackStream`
----------------------------------------

.. source file man4/glDrawTransformFeedbackStream

.. currentmodule:: OpenGL.GL

Render primitives using a count derived from a specifed stream of a transform feedback object

.. c:function:: glDrawTransformFeedbackStream
.. c:function:: void glDrawTransformFeedbackStream(GLenum  mode, GLuint  id, GLuint  stream)
   :noindex: 


   
   :param mode:
      Specifies what kind of primitives to render. Symbolic constants ``GL_POINTS``, ``GL_LINE_STRIP``, ``GL_LINE_LOOP``, ``GL_LINES``, ``GL_LINE_STRIP_ADJACENCY``, ``GL_LINES_ADJACENCY``, ``GL_TRIANGLE_STRIP``, ``GL_TRIANGLE_FAN``, ``GL_TRIANGLES``, ``GL_TRIANGLE_STRIP_ADJACENCY``, ``GL_TRIANGLES_ADJACENCY``, and ``GL_PATCHES`` are accepted.
   
   :param id:
      Specifies the name of a transform feedback object from which to retrieve a primitive count.
   
   :param stream:
      Specifies the index of the transform feedback stream from which to retrieve a primitive count.
   

.. seealso::

   
   :c:func:`glDrawArrays`, :c:func:`glDrawArraysInstanced`, :c:func:`glDrawElements`, :c:func:`glDrawRangeElements`, :c:func:`glDrawTransformFeedback`
   
.. rubric:: Description


:c:func:`glDrawTransformFeedbackStream` draws primitives of a type specified by *mode* using a count retrieved from the transform feedback stream specified by *stream* of the transform feedback object specified by *id* . Calling :c:func:`glDrawTransformFeedbackStream` is equivalent to calling :c:func:`glDrawArrays` with *mode* as specified, *first* set to zero, and *count* set to the number of vertices captured on vertex stream *stream* the last time transform feedback was active on the transform feedback object named by *id* .

Calling :c:func:`glDrawTransformFeedback` is equivalent to calling :c:func:`glDrawTransformFeedbackStream` with *stream* set to zero.


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *mode* is not an accepted value.
   * ``GL_INVALID_VALUE`` is generated if *id* is not the name of a transform feedback object.
   * ``GL_INVALID_VALUE`` is generated if *stream* is greater than or equal to the value of ``GL_MAX_VERTEX_STREAMS``.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to an enabled array and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a geometry shader is active and *mode* is incompatible with the input primitive type of the geometry shader in the currently installed program object.
   * ``GL_INVALID_OPERATION`` is generated if *mode* is ``GL_PATCHES`` and no tessellation control shader is active.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glEndTransformFeedback` has never been called while the transform feedback object named by *id* was bound.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

