.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glRenderbufferStorageMultisample`
-------------------------------------------

.. source file man4/glRenderbufferStorageMultisample

.. currentmodule:: OpenGL.GL

Establish data storage, format, dimensions and sample count of a renderbuffer object's image

.. c:function:: glRenderbufferStorageMultisample
.. c:function:: void glRenderbufferStorageMultisample(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height)
   :noindex: 


   
   :param target:
      Specifies a binding to which the target of the allocation and must be ``GL_RENDERBUFFER``.
   
   :param samples:
      Specifies the number of samples to be used for the renderbuffer object's storage.
   
   :param internalformat:
      Specifies the internal format to use for the renderbuffer object's image.
   
   :param width:
      Specifies the width of the renderbuffer, in pixels.
   
   :param height:
      Specifies the height of the renderbuffer, in pixels.
   

.. seealso::

   
   :c:func:`glGenRenderbuffers`, :c:func:`glBindRenderbuffer`, :c:func:`glRenderbufferStorage`, :c:func:`glFramebufferRenderbuffer`, :c:func:`glDeleteRenderbuffers`
   
.. rubric:: Description


:c:func:`glRenderbufferStorageMultisample` establishes the data storage, format, dimensions and number of samples of a renderbuffer object's image.

The target of the operation, specified by *target* must be ``GL_RENDERBUFFER``. *internalformat* specifies the internal format to be used for the renderbuffer object's storage and must be a color-renderable, depth-renderable, or stencil-renderable format. *width* and *height* are the dimensions, in pixels, of the renderbuffer. Both *width* and *height* must be less than or equal to the value of ``GL_MAX_RENDERBUFFER_SIZE``. *samples* specifies the number of samples to be used for the renderbuffer object's image, and must be less than or equal to the value of ``GL_MAX_SAMPLES``. If *internalformat* is a signed or unsigned integer format then *samples* must be less than or equal to the value of ``GL_MAX_INTEGER_SAMPLES``.

Upon success, :c:func:`glRenderbufferStorageMultisample` deletes any existing data store for the renderbuffer image and the contents of the data store after calling :c:func:`glRenderbufferStorageMultisample` are undefined.


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_RENDERBUFFER``.
   * ``GL_INVALID_VALUE`` is generated if *samples* is greater than ``GL_MAX_SAMPLES``.
   * ``GL_INVALID_ENUM`` is generated if *internalformat* is not a color-renderable, depth-renderable, or stencil-renderable format.
   * ``GL_INVALID_OPERATION`` is generated if *internalformat* is a signed or unsigned integer format and *samples* is greater than the value of ``GL_MAX_INTEGER_SAMPLES``
   * ``GL_INVALID_VALUE`` is generated if either of *width* or *height* is negative, or greater than the value of ``GL_MAX_RENDERBUFFER_SIZE``.
   * ``GL_OUT_OF_MEMORY`` is generated if the GL is unable to create a data store of the requested size.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

