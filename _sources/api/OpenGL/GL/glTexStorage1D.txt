.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glTexStorage1D`
-------------------------

.. source file man4/glTexStorage1D

.. currentmodule:: OpenGL.GL

Simultaneously specify storage for all levels of a one-dimensional texture

.. c:function:: glTexStorage1D
.. c:function:: void glTexStorage1D(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width)
   :noindex: 


   
   :param target:
      Specify the target of the operation. *target* must be either ``GL_TEXTURE_1D`` or ``GL_PROXY_TEXTURE_1D``.
   
   :param levels:
      Specify the number of texture levels.
   
   :param internalformat:
      Specifies the sized internal format to be used to store texture image data.
   
   :param width:
      Specifies the width of the texture, in texels.
   

.. seealso::

   
   :c:func:`glTexImage1D`, :c:func:`glTexStorage2D`, :c:func:`glTexStorage3D`.
   
.. rubric:: Description


:c:func:`glTexStorage1D` specifies the storage requirements for all levels of a one-dimensional texture simultaneously. Once a texture is specified with this command, the format and dimensions of all levels become immutable unless it is a proxy texture. The contents of the image may still be modified, however, its storage requirements may not change. Such a texture is referred to as an *`immutable-format`* texture.

Calling :c:func:`glTexStorage1D` is equivalent, assuming no errors are generated, to executing the following pseudo-code:



.. code-block:: c

       for (i = 0; i < levels; i++)
       {
          glTexImage1D(target, i, internalformat, width, 0, format, type, NULL);
          width = max(1, (width / 2));
       }


Since no texture data is actually provided, the values used in the pseudo-code for *format* and *type* are irrelevant and may be considered to be any values that are legal for the chosen *internalformat* enumerant. *internalformat* must be one of the sized internal formats given in Table 1 below, one of the sized depth-component formats ``GL_DEPTH_COMPONENT32F``, ``GL_DEPTH_COMPONENT24``, or ``GL_DEPTH_COMPONENT16``, or one of the combined depth-stencil formats, ``GL_DEPTH32F_STENCIL8``, or ``GL_DEPTH24_STENCIL8``. Upon success, the value of ``GL_TEXTURE_IMMUTABLE_FORMAT`` becomes ``GL_TRUE``. The value of ``GL_TEXTURE_IMMUTABLE_FORMAT`` may be discovered by calling :c:func:`glGetTexParameter` with *pname* set to ``GL_TEXTURE_IMMUTABLE_FORMAT``. No further changes to the dimensions or format of the texture object may be made. Using any command that might alter the dimensions or format of the texture object (such as :c:func:`glTexImage1D` or another call to :c:func:`glTexStorage1D`) will result in the generation of a ``GL_INVALID_OPERATION`` error, even if it would not, in fact, alter the dimensions or format of the object.

<skip xmlns:ns0="http://www.w3.org/2001/XInclude"> <ns0:include href="internalformattable.xml" />


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *internalformat* is not a valid sized internal format.
   * ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_TEXTURE_1D`` or ``GL_TEXTURE_2D``.
   * ``GL_INVALID_VALUE`` is generated if *width* or *levels* are less than 1.
   * ``GL_INVALID_OPERATION`` is generated if *levels* is greater than <mml:math> <mml:mrow> <mml:mfenced open = '&amp;lfloor;' close = '&amp;rfloor;'> <mml:mrow> <mml:msub> <mml:mi>log</mml:mi> <mml:mn>2</mml:mn> </mml:msub> <mml:mfenced open = '(' close = ')'> <mml:mi>width</mml:mi> </mml:mfenced> </mml:mrow> </mml:mfenced> <mml:mo>+</mml:mo> <mml:mn>1</mml:mn> </mml:mrow> </mml:math> .


.. warning::

   Parsing :ref:`man4/glTexStorage1D.xml <xml_man4_glTexStorage1D>`


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

