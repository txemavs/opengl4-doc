.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glBindFragDataLocationIndexed`
----------------------------------------

.. source file man4/glBindFragDataLocationIndexed

.. currentmodule:: OpenGL.GL

Bind a user-defined varying out variable to a fragment shader color number and index

.. c:function:: glBindFragDataLocationIndexed
.. c:function:: void glBindFragDataLocationIndexed(GLuint  program, GLuint  colorNumber, GLuint  index, const char * name)
   :noindex: 


   
   :param program:
      The name of the program containing varying out variable whose binding to modify
   
   :param colorNumber:
      The color number to bind the user-defined varying out variable to
   
   :param index:
      The index of the color input to bind the user-defined varying out variable to
   
   :param name:
      The name of the user-defined varying out variable whose binding to modify
   

.. seealso::

   
   :c:func:`glCreateProgram`, :c:func:`glLinkProgram` :c:func:`glGetFragDataLocation`, :c:func:`glGetFragDataIndex` :c:func:`glBindFragDataLocation`
   
.. rubric:: Description


:c:func:`glBindFragDataLocationIndexed` specifies that the varying out variable *name* in *program* should be bound to fragment color *colorNumber* when the program is next linked. *index* may be zero or one to specify that the color be used as either the first or second color input to the blend equation, respectively.

The bindings specified by :c:func:`glBindFragDataLocationIndexed` have no effect until *program* is next linked. Bindings may be specified at any time after *program* has been created. Specifically, they may be specified before shader objects are attached to the program. Therefore, any name may be specified in *name* , including a name that is never used as a varying out variable in any fragment shader object. Names beginning with ``gl_`` are reserved by the GL.

If *name* was bound previously, its assigned binding is replaced with *colorNumber* and *index* . *name* must be a null-terminated string. *index* must be less than or equal to one, and *colorNumber* must be less than the value of ``GL_MAX_DRAW_BUFFERS`` if *index* is zero, and less than the value of ``GL_MAX_DUAL_SOURCE_DRAW_BUFFERS`` if index is greater than or equal to one.

In addition to the errors generated by :c:func:`glBindFragDataLocationIndexed`, the program *program* will fail to link if: 
 
   - The number of active outputs is greater than the value ``GL_MAX_DRAW_BUFFERS``. 
   - More than one varying out variable is bound to the same color number. 


**Associated gets:**


   * :c:func:`glGetFragDataLocation` with a valid program object and the the name of a user-defined varying out variable
   * :c:func:`glGetFragDataIndex` with a valid program object and the the name of a user-defined varying out variable

**Errors:**

   * ``GL_INVALID_VALUE`` is generated if *colorNumber* is greater than or equal to ``GL_MAX_DRAW_BUFFERS``.
   * ``GL_INVALID_VALUE`` is generated if *colorNumber* is greater than or equal to ``GL_MAX_DUAL_SOURCE_DRAW_BUFERS`` and *index* is greater than or equal to one.
   * ``GL_INVALID_VALUE`` is generated if *index* is greater than one.
   * ``GL_INVALID_OPERATION`` is generated if *name* starts with the reserved ``gl_`` prefix.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`program` is not the name of a program object.



.. note::

   * Varying out varyings may have locations assigned explicitly in the shader text using a ``location`` layout qualifier. If a shader statically assigns a location to a varying out variable in the shader text, that location is used and any location assigned with :c:func:`glBindFragDataLocation` is ignored.



.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

