.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glGetSubroutineUniformLocation`
-----------------------------------------

.. source file man4/glGetSubroutineUniformLocation

.. currentmodule:: OpenGL.GL

Retrieve the location of a subroutine uniform of a given shader stage within a program

.. c:function:: glGetSubroutineUniformLocation
.. c:function:: GLint glGetSubroutineUniformLocation(GLuint  program, GLenum  shadertype, const GLchar * name)
   :noindex: 


   
   :param program:
      Specifies the name of the program containing shader stage.
   
   :param shadertype:
      Specifies the shader stage from which to query for subroutine uniform index. *shadertype* must be one of ``GL_VERTEX_SHADER``, ``GL_TESS_CONTROL_SHADER``, ``GL_TESS_EVALUATION_SHADER``, ``GL_GEOMETRY_SHADER`` or ``GL_FRAGMENT_SHADER``.
   
   :param name:
      Specifies the name of the subroutine uniform whose index to query.
   

.. seealso::

   
   :c:func:`glGetProgram`, :c:func:`glGetActiveSubroutineUniform`, :c:func:`glGetActiveSubroutineUniformName`, :c:func:`glGetUniformLocation`
   
.. rubric:: Description


:c:func:`glGetSubroutineUniformLocation` returns the location of the subroutine uniform variable *name* in the shader stage of type *shadertype* attached to *program* , with behavior otherwise identical to :c:func:`glGetUniformLocation`.

If *name* is not the name of a subroutine uniform in the shader stage, -1 is returned, but no error is generated. If *name* is the name of a subroutine uniform in the shader stage, a value between zero and the value of ``GL_ACTIVE_SUBROUTINE_LOCATIONS`` minus one will be returned. Subroutine locations are assigned using consecutive integers in the range from zero to the value of ``GL_ACTIVE_SUBROUTINE_LOCATIONS`` minus one for the shader stage. For active subroutine uniforms declared as arrays, the declared array elements are assigned consecutive locations.


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *shadertype* or *pname* is not one of the accepted values.
   * ``GL_INVALID_VALUE`` is generated if *program* is not the name of an existing program object.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

