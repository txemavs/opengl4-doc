.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glCompressedTexImage1D`
---------------------------------

.. source file man4/glCompressedTexImage1D

.. currentmodule:: OpenGL.GL

Specify a one-dimensional texture image in a compressed format

.. c:function:: glCompressedTexImage1D
.. c:function:: void glCompressedTexImage1D(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid *  data)
   :noindex: 


   
   :param target:
      Specifies the target texture. Must be ``GL_TEXTURE_1D`` or ``GL_PROXY_TEXTURE_1D``.
   
   :param level:
      Specifies the level-of-detail number. Level 0 is the base image level. Level *`n`* is the *`n`* th mipmap reduction image.
   
   :param internalformat:
      Specifies the format of the compressed image data stored at address *data* .
   
   :param width:
      Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
   
   :param border:
      This value must be 0.
   
   :param imageSize:
      Specifies the number of unsigned bytes of image data starting at the address specified by *data* .
   
   :param data:
      Specifies a pointer to the compressed image data in memory.
   

.. seealso::

   
   :c:func:`glActiveTexture`, :c:func:`glCompressedTexImage2D`, :c:func:`glCompressedTexImage3D`, :c:func:`glCompressedTexSubImage1D`, :c:func:`glCompressedTexSubImage2D`, :c:func:`glCompressedTexSubImage3D`, :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, :c:func:`glPixelStore`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, :c:func:`glTexSubImage3D`, :c:func:`glTexParameter`
   
.. rubric:: Description


Texturing allows elements of an image array to be read by shaders.

:c:func:`glCompressedTexImage1D` loads a previously defined, and retrieved, compressed one-dimensional texture image if *target* is ``GL_TEXTURE_1D`` (see :c:func:`glTexImage1D`).

If *target* is ``GL_PROXY_TEXTURE_1D``, no data is read from *data* , but all of the texture image state is recalculated, checked for consistency, and checked against the implementation's capabilities. If the implementation cannot handle a texture of the requested texture size, it sets all of the image state to 0, but does not generate an error (see :c:func:`glGetError`). To query for an entire mipmap array, use an image array level greater than or equal to 1.

*internalformat* must be an extension-specified compressed-texture format. When a texture is loaded with :c:func:`glTexImage1D` using a generic compressed texture format (e.g., ``GL_COMPRESSED_RGB``) the GL selects from one of its extensions supporting compressed textures. In order to load the compressed texture image using :c:func:`glCompressedTexImage1D`, query the compressed texture image's size and format using :c:func:`glGetTexLevelParameter`.

If a non-zero named buffer object is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target (see :c:func:`glBindBuffer`) while a texture image is specified, *data* is treated as a byte offset into the buffer object's data store.

If the compressed data are arranged into fixed-size blocks of texels, the pixel storage modes can be used to select a sub-rectangle from a larger containing rectangle. These pixel storage modes operate in the same way as they do for :c:func:`glTexImage1D`. In the following description, denote by <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:mrow></mml:math> , <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>w</mml:mi></mml:msub></mml:mrow></mml:math> , <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>h</mml:mi></mml:msub></mml:mrow></mml:math> , and <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>d</mml:mi></mml:msub></mml:mrow></mml:math> , the values of pixel storage modes ``GL_UNPACK_COMPRESSED_BLOCK_SIZE``, ``GL_UNPACK_COMPRESSED_BLOCK_WIDTH``, ``GL_UNPACK_COMPRESSED_BLOCK_HEIGHT``, and ``GL_UNPACK_COMPRESSED_BLOCK_DEPTH``, respectively. <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:mrow></mml:math> is the compressed block size in bytes; <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>w</mml:mi></mml:msub></mml:mrow></mml:math> , <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>h</mml:mi></mml:msub></mml:mrow></mml:math> , and <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>d</mml:mi></mml:msub></mml:mrow></mml:math> are the compressed block width, height, and depth in pixels.

By default the pixel storage modes ``GL_UNPACK_ROW_LENGTH``, ``GL_UNPACK_SKIP_ROWS``, ``GL_UNPACK_SKIP_PIXELS``, ``GL_UNPACK_IMAGE_HEIGHT`` and ``GL_UNPACK_SKIP_IMAGES`` are ignored for compressed images. To enable ``GL_UNPACK_SKIP_PIXELS`` and ``GL_UNPACK_ROW_LENGTH``, <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:mrow></mml:math> and <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>w</mml:mi></mml:msub></mml:mrow></mml:math> must both be non-zero. To also enable ``GL_UNPACK_SKIP_ROWS`` and ``GL_UNPACK_IMAGE_HEIGHT``, <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>h</mml:mi></mml:msub></mml:mrow></mml:math> must be non-zero. To also enable ``GL_UNPACK_SKIP_IMAGES``, <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>d</mml:mi></mml:msub></mml:mrow></mml:math> must be non-zero. All parameters must be consistent with the compressed format to produce the desired results.

When selecting a sub-rectangle from a compressed image: 
 
   - ``GL_UNPACK_SKIP_PIXELS`` must be a multiple of <mml:math><mml:mrow><mml:msub><mml:mi>b</mml:mi><mml:mi>w</mml:mi></mml:msub></mml:mrow></mml:math> ;

*imageSize* must be equal to:

<mml:math display = 'block'> <mml:mrow> <mml:msub> <mml:mi>b</mml:mi> <mml:mi>s</mml:mi> </mml:msub> <mml:mo lspace='2px' rspace='2px'>&times;</mml:mo> <mml:mfenced open = '&lceil;' close = '&rceil;'> <mml:mfrac> <mml:mi>width</mml:mi> <mml:msub> <mml:mi>b</mml:mi> <mml:mi>w</mml:mi> </mml:msub> </mml:mfrac> </mml:mfenced> </mml:mrow> </mml:math>


**Associated gets:**


   * :c:func:`glGetCompressedTexImage`
   * :c:func:`glGet` with argument ``GL_TEXTURE_COMPRESSED``
   * :c:func:`glGet` with argument ``GL_NUM_COMPRESSED_TEXTURE_FORMATS``
   * :c:func:`glGet` with argument ``GL_COMPRESSED_TEXTURE_FORMATS``
   * :c:func:`glGet` with argument ``GL_PIXEL_UNPACK_BUFFER_BINDING``
   * :c:func:`glGetTexLevelParameter` with arguments ``GL_TEXTURE_INTERNAL_FORMAT`` and ``GL_TEXTURE_COMPRESSED_IMAGE_SIZE``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *internalformat* is not a supported specific compressed internal formats, or is one of the generic compressed internal formats: ``GL_COMPRESSED_RED``, ``GL_COMPRESSED_RG``, ``GL_COMPRESSED_RGB``, ``GL_COMPRESSED_RGBA``. ``GL_COMPRESSED_SRGB``, or ``GL_COMPRESSED_SRGB_ALPHA``.
   * ``GL_INVALID_VALUE`` is generated if *imageSize* is not consistent with the format, dimensions, and contents of the specified compressed image data.
   * ``GL_INVALID_VALUE`` is generated if *border* is not 0.
   * ``GL_INVALID_OPERATION`` is generated if parameter combinations are not supported by the specific compressed internal format as specified in the specific texture compression extension.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size.
   * Undefined results, including abnormal program termination, are generated if *data* is not encoded in a manner consistent with the extension specification defining the internal compression format.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

