.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glFeedbackBuffer`
---------------------------

.. source file man/glFeedbackBuffer

.. currentmodule:: OpenGL.GL

Controls feedback mode

.. c:function:: glFeedbackBuffer
.. c:function:: void glFeedbackBuffer(GLsizei  size, GLenum  type, GLfloat *  buffer)
   :noindex: 


   
   :param size:
      Specifies the maximum number of values that can be written into *buffer* .
   
   :param type:
      Specifies a symbolic constant that describes the information that will be returned for each vertex. ``GL_2D``, ``GL_3D``, ``GL_3D_COLOR``, ``GL_3D_COLOR_TEXTURE``, and ``GL_4D_COLOR_TEXTURE`` are accepted.
   
   :param buffer:
      Returns the feedback data.
   

.. seealso::

   
   :c:func:`glBegin`, :c:func:`glLineStipple`, :c:func:`glPassThrough`, :c:func:`glPolygonMode`, :c:func:`glRenderMode`, :c:func:`glSelectBuffer`
   
.. rubric:: Description


The :c:func:`glFeedbackBuffer` function controls feedback. Feedback, like selection, is a GL mode. The mode is selected by calling :c:func:`glRenderMode` with ``GL_FEEDBACK``. When the GL is in feedback mode, no pixels are produced by rasterization. Instead, information about primitives that would have been rasterized is fed back to the application using the GL.

:c:func:`glFeedbackBuffer` has three arguments: *buffer* is a pointer to an array of floating-point values into which feedback information is placed. *size* indicates the size of the array. *type* is a symbolic constant describing the information that is fed back for each vertex. :c:func:`glFeedbackBuffer` must be issued before feedback mode is enabled (by calling :c:func:`glRenderMode` with argument ``GL_FEEDBACK``). Setting ``GL_FEEDBACK`` without establishing the feedback buffer, or calling :c:func:`glFeedbackBuffer` while the GL is in feedback mode, is an error.

When :c:func:`glRenderMode` is called while in feedback mode, it returns the number of entries placed in the feedback array and resets the feedback array pointer to the base of the feedback buffer. The returned value never exceeds *size* . If the feedback data required more room than was available in *buffer* , :c:func:`glRenderMode` returns a negative value. To take the GL out of feedback mode, call :c:func:`glRenderMode` with a parameter value other than ``GL_FEEDBACK``.

While in feedback mode, each primitive, bitmap, or pixel rectangle that would be rasterized generates a block of values that are copied into the feedback array. If doing so would cause the number of entries to exceed the maximum, the block is partially written so as to fill the array (if there is any room left at all), and an overflow flag is set. Each block begins with a code indicating the primitive type, followed by values that describe the primitive's vertices and associated data. Entries are also written for bitmaps and pixel rectangles. Feedback occurs after polygon culling and :c:func:`glPolygonMode` interpretation of polygons has taken place, so polygons that are culled are not returned in the feedback buffer. It can also occur after polygons with more than three edges are broken up into triangles, if the GL implementation renders polygons by performing this decomposition.

The :c:func:`glPassThrough` command can be used to insert a marker into the feedback buffer. See :c:func:`glPassThrough`.

Following is the grammar for the blocks of values written into the feedback buffer. Each primitive is indicated with a unique identifying value followed by some number of vertices. Polygon entries include an integer value indicating how many vertices follow. A vertex is fed back as some number of floating-point values, as determined by *type* . Colors are fed back as four values in RGBA mode and one value in color index mode.

feedbackList |EQUATION_1_| feedbackItem feedbackList | feedbackItem feedbackItem |EQUATION_2_| point | lineSegment | polygon | bitmap | pixelRectangle | passThru point |EQUATION_3_| ``GL_POINT_TOKEN`` vertex lineSegment |EQUATION_4_| ``GL_LINE_TOKEN`` vertex vertex | ``GL_LINE_RESET_TOKEN`` vertex vertex polygon |EQUATION_5_| ``GL_POLYGON_TOKEN`` n polySpec polySpec |EQUATION_6_| polySpec vertex | vertex vertex vertex bitmap |EQUATION_7_| ``GL_BITMAP_TOKEN`` vertex pixelRectangle |EQUATION_8_| ``GL_DRAW_PIXEL_TOKEN`` vertex | ``GL_COPY_PIXEL_TOKEN`` vertex passThru |EQUATION_9_| ``GL_PASS_THROUGH_TOKEN`` value vertex |EQUATION_10_| 2d | 3d | 3dColor | 3dColorTexture | 4dColorTexture 2d |EQUATION_11_| value value 3d |EQUATION_12_| value value value 3dColor |EQUATION_13_| value value value color 3dColorTexture |EQUATION_14_| value value value color tex 4dColorTexture |EQUATION_15_| value value value value color tex color |EQUATION_16_| rgba | index rgba |EQUATION_17_| value value value value index |EQUATION_18_| value tex |EQUATION_19_| value value value value

*`value`* is a floating-point number, and *`n`* is a floating-point integer giving the number of vertices in the polygon. ``GL_POINT_TOKEN``, ``GL_LINE_TOKEN``, ``GL_LINE_RESET_TOKEN``, ``GL_POLYGON_TOKEN``, ``GL_BITMAP_TOKEN``, ``GL_DRAW_PIXEL_TOKEN``, ``GL_COPY_PIXEL_TOKEN`` and ``GL_PASS_THROUGH_TOKEN`` are symbolic floating-point constants. ``GL_LINE_RESET_TOKEN`` is returned whenever the line stipple pattern is reset. The data returned as a vertex depends on the feedback *type* .

The following table gives the correspondence between *type* and the number of values per vertex. *`k`* is 1 in color index mode and 4 in RGBA mode.



Feedback vertex coordinates are in window coordinates, except *`w`* , which is in clip coordinates. Feedback colors are lighted, if lighting is enabled. Feedback texture coordinates are generated, if texture coordinate generation is enabled. They are always transformed by the texture matrix.


**Associated gets:**


   * :c:func:`glGet` with argument ``GL_RENDER_MODE``
   * :c:func:`glGet` with argument ``GL_FEEDBACK_BUFFER_POINTER``
   * :c:func:`glGet` with argument ``GL_FEEDBACK_BUFFER_SIZE``
   * :c:func:`glGet` with argument ``GL_FEEDBACK_BUFFER_TYPE``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *type* is not an accepted value.
   * ``GL_INVALID_VALUE`` is generated if *size* is negative.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glFeedbackBuffer` is called while the render mode is ``GL_FEEDBACK``, or if :c:func:`glRenderMode` is called with argument ``GL_FEEDBACK`` before :c:func:`glFeedbackBuffer` is called at least once.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glFeedbackBuffer` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.



.. note::

   * :c:func:`glFeedbackBuffer`, when used in a display list, is not compiled into the display list but is executed immediately.
   * :c:func:`glFeedbackBuffer` returns only the texture coordinate of texture unit ``GL_TEXTURE0``.



.. role:: mml(raw)
   :format: html



.. |EQUATION_10_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_11_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_12_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_13_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_14_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_15_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_16_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_17_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_18_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_19_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. |EQUATION_9_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>&#x2190;</mn></mrow></math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

