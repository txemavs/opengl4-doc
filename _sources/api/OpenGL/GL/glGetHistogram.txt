.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glGetHistogram`
-------------------------

.. source file man/glGetHistogram

.. currentmodule:: OpenGL.GL

Get histogram table

.. c:function:: glGetHistogram
.. c:function:: void glGetHistogram(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid *  values)
   :noindex: 


   
   :param target:
      Must be ``GL_HISTOGRAM``.
   
   :param reset:
      If ``GL_TRUE``, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If ``GL_FALSE``, none of the counters in the histogram table is modified.
   
   :param format:
      The format of values to be returned in *values* . Must be one of ``GL_RED``, ``GL_GREEN``, ``GL_BLUE``, ``GL_ALPHA``, ``GL_RGB``, ``GL_BGR``, ``GL_RGBA``, ``GL_BGRA``, ``GL_LUMINANCE``, or ``GL_LUMINANCE_ALPHA``.
   
   :param type:
      The type of values to be returned in *values* . Symbolic constants ``GL_UNSIGNED_BYTE``, ``GL_BYTE``, ``GL_BITMAP``, ``GL_UNSIGNED_SHORT``, ``GL_SHORT``, ``GL_UNSIGNED_INT``, ``GL_INT``, ``GL_FLOAT``, ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, and ``GL_UNSIGNED_INT_2_10_10_10_REV`` are accepted.
   
   :param values:
      A pointer to storage for the returned histogram table.
   

.. seealso::

   
   :c:func:`glHistogram`, :c:func:`glResetHistogram`,
   
.. rubric:: Description


:c:func:`glGetHistogram` returns the current histogram table as a one-dimensional image with the same width as the histogram. No pixel transfer operations are performed on this image, but pixel storage modes that are applicable to 1D images are honored.

If a non-zero named buffer object is bound to the ``GL_PIXEL_PACK_BUFFER`` target (see :c:func:`glBindBuffer`) while a histogram table is requested, *values* is treated as a byte offset into the buffer object's data store.

Color components that are requested in the specified *format* , but which are not included in the internal format of the histogram, are returned as zero. The assignments of internal color components to the components requested by *format* are:




**Associated gets:**


   * :c:func:`glGetHistogramParameter`
   * :c:func:`glGet` with argument ``GL_PIXEL_PACK_BUFFER_BINDING``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_HISTOGRAM``.
   * ``GL_INVALID_ENUM`` is generated if *format* is not one of the allowable values.
   * ``GL_INVALID_ENUM`` is generated if *type* is not one of the allowable values.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, or ``GL_UNSIGNED_SHORT_5_6_5_REV`` and *format* is not ``GL_RGB``.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, or ``GL_UNSIGNED_INT_2_10_10_10_REV`` and *format* is neither ``GL_RGBA`` nor ``GL_BGRA``.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the data would be packed to the buffer object such that the memory writes required would exceed the data store size.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *values* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type* .
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glGetHistogram` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.



.. note::

   * :c:func:`glGetHistogram` is present only if ``ARB_imaging`` is returned when :c:func:`glGetString` is called with an argument of ``GL_EXTENSIONS``.



.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

