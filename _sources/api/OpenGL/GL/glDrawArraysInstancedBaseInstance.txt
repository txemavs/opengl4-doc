.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glDrawArraysInstancedBaseInstance`
--------------------------------------------

.. source file man4/glDrawArraysInstancedBaseInstance

.. currentmodule:: OpenGL.GL

Draw multiple instances of a range of elements with offset applied to instanced attributes

.. c:function:: glDrawArraysInstancedBaseInstance
.. c:function:: void glDrawArraysInstancedBaseInstance(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount, GLuint  baseinstance)
   :noindex: 


   
   :param mode:
      Specifies what kind of primitives to render. Symbolic constants ``GL_POINTS``, ``GL_LINE_STRIP``, ``GL_LINE_LOOP``, ``GL_LINES``, ``GL_TRIANGLE_STRIP``, ``GL_TRIANGLE_FAN``, ``GL_TRIANGLES`` ``GL_LINES_ADJACENCY``, ``GL_LINE_STRIP_ADJACENCY``, ``GL_TRIANGLES_ADJACENCY``, ``GL_TRIANGLE_STRIP_ADJACENCY`` and ``GL_PATCHES`` are accepted.
   
   :param first:
      Specifies the starting index in the enabled arrays.
   
   :param count:
      Specifies the number of indices to be rendered.
   
   :param primcount:
      Specifies the number of instances of the specified range of indices to be rendered.
   
   :param baseinstance:
      Specifies the base instance for use in fetching instanced vertex attributes.
   

.. seealso::

   
   :c:func:`glDrawArrays`, :c:func:`glDrawElementsInstanced`
   
.. rubric:: Description


:c:func:`glDrawArraysInstancedBaseInstance` behaves identically to :c:func:`glDrawArrays` except that *primcount* instances of the range of elements are executed and the value of the internal counter *instanceID* advances for each iteration. *instanceID* is an internal 32-bit integer counter that may be read by a vertex shader as ``gl_InstanceID``.

:c:func:`glDrawArraysInstancedBaseInstance` has the same effect as: 

.. code-block:: c

       if ( mode or count is invalid )
          generate appropriate error
       else {
          for (int i = 0; i < primcount ; i++) {
               instanceID = i;
               glDrawArrays(mode, first, count);
          }
          instanceID = 0;
       }


Specific vertex attributes may be classified as *`instanced`* through the use of :c:func:`glVertexAttribDivisor`. Instanced vertex attributes supply per-instance vertex data to the vertex shader. The index of the vertex fetched from the enabled instanced vertex attribute arrays is calculated as: <mml:math> <mml:mrow> <mml:mfenced open = '&lfloor;' close = '&rfloor;'> <mml:mfrac> <mml:mrow> <mml:mi>gl</mml:mi> <mml:mo>_</mml:mo> <mml:mi>InstanceID</mml:mi> </mml:mrow> <mml:mi>divisor</mml:mi> </mml:mfrac> </mml:mfenced> <mml:mo lspace='2px' rspace='2px'>&plus;</mml:mo> <mml:mi>baseInstance</mml:mi> </mml:mrow> </mml:math> . Note that *baseinstance* does not affect the shader-visible value of ``gl_InstanceID``.


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *mode* is not one of the accepted values.
   * ``GL_INVALID_OPERATION`` is generated if a geometry shader is active and *mode* is incompatible with the input primitive type of the geometry shader in the currently installed program object.
   * ``GL_INVALID_VALUE`` is generated if *count* or *primcount* are negative.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to an enabled array and the buffer object's data store is currently mapped.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

