.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glBufferSubData`
--------------------------

.. source file man4/glBufferSubData

.. currentmodule:: OpenGL.GL

Updates a subset of a buffer object's data store

.. c:function:: glBufferSubData
.. c:function:: void glBufferSubData(GLenum  target, GLintptr  offset, GLsizeiptr  size, const GLvoid *  data)
   :noindex: 


   
   :param target:
      Specifies the target buffer object. The symbolic constant must be ``GL_ARRAY_BUFFER``, ``GL_COPY_READ_BUFFER``, ``GL_COPY_WRITE_BUFFER``, ``GL_ELEMENT_ARRAY_BUFFER``, ``GL_PIXEL_PACK_BUFFER``, ``GL_PIXEL_UNPACK_BUFFER``, ``GL_TEXTURE_BUFFER``, ``GL_TRANSFORM_FEEDBACK_BUFFER``, or ``GL_UNIFORM_BUFFER``.
   
   :param offset:
      Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
   
   :param size:
      Specifies the size in bytes of the data store region being replaced.
   
   :param data:
      Specifies a pointer to the new data that will be copied into the data store.
   

.. seealso::

   
   :c:func:`glBindBuffer`, :c:func:`glBufferData`, :c:func:`glMapBuffer`, :c:func:`glUnmapBuffer`
   
.. rubric:: Description


:c:func:`glBufferSubData` redefines some or all of the data store for the buffer object currently bound to *target* . Data starting at byte offset *offset* and extending for *size* bytes is copied to the data store from the memory pointed to by *data* . An error is thrown if *offset* and *size* together define a range beyond the bounds of the buffer object's data store.


**Associated gets:**


   * :c:func:`glGetBufferSubData`

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not one of the accepted buffer targets.
   * ``GL_INVALID_VALUE`` is generated if *offset* or *size* is negative, or if together they define a region of memory that extends beyond the buffer object's allocated data store.
   * ``GL_INVALID_OPERATION`` is generated if the reserved buffer object name 0 is bound to *target* .
   * ``GL_INVALID_OPERATION`` is generated if the buffer object being updated is mapped.



.. note::

   * When replacing the entire data store, consider using :c:func:`glBufferSubData` rather than completely recreating the data store with :c:func:`glBufferData`. This avoids the cost of reallocating the data store.
   * Consider using multiple buffer objects to avoid stalling the rendering pipeline during data store updates. If any rendering in the pipeline makes reference to data in the buffer object being updated by :c:func:`glBufferSubData`, especially from the specific region being updated, that rendering must drain from the pipeline before the data store can be updated.
   * Clients must align data elements consistent with the requirements of the client platform, with an additional base-level requirement that an offset within a buffer to a datum comprising |EQUATION_1_| .



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">N</mi> bytes be a multiple of <mi mathvariant="italic">N</mi></math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

