.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glGetTexImage`
------------------------

.. source file man4/glGetTexImage

.. currentmodule:: OpenGL.GL

Return a texture image

.. c:function:: glGetTexImage
.. c:function:: void glGetTexImage(GLenum  target, GLint  level, GLenum  format, GLenum  type, GLvoid *  img)
   :noindex: 


   
   :param target:
      Specifies which texture is to be obtained. ``GL_TEXTURE_1D``, ``GL_TEXTURE_2D``, ``GL_TEXTURE_3D``, ``GL_TEXTURE_1D_ARRAY``, ``GL_TEXTURE_2D_ARRAY``, ``GL_TEXTURE_RECTANGLE``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_X``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_X``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Y``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Y``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Z``, and ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`` are accepted.
   
   :param level:
      Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level |EQUATION_1_| is the |EQUATION_2_| th mipmap reduction image.
   
   :param format:
      Specifies a pixel format for the returned data. The supported formats are ``GL_STENCIL_INDEX``, ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_STENCIL``, ``GL_RED``, ``GL_GREEN``, ``GL_BLUE``, ``GL_RG``, ``GL_RGB``, ``GL_RGBA``, ``GL_BGR``, ``GL_BGRA``, ``GL_RED_INTEGER``, ``GL_GREEN_INTEGER``, ``GL_BLUE_INTEGER``, ``GL_RG_INTEGER``, ``GL_RGB_INTEGER``, ``GL_RGBA_INTEGER``, ``GL_BGR_INTEGER``, ``GL_BGRA_INTEGER``.
   
   :param type:
      Specifies a pixel type for the returned data. The supported types are ``GL_UNSIGNED_BYTE``, ``GL_BYTE``, ``GL_UNSIGNED_SHORT``, ``GL_SHORT``, ``GL_UNSIGNED_INT``, ``GL_INT``, ``GL_HALF_FLOAT``, ``GL_FLOAT``, ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, ``GL_UNSIGNED_INT_2_10_10_10_REV``, ``GL_UNSIGNED_INT_24_8``, ``GL_UNSIGNED_INT_10F_11F_11F_REV``, ``GL_UNSIGNED_INT_5_9_9_9_REV``, and ``GL_FLOAT_32_UNSIGNED_INT_24_8_REV``.
   
   :param img:
      Returns the texture image. Should be a pointer to an array of the type specified by *type* .
   

.. seealso::

   
   :c:func:`glActiveTexture`, :c:func:`glReadPixels`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, :c:func:`glTexSubImage3D`, :c:func:`glTexParameter`
   
.. rubric:: Description


:c:func:`glGetTexImage` returns a texture image into *img* . *target* specifies whether the desired texture image is one specified by :c:func:`glTexImage1D` (``GL_TEXTURE_1D``), :c:func:`glTexImage2D` (``GL_TEXTURE_1D_ARRAY``, ``GL_TEXTURE_RECTANGLE``, ``GL_TEXTURE_2D`` or any of ``GL_TEXTURE_CUBE_MAP_*``), or :c:func:`glTexImage3D` (``GL_TEXTURE_2D_ARRAY``, ``GL_TEXTURE_3D``). *level* specifies the level-of-detail number of the desired image. *format* and *type* specify the format and type of the desired image array. See the reference page for :c:func:`glTexImage1D` for a description of the acceptable values for the *format* and *type* parameters, respectively.

If a non-zero named buffer object is bound to the ``GL_PIXEL_PACK_BUFFER`` target (see :c:func:`glBindBuffer`) while a texture image is requested, *img* is treated as a byte offset into the buffer object's data store.

To understand the operation of :c:func:`glGetTexImage`, consider the selected internal four-component texture image to be an RGBA color buffer the size of the image. The semantics of :c:func:`glGetTexImage` are then identical to those of :c:func:`glReadPixels`, with the exception that no pixel transfer operations are performed, when called with the same *format* and *type* , with *`x`* and *`y`* set to 0, *`width`* set to the width of the texture image and *`height`* set to 1 for 1D images, or to the height of the texture image for 2D images.

If the selected texture image does not contain four components, the following mappings are applied. Single-component textures are treated as RGBA buffers with red set to the single-component value, green set to 0, blue set to 0, and alpha set to 1. Two-component textures are treated as RGBA buffers with red set to the value of component zero, alpha set to the value of component one, and green and blue set to 0. Finally, three-component textures are treated as RGBA buffers with red set to component zero, green set to component one, blue set to component two, and alpha set to 1.

To determine the required size of *img* , use :c:func:`glGetTexLevelParameter` to determine the dimensions of the internal texture image, then scale the required number of pixels by the storage required for each pixel, based on *format* and *type* . Be sure to take the pixel storage parameters into account, especially ``GL_PACK_ALIGNMENT``.


**Associated gets:**


   * :c:func:`glGetTexLevelParameter` with argument ``GL_TEXTURE_WIDTH``
   * :c:func:`glGetTexLevelParameter` with argument ``GL_TEXTURE_HEIGHT``
   * :c:func:`glGetTexLevelParameter` with argument ``GL_TEXTURE_INTERNAL_FORMAT``
   * :c:func:`glGet` with arguments ``GL_PACK_ALIGNMENT`` and others
   * :c:func:`glGet` with argument ``GL_PIXEL_PACK_BUFFER_BINDING``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* , *format* , or *type* is not an accepted value.
   * ``GL_INVALID_VALUE`` is generated if *level* is less than 0.
   * ``GL_INVALID_VALUE`` may be generated if *level* is greater than |EQUATION_3_| , where |EQUATION_4_| is the returned value of ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_OPERATION`` is returned if *type* is one of ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, or ``GL_UNSIGNED_INT_10F_11F_11F_REV`` and *format* is not ``GL_RGB``.
   * ``GL_INVALID_OPERATION`` is returned if *type* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, ``GL_UNSIGNED_INT_2_10_10_10_REV``, or ``GL_UNSIGNED_INT_5_9_9_9_REV`` and *format* is neither ``GL_RGBA`` or ``GL_BGRA``.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the data would be packed to the buffer object such that the memory writes required would exceed the data store size.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *img* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type* .



.. note::

   * If an error is generated, no change is made to the contents of *img* .
   * :c:func:`glGetTexImage` returns the texture image for the active texture unit.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msub><mi mathvariant="italic">log</mi> <mn>2</mn> </msub> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">max</mi> </mfenced> </mrow> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">max</mi></math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

