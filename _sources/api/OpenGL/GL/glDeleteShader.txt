.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glDeleteShader`
-------------------------

.. source file man4/glDeleteShader

.. currentmodule:: OpenGL.GL

Deletes a shader object

.. c:function:: glDeleteShader
.. c:function:: void glDeleteShader(GLuint  shader)
   :noindex: 


   
   :param shader:
      Specifies the shader object to be deleted.
   

.. seealso::

   
   :c:func:`glCreateProgram`, :c:func:`glCreateShader`, :c:func:`glDetachShader`, :c:func:`glUseProgram`
   
.. rubric:: Description


:c:func:`glDeleteShader` frees the memory and invalidates the name associated with the shader object specified by *shader* . This command effectively undoes the effects of a call to :c:func:`glCreateShader`.

If a shader object to be deleted is attached to a program object, it will be flagged for deletion, but it will not be deleted until it is no longer attached to any program object, for any rendering context (i.e., it must be detached from wherever it was attached before it will be deleted). A value of 0 for *shader* will be silently ignored.

To determine whether an object has been flagged for deletion, call :c:func:`glGetShader` with arguments *shader* and ``GL_DELETE_STATUS``.


**Associated gets:**


   * :c:func:`glGetAttachedShaders` with the program object to be queried
   * :c:func:`glGetShader` with arguments *shader* and ``GL_DELETE_STATUS``
   * :c:func:`glIsShader`

**Errors:**

   * ``GL_INVALID_VALUE`` is generated if *shader* is not a value generated by OpenGL.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

