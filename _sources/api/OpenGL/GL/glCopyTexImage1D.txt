.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glCopyTexImage1D`
---------------------------

.. source file man4/glCopyTexImage1D

.. currentmodule:: OpenGL.GL

Copy pixels into a 1D texture image

.. c:function:: glCopyTexImage1D
.. c:function:: void glCopyTexImage1D(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border)
   :noindex: 


   
   :param target:
      Specifies the target texture. Must be ``GL_TEXTURE_1D``.
   
   :param level:
      Specifies the level-of-detail number. Level 0 is the base image level. Level *`n`* is the *`n`* th mipmap reduction image.
   
   :param internalformat:
      Specifies the internal format of the texture. Must be one of the following symbolic constants: ``GL_COMPRESSED_RED``, ``GL_COMPRESSED_RG``, ``GL_COMPRESSED_RGB``, ``GL_COMPRESSED_RGBA``. ``GL_COMPRESSED_SRGB``, ``GL_COMPRESSED_SRGB_ALPHA``. ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_COMPONENT16``, ``GL_DEPTH_COMPONENT24``, ``GL_DEPTH_COMPONENT32``, ``GL_RED``, ``GL_RG``, ``GL_RGB``, ``GL_R3_G3_B2``, ``GL_RGB4``, ``GL_RGB5``, ``GL_RGB8``, ``GL_RGB10``, ``GL_RGB12``, ``GL_RGB16``, ``GL_RGBA``, ``GL_RGBA2``, ``GL_RGBA4``, ``GL_RGB5_A1``, ``GL_RGBA8``, ``GL_RGB10_A2``, ``GL_RGBA12``, ``GL_RGBA16``, ``GL_SRGB``, ``GL_SRGB8``, ``GL_SRGB_ALPHA``, or ``GL_SRGB8_ALPHA8``.
   
   :param x:
      Specify the window coordinates of the left corner of the row of pixels to be copied.
   
   :param width:
      Specifies the width of the texture image. Must be 0 or |EQUATION_1_| for some integer |EQUATION_2_| . The height of the texture image is 1.
   
   :param border:
      Specifies the width of the border. Must be either 0 or 1.
   

.. seealso::

   
   :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glPixelStore`, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, :c:func:`glTexParameter`
   
.. rubric:: Description


:c:func:`glCopyTexImage1D` defines a one-dimensional texture image with pixels from the current ``GL_READ_BUFFER``.

The screen-aligned pixel row with left corner at |EQUATION_3_| and with a length of |EQUATION_4_| defines the texture array at the mipmap level specified by *level* . *internalformat* specifies the internal format of the texture array.

The pixels in the row are processed exactly as if :c:func:`glReadPixels` had been called, but the process stops just before final conversion. At this point all pixel component values are clamped to the range |EQUATION_5_| and then converted to the texture's internal format for storage in the texel array.

Pixel ordering is such that lower |EQUATION_6_| screen coordinates correspond to lower texture coordinates.

If any of the pixels within the specified row of the current ``GL_READ_BUFFER`` are outside the window associated with the current rendering context, then the values obtained for those pixels are undefined.

:c:func:`glCopyTexImage1D` defines a one-dimensional texture image with pixels from the current ``GL_READ_BUFFER``.

When *internalformat* is one of the sRGB types, the GL does not automatically convert the source pixels to the sRGB color space. In this case, the :c:func:`glPixelMap` function can be used to accomplish the conversion.


**Associated gets:**


   * :c:func:`glGetTexImage`

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not one of the allowable values.
   * ``GL_INVALID_VALUE`` is generated if *level* is less than 0.
   * ``GL_INVALID_VALUE`` may be generated if *level* is greater than |EQUATION_7_| , where |EQUATION_8_| is the returned value of ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if *internalformat* is not an allowable value.
   * ``GL_INVALID_VALUE`` is generated if *width* is less than 0 or greater than ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if non-power-of-two textures are not supported and the *width* cannot be represented as |EQUATION_9_| for some integer value of *`n`* .
   * ``GL_INVALID_VALUE`` is generated if *border* is not 0 or 1.
   * ``GL_INVALID_OPERATION`` is generated if *internalformat* is ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_COMPONENT16``, ``GL_DEPTH_COMPONENT24``, or ``GL_DEPTH_COMPONENT32`` and there is no depth buffer.



.. note::

   * 1, 2, 3, and 4 are not accepted values for *internalformat* .
   * An image with 0 width indicates a NULL texture.



.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">border</mi> </mfenced> </mrow> </mrow> </math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="(" close=")"> <mi mathvariant="italic">x</mi> <mi mathvariant="italic">y</mi> </mfenced> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mi mathvariant="italic">width</mi> <mo>+</mo> <mrow> <mn>2</mn> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">border</mi> </mfenced> </mrow> </mrow> </math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"> <mn>0</mn> <mn>1</mn> </mfenced> </math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">x</mi></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msub><mi mathvariant="italic">log</mi> <mn>2</mn> </msub> <mo>&it;</mo> <mi mathvariant="italic">max</mi> </mrow> </math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">max</mi></math>` 

.. |EQUATION_9_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">border</mi> </mfenced> </mrow> </mrow> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

