.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glPatchParameter`
---------------------------

.. source file man4/glPatchParameter

.. currentmodule:: OpenGL.GL

Specifies the parameters for patch primitives

.. c:function:: glPatchParameter
.. c:function:: void glPatchParameteri(GLenum  pname, GLint  value, GLenum  pname, const GLfloat * values)


   
   :param pname:
      Specifies the name of the parameter to set. The symbolc constants ``GL_PATCH_VERTICES``, ``GL_PATCH_DEFAULT_OUTER_LEVEL``, and ``GL_PATCH_DEFAULT_INNER_LEVEL`` are accepted.
   
   :param value:
      Specifies the new value for the parameter given by *pname* .
   
   :param values:
      Specifies the address of an array containing the new values for the parameter given by *pname* .
   

.. seealso::

   
   :c:func:`glDrawArrays`, :c:func:`glDrawArraysInstanced`, :c:func:`glDrawElements`, :c:func:`glDrawRangeElements`,
   
.. rubric:: Description


:c:func:`glPatchParameter` specifies the parameters that will be used for patch primitives. *pname* specifies the parameter to modify and must be either ``GL_PATCH_VERTICES``, ``GL_PATCH_DEFAULT_OUTER_LEVEL`` or ``GL_PATCH_DEFAULT_INNER_LEVEL``. For :c:func:`glPatchParameteri`, *value* specifies the new value for the parameter specified by *pname* . For :c:func:`glPatchParameterfv`, *values* specifies the address of an array containing the new values for the parameter specified by *pname* .

When *pname* is ``GL_PATCH_VERTICES``, *value* specifies the number of vertices that will be used to make up a single patch primitive. Patch primitives are consumed by the tessellation control shader (if present) and subsequently used for tessellation. When primitives are specified using :c:func:`glDrawArrays` or a similar function, each patch will be made from *parameter* control points, each represented by a vertex taken from the enabeld vertex arrays. *parameter* must be greater than zero, and less than or equal to the value of ``GL_MAX_PATCH_VERTICES``.

When *pname* is ``GL_PATCH_DEFAULT_OUTER_LEVEL`` or ``GL_PATCH_DEFAULT_INNER_LEVEL``, *values* contains the address of an array contiaining the default outer or inner tessellation levels, respectively, to be used when no tessellation control shader is present.


**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *pname* is not an accepted value.
   * ``GL_INVALID_VALUE`` is generated if *pname* is ``GL_PATCH_VERTICES`` and *value* is less than or equal to zero, or greater than the value of ``GL_MAX_PATCH_VERTICES``.


.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

