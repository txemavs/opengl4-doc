.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glTexImage2D`
-----------------------

.. source file man4/glTexImage2D

.. currentmodule:: OpenGL.GL

Specify a two-dimensional texture image

.. c:function:: glTexImage2D
.. c:function:: void glTexImage2D(GLenum  target, GLint  level, GLint  internalFormat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const GLvoid *  data)
   :noindex: 


   
   :param target:
      Specifies the target texture. Must be ``GL_TEXTURE_2D``, ``GL_PROXY_TEXTURE_2D``, ``GL_TEXTURE_1D_ARRAY``, ``GL_PROXY_TEXTURE_1D_ARRAY``, ``GL_TEXTURE_RECTANGLE``, ``GL_PROXY_TEXTURE_RECTANGLE``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_X``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_X``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Y``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Y``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Z``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Z``, or ``GL_PROXY_TEXTURE_CUBE_MAP``.
   
   :param level:
      Specifies the level-of-detail number. Level 0 is the base image level. Level *`n`* is the *`n`* th mipmap reduction image. If *target* is ``GL_TEXTURE_RECTANGLE`` or ``GL_PROXY_TEXTURE_RECTANGLE``, *level* must be 0.
   
   :param internalFormat:
      Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
   
   :param width:
      Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
   
   :param height:
      Specifies the height of the texture image, or the number of layers in a texture array, in the case of the ``GL_TEXTURE_1D_ARRAY`` and ``GL_PROXY_TEXTURE_1D_ARRAY`` targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
   
   :param border:
      This value must be 0.
   
   :param format:
      Specifies the format of the pixel data. The following symbolic values are accepted: ``GL_RED``, ``GL_RG``, ``GL_RGB``, ``GL_BGR``, ``GL_RGBA``, and ``GL_BGRA``.
   
   :param type:
      Specifies the data type of the pixel data. The following symbolic values are accepted: ``GL_UNSIGNED_BYTE``, ``GL_BYTE``, ``GL_UNSIGNED_SHORT``, ``GL_SHORT``, ``GL_UNSIGNED_INT``, ``GL_INT``, ``GL_FLOAT``, ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, and ``GL_UNSIGNED_INT_2_10_10_10_REV``.
   
   :param data:
      Specifies a pointer to the image data in memory.
   

.. seealso::

   
   :c:func:`glActiveTexture`, :c:func:`glCopyTexImage1D`, :c:func:`glCopyTexImage2D`, :c:func:`glCopyTexSubImage1D`, :c:func:`glCopyTexSubImage2D`, :c:func:`glCopyTexSubImage3D`, :c:func:`glPixelStore`, :c:func:`glTexImage1D`, :c:func:`glTexImage3D`, :c:func:`glTexSubImage1D`, :c:func:`glTexSubImage2D`, :c:func:`glTexSubImage3D`, :c:func:`glTexParameter`
   
.. rubric:: Description


Texturing allows elements of an image array to be read by shaders.

To define texture images, call :c:func:`glTexImage2D`. The arguments describe the parameters of the texture image, such as height, width, width of the border, level-of-detail number (see :c:func:`glTexParameter`), and number of color components provided. The last three arguments describe how the image is represented in memory.

If *target* is ``GL_PROXY_TEXTURE_2D``, ``GL_PROXY_TEXTURE_1D_ARRAY``, ``GL_PROXY_TEXTURE_CUBE_MAP``, or ``GL_PROXY_TEXTURE_RECTANGLE``, no data is read from *data* , but all of the texture image state is recalculated, checked for consistency, and checked against the implementation's capabilities. If the implementation cannot handle a texture of the requested texture size, it sets all of the image state to 0, but does not generate an error (see :c:func:`glGetError`). To query for an entire mipmap array, use an image array level greater than or equal to 1.

If *target* is ``GL_TEXTURE_2D``, ``GL_TEXTURE_RECTANGLE`` or one of the ``GL_TEXTURE_CUBE_MAP`` targets, data is read from *data* as a sequence of signed or unsigned bytes, shorts, or longs, or single-precision floating-point values, depending on *type* . These values are grouped into sets of one, two, three, or four values, depending on *format* , to form elements. Each data byte is treated as eight 1-bit elements, with bit ordering determined by ``GL_UNPACK_LSB_FIRST`` (see :c:func:`glPixelStore`).

If *target* is ``GL_TEXTURE_1D_ARRAY``, data is interpreted as an array of one-dimensional images.

If a non-zero named buffer object is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target (see :c:func:`glBindBuffer`) while a texture image is specified, *data* is treated as a byte offset into the buffer object's data store.

The first element corresponds to the lower left corner of the texture image. Subsequent elements progress left-to-right through the remaining texels in the lowest row of the texture image, and then in successively higher rows of the texture image. The final element corresponds to the upper right corner of the texture image.

*format* determines the composition of each element in *data* . It can assume one of these symbolic values:


   
   ``GL_RED``
      Each element is a single red component. The GL converts it to floating point and assembles it into an RGBA element by attaching 0 for green and blue, and 1 for alpha. Each component is then multiplied by the signed scale factor ``GL_c_SCALE``, added to the signed bias ``GL_c_BIAS``, and clamped to the range [0,1].
   
   ``GL_RG``
      Each element is a red/green double. The GL converts it to floating point and assembles it into an RGBA element by attaching 0 for blue, and 1 for alpha. Each component is then multiplied by the signed scale factor ``GL_c_SCALE``, added to the signed bias ``GL_c_BIAS``, and clamped to the range [0,1].
   
   ``GL_RGB``
      [empty]
   
   ``GL_BGR``
      Each element is an RGB triple. The GL converts it to floating point and assembles it into an RGBA element by attaching 1 for alpha. Each component is then multiplied by the signed scale factor ``GL_c_SCALE``, added to the signed bias ``GL_c_BIAS``, and clamped to the range [0,1].
   
   ``GL_RGBA``
      [empty]
   
   ``GL_BGRA``
      Each element contains all four components. Each component is multiplied by the signed scale factor ``GL_c_SCALE``, added to the signed bias ``GL_c_BIAS``, and clamped to the range [0,1].
   
   ``GL_DEPTH_COMPONENT``
      Each element is a single depth value. The GL converts it to floating point, multiplies by the signed scale factor ``GL_DEPTH_SCALE``, adds the signed bias ``GL_DEPTH_BIAS``, and clamps to the range [0,1].
   
   ``GL_DEPTH_STENCIL``
      Each element is a pair of depth and stencil values. The depth component of the pair is interpreted as in ``GL_DEPTH_COMPONENT``. The stencil component is interpreted based on specified the depth + stencil internal format.
   
If an application wants to store the texture at a certain resolution or in a certain format, it can request the resolution and format with *internalFormat* . The GL will choose an internal representation that closely approximates that requested by *internalFormat* , but it may not match exactly. (The representations specified by ``GL_RED``, ``GL_RG``, ``GL_RGB``, and ``GL_RGBA`` must match exactly.)

*internalFormat* may be one of the base internal formats shown in Table 1, below

<skip xmlns:ns0="http://www.w3.org/2001/XInclude"> <ns0:include href="baseformattable.xml" />

*internalFormat* may also be one of the sized internal formats shown in Table 2, below

<skip xmlns:ns0="http://www.w3.org/2001/XInclude"> <ns0:include href="internalformattable.xml" />

Finally, *internalFormat* may also be one of the generic or compressed compressed texture formats shown in Table 3 below

<skip xmlns:ns0="http://www.w3.org/2001/XInclude"> <ns0:include href="compressedformattable.xml" />

If the *internalFormat* parameter is one of the generic compressed formats, ``GL_COMPRESSED_RED``, ``GL_COMPRESSED_RG``, ``GL_COMPRESSED_RGB``, or ``GL_COMPRESSED_RGBA``, the GL will replace the internal format with the symbolic constant for a specific internal format and compress the texture before storage. If no corresponding internal format is available, or the GL can not compress that image for any reason, the internal format is instead replaced with a corresponding base internal format.

If the *internalFormat* parameter is ``GL_SRGB``, ``GL_SRGB8``, ``GL_SRGB_ALPHA``, or ``GL_SRGB8_ALPHA8``, the texture is treated as if the red, green, or blue components are encoded in the sRGB color space. Any alpha component is left unchanged. The conversion from the sRGB encoded component |EQUATION_1_| to a linear component |EQUATION_2_| is:

|EQUATION_3_|

Assume |EQUATION_4_| is the sRGB component in the range [0,1].

Use the ``GL_PROXY_TEXTURE_2D``, ``GL_PROXY_TEXTURE_1D_ARRAY``, ``GL_PROXY_TEXTURE_RECTANGLE``, or ``GL_PROXY_TEXTURE_CUBE_MAP`` target to try out a resolution and format. The implementation will update and recompute its best match for the requested storage resolution and format. To then query this state, call :c:func:`glGetTexLevelParameter`. If the texture cannot be accommodated, texture state is set to 0.

A one-component texture image uses only the red component of the RGBA color extracted from *data* . A two-component image uses the R and G values. A three-component image uses the R, G, and B values. A four-component image uses all of the RGBA components.

Image-based shadowing can be enabled by comparing texture r coordinates to depth texture values to generate a boolean result. See :c:func:`glTexParameter` for details on texture comparison.


**Associated gets:**


   * :c:func:`glGetTexImage`
   * :c:func:`glGet` with argument ``GL_PIXEL_UNPACK_BUFFER_BINDING``

**Errors:**

   * ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_TEXTURE_2D``, ``GL_TEXTURE_1D_ARRAY``, ``GL_TEXTURE_RECTANGLE``, ``GL_PROXY_TEXTURE_2D``, ``GL_PROXY_TEXTURE_1D_ARRAY``, ``GL_PROXY_TEXTURE_RECTANGLE``, ``GL_PROXY_TEXTURE_CUBE_MAP``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_X``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_X``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Y``, ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Y``, ``GL_TEXTURE_CUBE_MAP_POSITIVE_Z``, or ``GL_TEXTURE_CUBE_MAP_NEGATIVE_Z``.
   * ``GL_INVALID_ENUM`` is generated if *target* is one of the six cube map 2D image targets and the width and height parameters are not equal.
   * ``GL_INVALID_ENUM`` is generated if *type* is not a type constant.
   * ``GL_INVALID_VALUE`` is generated if *width* is less than 0 or greater than ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if *target* is not ``GL_TEXTURE_1D_ARRAY`` or ``GL_PROXY_TEXTURE_1D_ARRAY`` and *height* is less than 0 or greater than ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if *target* is ``GL_TEXTURE_1D_ARRAY`` or ``GL_PROXY_TEXTURE_1D_ARRAY`` and *height* is less than 0 or greater than ``GL_MAX_ARRAY_TEXTURE_LAYERS``.
   * ``GL_INVALID_VALUE`` is generated if *level* is less than 0.
   * ``GL_INVALID_VALUE`` may be generated if *level* is greater than |EQUATION_5_| , where *`max`* is the returned value of ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if *internalFormat* is not one of the accepted resolution and format symbolic constants.
   * ``GL_INVALID_VALUE`` is generated if *width* or *height* is less than 0 or greater than ``GL_MAX_TEXTURE_SIZE``.
   * ``GL_INVALID_VALUE`` is generated if non-power-of-two textures are not supported and the *width* or *height* cannot be represented as |EQUATION_6_| for some integer value of *`k`* .
   * ``GL_INVALID_VALUE`` is generated if *border* is not 0.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_BYTE_3_3_2``, ``GL_UNSIGNED_BYTE_2_3_3_REV``, ``GL_UNSIGNED_SHORT_5_6_5``, ``GL_UNSIGNED_SHORT_5_6_5_REV``, or ``GL_UNSIGNED_INT_10F_11F_11F_REV``, and *format* is not ``GL_RGB``.
   * ``GL_INVALID_OPERATION`` is generated if *type* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``, ``GL_UNSIGNED_SHORT_4_4_4_4_REV``, ``GL_UNSIGNED_SHORT_5_5_5_1``, ``GL_UNSIGNED_SHORT_1_5_5_5_REV``, ``GL_UNSIGNED_INT_8_8_8_8``, ``GL_UNSIGNED_INT_8_8_8_8_REV``, ``GL_UNSIGNED_INT_10_10_10_2``, ``GL_UNSIGNED_INT_2_10_10_10_REV``, or ``GL_UNSIGNED_INT_5_9_9_9_REV``, and *format* is neither ``GL_RGBA`` nor ``GL_BGRA``.
   * ``GL_INVALID_OPERATION`` is generated if *target* is not ``GL_TEXTURE_2D``, ``GL_PROXY_TEXTURE_2D``, ``GL_TEXTURE_RECTANGLE``, or ``GL_PROXY_TEXTURE_RECTANGLE``, and *internalFormat* is ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_COMPONENT16``, ``GL_DEPTH_COMPONENT24``, or ``GL_DEPTH_COMPONENT32F``.
   * ``GL_INVALID_OPERATION`` is generated if *format* is ``GL_DEPTH_COMPONENT`` and *internalFormat* is not ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_COMPONENT16``, ``GL_DEPTH_COMPONENT24``, or ``GL_DEPTH_COMPONENT32F``.
   * ``GL_INVALID_OPERATION`` is generated if *internalFormat* is ``GL_DEPTH_COMPONENT``, ``GL_DEPTH_COMPONENT16``, ``GL_DEPTH_COMPONENT24``, or ``GL_DEPTH_COMPONENT32F``, and *format* is not ``GL_DEPTH_COMPONENT``.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the buffer object's data store is currently mapped.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size.
   * ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type* .
   * ``GL_INVALID_VALUE`` is generated if *target* is ``GL_TEXTURE_RECTANGLE`` or ``GL_PROXY_TEXTURE_RECTANGLE`` and *level* is not 0.



.. note::

   * The :c:func:`glPixelStore` mode affects texture images.
   * *data* may be a null pointer. In this case, texture memory is allocated to accommodate a texture of width *width* and height *height* . You can then download subtextures to initialize this texture memory. The image is undefined if the user tries to apply an uninitialized portion of the texture image to a primitive.
   * :c:func:`glTexImage2D` specifies the two-dimensional texture for the current texture unit, specified with :c:func:`glActiveTexture`.



.. warning::

   Parsing :ref:`man4/glTexImage2D.xml <xml_man4_glTexImage2D>`


.. role:: mml(raw)
   :format: html



.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <msub><mi mathvariant="italic">c</mi> <mi mathvariant="italic">s</mi> </msub> </math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <msub><mi mathvariant="italic">c</mi> <mi mathvariant="italic">l</mi> </msub> </math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msub> <mi mathvariant="italic">c</mi> <mi mathvariant="italic">l</mi> </msub> <mo>=</mo> <mrow> <mo>{</mo> <mtable columnalign="left"> <mtr> <mtd columnalign="left"> <mfrac> <msub> <mi mathvariant="italic">c</mi> <mi mathvariant="italic">s</mi> </msub> <mn>12.92</mn> </mfrac> </mtd> <mtd columnalign="left"> <mrow> <mspace width="1ex"/> <mo>if</mo> <mspace width="1ex"/> </mrow> <msub> <mi mathvariant="italic">c</mi> <mi mathvariant="italic">s</mi> </msub> <mo>&le;</mo> <mn>0.04045</mn> </mtd> </mtr> <mtr> <mtd columnalign="left"> <msup> <mrow> <mo>(</mo> <mfrac> <mrow> <msub> <mi>c</mi> <mi>s</mi> </msub> <mo>+</mo> <mn>0.055</mn> </mrow> <mn>1.055</mn> </mfrac> <mo>)</mo> </mrow> <mn>2.4</mn> </msup> </mtd> <mtd columnalign="left"> <mrow> <mspace width="1ex"/> <mo>if</mo> <mspace width="1ex"/> </mrow> <msub> <mi mathvariant="italic">c</mi> <mi mathvariant="italic">s</mi> </msub> <mo>&gt;</mo> <mn>0.04045</mn> </mtd> </mtr> </mtable> </mrow> </mrow> </math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <msub><mi mathvariant="italic">c</mi> <mi mathvariant="italic">s</mi> </msub> </math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msub><mi mathvariant="italic">log</mi> <mn>2</mn> </msub> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">max</mi> </mfenced> </mrow> </math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <msup><mn>2</mn> <mi mathvariant="italic">k</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo>&af;</mo> <mfenced open="(" close=")"> <mi mathvariant="italic">border</mi> </mfenced> </mrow> </mrow> </math>` 

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

