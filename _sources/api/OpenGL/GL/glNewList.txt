.. nabla.opengl-sphinx project at code.google.com

.. license http://opencontent.org/openpub/

function `glNewList`
--------------------

.. source file man/glNewList

.. currentmodule:: OpenGL.GL

Create or replace a display list

.. c:function:: glNewList
.. c:function:: void glNewList(GLuint  list, GLenum  mode)
   :noindex: 


   
   :param list:
      Specifies the display-list name.
   
   :param mode:
      Specifies the compilation mode, which can be ``GL_COMPILE`` or ``GL_COMPILE_AND_EXECUTE``.
   
.. c:function:: void glEndList(  void)

.. seealso::

   
   :c:func:`glCallList`, :c:func:`glCallLists`, :c:func:`glDeleteLists`, :c:func:`glGenLists`
   
.. rubric:: Description


Display lists are groups of GL commands that have been stored for subsequent execution. Display lists are created with :c:func:`glNewList`. All subsequent commands are placed in the display list, in the order issued, until :c:func:`glEndList` is called.

:c:func:`glNewList` has two arguments. The first argument, *list* , is a positive integer that becomes the unique name for the display list. Names can be created and reserved with :c:func:`glGenLists` and tested for uniqueness with :c:func:`glIsList`. The second argument, *mode* , is a symbolic constant that can assume one of two values:


   
   ``GL_COMPILE``
      Commands are merely compiled.
   
   ``GL_COMPILE_AND_EXECUTE``
      Commands are executed as they are compiled into the display list.
   
Certain commands are not compiled into the display list but are executed immediately, regardless of the display-list mode. These commands are :c:func:`glAreTexturesResident`, :c:func:`glColorPointer`, :c:func:`glDeleteLists`, :c:func:`glDeleteTextures`, :c:func:`glDisableClientState`, :c:func:`glEdgeFlagPointer`, :c:func:`glEnableClientState`, :c:func:`glFeedbackBuffer`, :c:func:`glFinish`, :c:func:`glFlush`, :c:func:`glGenLists`, :c:func:`glGenTextures`, :c:func:`glIndexPointer`, :c:func:`glInterleavedArrays`, :c:func:`glIsEnabled`, :c:func:`glIsList`, :c:func:`glIsTexture`, :c:func:`glNormalPointer`, :c:func:`glPopClientAttrib`, :c:func:`glPixelStore`, :c:func:`glPushClientAttrib`, :c:func:`glReadPixels`, :c:func:`glRenderMode`, :c:func:`glSelectBuffer`, :c:func:`glTexCoordPointer`, :c:func:`glVertexPointer`, and all of the :c:func:`glGet` commands.

Similarly, :c:func:`glTexImage1D`, :c:func:`glTexImage2D`, and :c:func:`glTexImage3D` are executed immediately and not compiled into the display list when their first argument is ``GL_PROXY_TEXTURE_1D``, ``GL_PROXY_TEXTURE_1D``, or ``GL_PROXY_TEXTURE_3D``, respectively.

When the ``ARB_imaging`` extension is supported, :c:func:`glHistogram` executes immediately when its argument is ``GL_PROXY_HISTOGRAM``. Similarly, :c:func:`glColorTable` executes immediately when its first argument is ``GL_PROXY_COLOR_TABLE``, ``GL_PROXY_POST_CONVOLUTION_COLOR_TABLE``, or ``GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE``.

For OpenGL versions 1.3 and greater, or when the ``ARB_multitexture`` extension is supported, :c:func:`glClientActiveTexture` is not compiled into display lists, but executed immediately.

When :c:func:`glEndList` is encountered, the display-list definition is completed by associating the list with the unique name *list* (specified in the :c:func:`glNewList` command). If a display list with name *list* already exists, it is replaced only when :c:func:`glEndList` is called.


**Associated gets:**


   * :c:func:`glIsList`
   * :c:func:`glGet` with argument ``GL_LIST_INDEX``
   * :c:func:`glGet` with argument ``GL_LIST_MODE``

**Errors:**

   * ``GL_INVALID_VALUE`` is generated if *list* is 0.
   * ``GL_INVALID_ENUM`` is generated if *mode* is not an accepted value.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glEndList` is called without a preceding :c:func:`glNewList`, or if :c:func:`glNewList` is called while a display list is being defined.
   * ``GL_INVALID_OPERATION`` is generated if :c:func:`glNewList` or :c:func:`glEndList` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`.
   * ``GL_OUT_OF_MEMORY`` is generated if there is insufficient memory to compile the display list. If the GL version is 1.1 or greater, no change is made to the previous contents of the display list, if any, and no other change is made to the GL state. (It is as if no attempt had been made to create the new display list.)



.. note::

   * :c:func:`glCallList` and :c:func:`glCallLists` can be entered into display lists. Commands in the display list or lists executed by :c:func:`glCallList` or :c:func:`glCallLists` are not included in the display list being created, even if the list creation mode is ``GL_COMPILE_AND_EXECUTE``.
   * A display list is just a group of commands and arguments, so errors generated by commands in a display list must be generated when the list is executed. If the list is created in ``GL_COMPILE`` mode, errors are not generated until the list is executed.



.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (c)2009 Khronos Group.

