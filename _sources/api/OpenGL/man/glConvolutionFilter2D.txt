.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:26
.. *****************************************************************************

.. following information was extracted from file 'man/glConvolutionFilter2D.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glConvolutionFilter2D`
--------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Define a two-dimensional convolution filter

.. c:function:: glConvolutionFilter2D


         :param target:

                  Must be ``GL_CONVOLUTION_2D``\ .

         :param internalformat:

                  The internal format of the convolution filter kernel.
                  The allowable values are
                  ``GL_ALPHA``\ ,
                  ``GL_ALPHA4``\ ,
                  ``GL_ALPHA8``\ ,
                  ``GL_ALPHA12``\ ,
                  ``GL_ALPHA16``\ ,
                  ``GL_LUMINANCE``\ ,
                  ``GL_LUMINANCE4``\ ,
                  ``GL_LUMINANCE8``\ ,
                  ``GL_LUMINANCE12``\ ,
                  ``GL_LUMINANCE16``\ ,
                  ``GL_LUMINANCE_ALPHA``\ ,
                  ``GL_LUMINANCE4_ALPHA4``\ ,
                  ``GL_LUMINANCE6_ALPHA2``\ ,
                  ``GL_LUMINANCE8_ALPHA8``\ ,
                  ``GL_LUMINANCE12_ALPHA4``\ ,
                  ``GL_LUMINANCE12_ALPHA12``\ ,
                  ``GL_LUMINANCE16_ALPHA16``\ ,
                  ``GL_INTENSITY``\ ,
                  ``GL_INTENSITY4``\ ,
                  ``GL_INTENSITY8``\ ,
                  ``GL_INTENSITY12``\ ,
                  ``GL_INTENSITY16``\ ,
                  ``GL_R3_G3_B2``\ ,
                  ``GL_RGB``\ ,
                  ``GL_RGB4``\ ,
                  ``GL_RGB5``\ ,
                  ``GL_RGB8``\ ,
                  ``GL_RGB10``\ ,
                  ``GL_RGB12``\ ,
                  ``GL_RGB16``\ ,
                  ``GL_RGBA``\ ,
                  ``GL_RGBA2``\ ,
                  ``GL_RGBA4``\ ,
                  ``GL_RGB5_A1``\ ,
                  ``GL_RGBA8``\ ,
                  ``GL_RGB10_A2``\ ,
                  ``GL_RGBA12``\ , or
                  ``GL_RGBA16``\ .

         :param width:

                  The width of the pixel array referenced by *data*\ .

         :param height:

                  The height of the pixel array referenced by *data*\ .

         :param format:

                  The format of the pixel data in *data*\ .
                  The allowable values are
                  ``GL_RED``\ ,
                  ``GL_GREEN``\ ,
                  ``GL_BLUE``\ ,
                  ``GL_ALPHA``\ ,
                  ``GL_RGB``\ ,
                  ``GL_BGR``\ ,
                  ``GL_RGBA``\ ,
                  ``GL_BGRA``\ ,
                  ``GL_LUMINANCE``\ , and
                  ``GL_LUMINANCE_ALPHA``\ .

         :param type:

                  The type of the pixel data in *data*\ .
                  Symbolic constants
                  ``GL_UNSIGNED_BYTE``\ ,
                  ``GL_BYTE``\ ,
                  ``GL_BITMAP``\ ,
                  ``GL_UNSIGNED_SHORT``\ ,
                  ``GL_SHORT``\ ,
                  ``GL_UNSIGNED_INT``\ ,
                  ``GL_INT``\ ,
                  ``GL_FLOAT``\ ,
                  ``GL_UNSIGNED_BYTE_3_3_2``\ ,
                  ``GL_UNSIGNED_BYTE_2_3_3_REV``\ ,
                  ``GL_UNSIGNED_SHORT_5_6_5``\ ,
                  ``GL_UNSIGNED_SHORT_5_6_5_REV``\ ,
                  ``GL_UNSIGNED_SHORT_4_4_4_4``\ ,
                  ``GL_UNSIGNED_SHORT_4_4_4_4_REV``\ ,
                  ``GL_UNSIGNED_SHORT_5_5_5_1``\ ,
                  ``GL_UNSIGNED_SHORT_1_5_5_5_REV``\ ,
                  ``GL_UNSIGNED_INT_8_8_8_8``\ ,
                  ``GL_UNSIGNED_INT_8_8_8_8_REV``\ ,
                  ``GL_UNSIGNED_INT_10_10_10_2``\ , and
                  ``GL_UNSIGNED_INT_2_10_10_10_REV``
                  are accepted.

         :param data:

                  Pointer to a two-dimensional array of pixel data that is processed to
                  build the convolution filter kernel.

.. rubric:: Specification

.. c:function:: void glConvolutionFilter2D(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid *  data)
   :noindex: 


.. seealso::


            :c:func:`glConvolutionFilter1D`\ ,
            :c:func:`glSeparableFilter2D`\ ,
            :c:func:`glConvolutionParameter`\ ,
            :c:func:`glPixelTransfer`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glConvolutionFilter2D` builds a two-dimensional convolution filter kernel from an array of
pixels.


The pixel array specified by *width*\ , *height*\ , *format*\ , *type*\ , and
*data* is extracted from memory and processed just as if
:c:func:`glDrawPixels` were called, but processing stops after the final
expansion to RGBA is completed.


If a non-zero named buffer object is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target
(see :c:func:`glBindBuffer`\ ) while a convolution filter is
specified, *data* is treated as a byte offset into the buffer object's data store.


The R, G, B, and A components of each pixel are next scaled by the four
2D ``GL_CONVOLUTION_FILTER_SCALE`` parameters and biased by the
four 2D ``GL_CONVOLUTION_FILTER_BIAS`` parameters.
(The scale and bias parameters are set by :c:func:`glConvolutionParameter`
using the ``GL_CONVOLUTION_2D`` target and the names
``GL_CONVOLUTION_FILTER_SCALE`` and ``GL_CONVOLUTION_FILTER_BIAS``\ .
The parameters themselves are vectors of four values that are applied to red,
green, blue, and alpha, in that order.)
The R, G, B, and A values are not clamped to [0,1] at any time during this
process.


Each pixel is then converted to the internal format specified by
*internalformat*\ .
This conversion simply maps the component values of the pixel (R, G, B,
and A) to the values included in the internal format (red, green, blue,
alpha, luminance, and intensity).  The mapping is as follows:


+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| :strong:`Internal Format` | :strong:`Red` | :strong:`Green` | :strong:`Blue` | :strong:`Alpha` | :strong:`Luminance` | :strong:`Intensity` |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_ALPHA``              |               |                 |                | A               |                     |                     |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_LUMINANCE``          |               |                 |                |                 | R                   |                     |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_LUMINANCE_ALPHA``    |               |                 |                | A               | R                   |                     |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_INTENSITY``          |               |                 |                |                 |                     | R                   |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_RGB``                | R             | G               | B              |                 |                     |                     |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+
| ``GL_RGBA``               | R             | G               | B              | A               |                     |                     |
+---------------------------+---------------+-----------------+----------------+-----------------+---------------------+---------------------+


The red, green, blue, alpha, luminance, and/or intensity components of
the resulting pixels are stored in floating-point rather than integer
format.
They form a two-dimensional filter kernel image indexed with coordinates
:strong:`i` and :strong:`j` such that :strong:`i` starts at zero and increases from left
to right, and :strong:`j` starts at zero and increases from bottom to top.
Kernel location :strong:`i,j` is derived from the :strong:`N` th pixel,
where :strong:`N` is :strong:`i` + :strong:`j` \* *width*\ .


Note that after a convolution is performed, the resulting color
components are also scaled by their corresponding
``GL_POST_CONVOLUTION_c_SCALE`` parameters and biased by their
corresponding ``GL_POST_CONVOLUTION_c_BIAS`` parameters (where
:strong:`c` takes on the values :strong:`RED`\ , :strong:`GREEN`\ , :strong:`BLUE`\ , and
:strong:`ALPHA`\ ).
These parameters are set by :c:func:`glPixelTransfer`\ .


.. note::


   :c:func:`glConvolutionFilter2D` is present only if ``ARB_imaging`` is returned when :c:func:`glGetString`
   is called with an argument of ``GL_EXTENSIONS``\ .


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *target* is not ``GL_CONVOLUTION_2D``\ .
* ``GL_INVALID_ENUM`` is generated if *internalformat* is not one of the allowable values.
* ``GL_INVALID_ENUM`` is generated if *format* is not one of the allowable values.
* ``GL_INVALID_ENUM`` is generated if *type* is not one of the allowable values.
* ``GL_INVALID_VALUE`` is generated if *width* is less than zero or greater than the maximum supported value. This value may be queried with :c:func:`glGetConvolutionParameter` using target ``GL_CONVOLUTION_2D`` and name ``GL_MAX_CONVOLUTION_WIDTH``\ .
* ``GL_INVALID_VALUE`` is generated if *height* is less than zero or greater than the maximum supported value. This value may be queried with :c:func:`glGetConvolutionParameter` using target ``GL_CONVOLUTION_2D`` and name ``GL_MAX_CONVOLUTION_HEIGHT``\ .
* ``GL_INVALID_OPERATION`` is generated if *height* is one of ``GL_UNSIGNED_BYTE_3_3_2``\ , ``GL_UNSIGNED_BYTE_2_3_3_REV``\ , ``GL_UNSIGNED_SHORT_5_6_5``\ , or ``GL_UNSIGNED_SHORT_5_6_5_REV`` and *format* is not ``GL_RGB``\ .
* ``GL_INVALID_OPERATION`` is generated if *height* is one of ``GL_UNSIGNED_SHORT_4_4_4_4``\ , ``GL_UNSIGNED_SHORT_4_4_4_4_REV``\ , ``GL_UNSIGNED_SHORT_5_5_5_1``\ , ``GL_UNSIGNED_SHORT_1_5_5_5_REV``\ , ``GL_UNSIGNED_INT_8_8_8_8``\ , ``GL_UNSIGNED_INT_8_8_8_8_REV``\ , ``GL_UNSIGNED_INT_10_10_10_2``\ , or ``GL_UNSIGNED_INT_2_10_10_10_REV`` and *format* is neither ``GL_RGBA`` nor ``GL_BGRA``\ .
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the buffer object's data store is currently mapped.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a datum indicated by *type*\ .
* ``GL_INVALID_OPERATION`` is generated if :c:func:`glConvolutionFilter2D` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetConvolutionParameter`\ , :c:func:`glGetConvolutionFilter`


.. -----------------------------------------------------------------------------

.. <foot 'glConvolutionFilter2D'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

