.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:27
.. *****************************************************************************

.. following information was extracted from file 'man/glTexCoordPointer.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glTexCoordPointer`
----------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Define an array of texture coordinates

.. c:function:: glTexCoordPointer


         :param size:

                  Specifies the number of coordinates per array element. Must be 1, 2, 3,
                  or 4. The initial value is 4.

         :param type:

                  Specifies the data type of each texture coordinate.
                  Symbolic constants
                  ``GL_SHORT``\ ,
                  ``GL_INT``\ ,
                  ``GL_FLOAT``\ ,
                  or ``GL_DOUBLE``
                  are accepted. The initial value is ``GL_FLOAT``\ .

         :param stride:

                  Specifies the byte offset between consecutive texture coordinate sets.
                  If *stride* is 0, the array elements are understood
                  to be tightly packed. The initial value is 0.

         :param pointer:

                  Specifies a pointer to the first coordinate of the first texture coordinate set in the
                  array. The initial value is 0.

.. rubric:: Specification

.. c:function:: void glTexCoordPointer(GLint  size, GLenum  type, GLsizei  stride, const GLvoid *  pointer)
   :noindex: 


.. seealso::


            :c:func:`glArrayElement`\ ,
            :c:func:`glBindBuffer`\ ,
            :c:func:`glClientActiveTexture`\ ,
            :c:func:`glColorPointer`\ ,
            :c:func:`glDisableClientState`\ ,
            :c:func:`glDrawArrays`\ ,
            :c:func:`glDrawElements`\ ,
            :c:func:`glDrawRangeElements`\ ,
            :c:func:`glEdgeFlagPointer`\ ,
            :c:func:`glEnableClientState`\ ,
            :c:func:`glFogCoordPointer`\ ,
            :c:func:`glIndexPointer`\ ,
            :c:func:`glInterleavedArrays`\ ,
            :c:func:`glMultiDrawArrays`\ ,
            :c:func:`glMultiDrawElements`\ ,
            :c:func:`glMultiTexCoord`\ ,
            :c:func:`glNormalPointer`\ ,
            :c:func:`glPopClientAttrib`\ ,
            :c:func:`glPushClientAttrib`\ ,
            :c:func:`glSecondaryColorPointer`\ ,
            :c:func:`glTexCoord`\ ,
            :c:func:`glVertexAttribPointer`\ ,
            :c:func:`glVertexPointer`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glTexCoordPointer` specifies the location and data format of an array of texture
coordinates to use when rendering.
*size* specifies the number of coordinates per
texture coordinate set, and must be 1, 2, 3, or 4.
*type* specifies the data type of each texture coordinate,
and *stride* specifies the byte stride from one
texture coordinate set to the next, allowing vertices and attributes
to be packed into a single array or stored in separate arrays.
(Single-array storage may be more efficient on some implementations;
see
:c:func:`glInterleavedArrays`\ .)


If a non-zero named buffer object is bound to the ``GL_ARRAY_BUFFER`` target
(see :c:func:`glBindBuffer`\ ) while a texture coordinate array is
specified, *pointer* is treated as a byte offset into the buffer object's data store.
Also, the buffer object binding (\ ``GL_ARRAY_BUFFER_BINDING``\ ) is saved as texture coordinate vertex array
client-side state (\ ``GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING``\ ).


When a texture coordinate array is specified,
*size*\ , *type*\ , *stride*\ , and *pointer* are saved as client-side
state, in addition to the current vertex array buffer object binding.


To enable and disable a texture coordinate array, call :c:func:`glEnableClientState` and
:c:func:`glDisableClientState` with the argument
``GL_TEXTURE_COORD_ARRAY``\ . If enabled, the texture coordinate array is used when
:c:func:`glArrayElement`\ , :c:func:`glDrawArrays`\ , :c:func:`glMultiDrawArrays`\ ,
:c:func:`glDrawElements`\ , :c:func:`glMultiDrawElements`\ , or :c:func:`glDrawRangeElements`
is called.


.. note::


   :c:func:`glTexCoordPointer` is available only if the GL version is 1.1 or greater.


   For OpenGL versions 1.3 and greater, or when the ``ARB_multitexture``
   extension is supported, :c:func:`glTexCoordPointer` updates the
   texture coordinate array state of the active client texture unit,
   specified with :c:func:`glClientActiveTexture`\ .


   Each texture coordinate array is initially disabled and isn't accessed when
   :c:func:`glArrayElement`\ , :c:func:`glDrawElements`\ , :c:func:`glDrawRangeElements`\ ,
   :c:func:`glDrawArrays`\ , :c:func:`glMultiDrawArrays`\ , or :c:func:`glMultiDrawElements`
   is called.


   Execution of :c:func:`glTexCoordPointer` is not allowed between the execution of
   :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`\ ,
   but an error may or may not be generated. If no error is generated,
   the operation is undefined.


   :c:func:`glTexCoordPointer` is typically implemented on the client side.


   Texture coordinate array parameters are client-side state and are therefore
   not saved or restored by :c:func:`glPushAttrib` and :c:func:`glPopAttrib`\ .
   Use :c:func:`glPushClientAttrib` and
   :c:func:`glPopClientAttrib` instead.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` is generated if *size* is not 1, 2, 3, or 4.
* ``GL_INVALID_ENUM`` is generated if *type* is not an accepted value.
* ``GL_INVALID_VALUE`` is generated if *stride* is negative.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glIsEnabled` with argument ``GL_TEXTURE_COORD_ARRAY``
* :c:func:`glGet` with argument ``GL_TEXTURE_COORD_ARRAY_SIZE``
* :c:func:`glGet` with argument ``GL_TEXTURE_COORD_ARRAY_TYPE``
* :c:func:`glGet` with argument ``GL_TEXTURE_COORD_ARRAY_STRIDE``
* :c:func:`glGet` with argument ``GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING``
* :c:func:`glGet` with argument ``GL_ARRAY_BUFFER_BINDING``
* :c:func:`glGetPointerv` with argument ``GL_TEXTURE_COORD_ARRAY_POINTER``


.. -----------------------------------------------------------------------------

.. <foot 'glTexCoordPointer'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

