.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man/gluNurbsSurface.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `gluNurbsSurface`
--------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Define the shape of a NURBS surface

.. c:function:: gluNurbsSurface


         :param nurb:

                  Specifies the NURBS object (created with :c:func:`gluNewNurbsRenderer`\ ).

         :param sKnotCount:

                  Specifies the number of knots in the parametric :strong:`u` direction.

         :param sKnots:

                  Specifies an array of *sKnotCount* nondecreasing knot values in the parametric
                  :strong:`u` direction.

         :param tKnotCount:

                  Specifies the number of knots in the parametric :strong:`v` direction.

         :param tKnots:

                  Specifies an array of *tKnotCount* nondecreasing knot values in the parametric
                  :strong:`v` direction.

         :param sStride:

                  Specifies the offset (as a number of single-precision floating-point values)
                  between successive control points in the parametric :strong:`u` direction
                  in *control*\ .

         :param tStride:

                  Specifies the offset (in single-precision floating-point values)
                  between successive control points in the parametric :strong:`v` direction
                  in *control*\ .

         :param control:

                  Specifies an array containing control points for the NURBS surface.
                  The offsets between successive control points in the parametric :strong:`u`
                  and :strong:`v` directions are given by *sStride* and *tStride*\ .

         :param sOrder:

                  Specifies the order of the NURBS surface in the parametric :strong:`u`
                  direction. The order is one more than the degree, hence
                  a surface that is cubic in :strong:`u` has a :strong:`u` order of 4.

         :param tOrder:

                  Specifies the order of the NURBS surface in the parametric :strong:`v`
                  direction. The order is one more than the degree, hence
                  a surface that is cubic in :strong:`v` has a :strong:`v` order of 4.

         :param type:

                  Specifies type of the surface. *type* can be any of the valid
                  two-dimensional evaluator types (such as ``GLU_MAP2_VERTEX_3`` or
                  ``GLU_MAP2_COLOR_4``\ ).

.. rubric:: Specification

.. c:function:: void gluNurbsSurface(GLUnurbs*  nurb, GLint  sKnotCount, GLfloat*  sKnots, GLint  tKnotCount, GLfloat*  tKnots, GLint  sStride, GLint  tStride, GLfloat*  control, GLint  sOrder, GLint  tOrder, GLenum  type)
   :noindex: 


.. seealso::


            :c:func:`gluBeginSurface`\ ,
            :c:func:`gluBeginTrim`\ ,
            :c:func:`gluNewNurbsRenderer`\ ,
            :c:func:`gluNurbsCurve`\ ,
            :c:func:`gluPwlCurve`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Use :c:func:`gluNurbsSurface` within a NURBS (Non-Uniform Rational B-Spline) surface
definition to describe the shape of a NURBS surface (before
any trimming). To mark the beginning of
a NURBS surface definition, use the :c:func:`gluBeginSurface` command.
To mark the end of a NURBS surface definition, use the
:c:func:`gluEndSurface` command. Call :c:func:`gluNurbsSurface` within a NURBS
surface definition only.


Positional, texture, and color coordinates are associated
with a surface by presenting each as a separate :c:func:`gluNurbsSurface` between a
:c:func:`gluBeginSurface` / :c:func:`gluEndSurface` pair. No more than
one call to :c:func:`gluNurbsSurface` for each of color, position, and texture
data can be made within a single :c:func:`gluBeginSurface` / :c:func:`gluEndSurface`
pair. Exactly one call must be made to describe the position of the
surface (a *type* of ``GLU_MAP2_VERTEX_3`` or ``GLU_MAP2_VERTEX_4``\ ).


A NURBS surface can be trimmed by using the commands
:c:func:`gluNurbsCurve` and :c:func:`gluPwlCurve` between calls to
:c:func:`gluBeginTrim` and :c:func:`gluEndTrim`\ .


Note that a :c:func:`gluNurbsSurface` with *sKnotCount* knots in the :strong:`u` direction
and *tKnotCount* knots in the :strong:`v` direction with orders
*sOrder* and *tOrder* must have
(\ *sKnotCount* - *sOrder*\ ) |EQUATION_1_| (\ *tKnotCount* - *tOrder*\ ) control points.


.. -----------------------------------------------------------------------------

.. rubric:: Example

..


The following commands render a textured NURBS surface with normals;
the texture coordinates and normals are also NURBS surfaces:

.. code-block:: c


   gluBeginSurface(nobj);
      gluNurbsSurface(nobj, ..., GL_MAP2_TEXTURE_COORD_2);
      gluNurbsSurface(nobj, ..., GL_MAP2_NORMAL);
      gluNurbsSurface(nobj, ..., GL_MAP2_VERTEX_4);
   gluEndSurface(nobj);

..


.. -----------------------------------------------------------------------------

.. <foot 'gluNurbsSurface'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">times</mi></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

