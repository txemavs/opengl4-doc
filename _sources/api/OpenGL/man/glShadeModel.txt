.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:27
.. *****************************************************************************

.. following information was extracted from file 'man/glShadeModel.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glShadeModel`
-----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Select flat or smooth shading

.. c:function:: glShadeModel


         :param mode:

                  Specifies a symbolic value representing a shading technique.
                  Accepted values are ``GL_FLAT`` and ``GL_SMOOTH``\ .
                  The initial value is ``GL_SMOOTH``\ .

.. rubric:: Specification

.. c:function:: void glShadeModel(GLenum  mode)
   :noindex: 


.. seealso::


            :c:func:`glBegin`\ ,
            :c:func:`glColor`\ ,
            :c:func:`glLight`\ ,
            :c:func:`glLightModel`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


GL primitives can have either flat or smooth shading.
Smooth shading,
the default,
causes the computed colors of vertices to be interpolated as the
primitive is rasterized,
typically assigning different colors to each resulting pixel fragment.
Flat shading selects the computed color of just one vertex
and assigns it to all the pixel fragments
generated by rasterizing a single primitive.
In either case, the computed color of a vertex is the result of
lighting if lighting is enabled,
or it is the current color at the time the vertex was specified if
lighting is disabled.


Flat and smooth shading are indistinguishable for points.
Starting when :c:func:`glBegin` is issued and counting vertices and
primitives from 1, the GL gives each flat-shaded line segment |EQUATION_1_| the
computed color of vertex |EQUATION_2_|\ ,
its second vertex.
Counting similarly from 1,
the GL gives each flat-shaded polygon the computed color of the vertex listed
in the following table.
This is the last vertex to specify the polygon in all cases except single
polygons,
where the first vertex specifies the flat-shaded color.


+---------------------------------------------------+------------------+
| :strong:`Primitive Type of Polygon |EQUATION_3_|` | :strong:`Vertex` |
+---------------------------------------------------+------------------+
| Single polygon (\ |EQUATION_4_|\ )                | 1                |
+---------------------------------------------------+------------------+
| Triangle strip                                    | |EQUATION_5_|    |
+---------------------------------------------------+------------------+
| Triangle fan                                      | |EQUATION_6_|    |
+---------------------------------------------------+------------------+
| Independent triangle                              | |EQUATION_7_|    |
+---------------------------------------------------+------------------+
| Quad strip                                        | |EQUATION_8_|    |
+---------------------------------------------------+------------------+
| Independent quad                                  | |EQUATION_9_|    |
+---------------------------------------------------+------------------+


Flat and smooth shading are specified by :c:func:`glShadeModel` with *mode* set to
``GL_FLAT`` and ``GL_SMOOTH``\ , respectively.


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *mode* is any value other than ``GL_FLAT`` or ``GL_SMOOTH``\ .
* ``GL_INVALID_OPERATION`` is generated if :c:func:`glShadeModel` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_SHADE_MODEL``


.. -----------------------------------------------------------------------------

.. <foot 'glShadeModel'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">i</mi></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="italic">i</mi><mo>+</mo><mn>1</mn></mrow></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">i</mi></math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="italic">i</mi><mo>==</mo><mn>1</mn></mrow></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="italic">i</mi><mo>+</mo><mn>2</mn></mrow></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="italic">i</mi><mo>+</mo><mn>2</mn></mrow></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mn>3</mn><mo>&it;</mo><mi mathvariant="italic">i</mi></mrow></math>` 

.. |EQUATION_8_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mn>2</mn><mo>&it;</mo><mi mathvariant="italic">i</mi><mo>+</mo><mn>2</mn></mrow></math>` 

.. |EQUATION_9_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mn>4</mn><mo>&it;</mo><mi mathvariant="italic">i</mi></mrow></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

