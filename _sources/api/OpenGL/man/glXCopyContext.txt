.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man/glXCopyContext.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glXCopyContext`
-------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Copy state from one rendering context to another

.. c:function:: glXCopyContext


         :param dpy:

                  Specifies the connection to the X server.

         :param src:

                  Specifies the source context.

         :param dst:

                  Specifies the destination context.

         :param mask:

                  Specifies which portions of *src* state are to be copied to *dst*\ .

.. rubric:: Specification

.. c:function:: void glXCopyContext(Display *  dpy, GLXContext  src, GLXContext  dst, unsigned long  mask)
   :noindex: 


.. seealso::


            :c:func:`glPushAttrib`\ ,
            :c:func:`glXCreateContext`\ ,
            :c:func:`glXIsDirect`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glXCopyContext` copies selected groups of state variables from *src* to *dst*\ .
*mask* indicates which groups of state variables are to be copied.
*mask* contains the bitwise OR of the same symbolic names that are
passed to the GL command :c:func:`glPushAttrib`\ .
The single symbolic constant ``GLX_ALL_ATTRIB_BITS`` can be used to
copy the maximum possible portion of rendering state.


The copy can be done only if the renderers named by *src* and *dst*
share an address space.
Two rendering contexts share an address space if both are nondirect
using the same server,
or if both are direct and owned by a single process.
Note that in the nondirect case it is not necessary for the calling
threads to share an address space,
only for their related rendering contexts to share an address space.


Not all values for GL state can be copied.
For example,
pixel pack and unpack state,
render mode state,
and select and feedback state are not copied.
The state that can be copied is exactly the state that is manipulated
by the GL command
:c:func:`glPushAttrib`\ .


An implicit :c:func:`glFlush` is done by :c:func:`glXCopyContext` if *src* is the current
context for the calling thread.


.. note::


   A :strong:`process` is a single execution environment,
   implemented in a single address space,
   consisting of one or more threads.


   A :strong:`thread` is one of a set of subprocesses that share
   a single address space,
   but maintain separate program counters,
   stack spaces,
   and other related global data.
   A :strong:`thread` that is the only member of its subprocess group
   is equivalent to a :strong:`process`\ .


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``BadMatch`` is generated if rendering contexts *src* and *dst* do not share an address space or were not created with respect to the same screen.
* ``BadAccess`` is generated if *dst* is current to any thread (including the calling thread) at the time :c:func:`glXCopyContext` is called.
* ``GLXBadCurrentWindow`` is generated if *src* is the current context and the current drawable is a window that is no longer valid.
* ``GLXBadContext`` is generated if either *src* or *dst* is not a valid GLX context.


.. -----------------------------------------------------------------------------

.. <foot 'glXCopyContext'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

