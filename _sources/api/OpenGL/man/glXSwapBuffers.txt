.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man/glXSwapBuffers.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glXSwapBuffers`
-------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Exchange front and back buffers

.. c:function:: glXSwapBuffers


         :param dpy:

                  Specifies the connection to the X server.

         :param drawable:

                  Specifies the drawable whose buffers are to be swapped.

.. rubric:: Specification

.. c:function:: void glXSwapBuffers(Display *  dpy, GLXDrawable  drawable)
   :noindex: 


.. seealso::


            :c:func:`glFlush`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glXSwapBuffers` promotes the contents of the back buffer of *drawable* to become
the contents of the front buffer of *drawable*\ .
The contents of the back buffer then become undefined.
The update typically takes place during the vertical retrace of
the monitor,
rather than immediately after :c:func:`glXSwapBuffers` is called.


:c:func:`glXSwapBuffers` performs an implicit :c:func:`glFlush` before it returns.
Subsequent OpenGL commands may be issued immediately after calling :c:func:`glXSwapBuffers`\ ,
but are not executed until the buffer exchange is completed.


If *drawable* was not created with respect to a double-buffered visual,
:c:func:`glXSwapBuffers` has no effect,
and no error is generated.


.. note::


   The contents of the back buffer become undefined after
   a swap. Note that this applies to pixel buffers as well as windows.


   All GLX rendering contexts share the same notion of which are front buffers
   and which are back buffers.
   One consequence is that when multiple clients are rendering to the same
   double-buffered window,
   all of them should finish rendering before one of them issues the command
   to swap buffers.
   The clients are responsible for implementing this synchronization.
   Typically this is accomplished by executing :c:func:`glFinish` and then
   using a semaphore in shared memory to rendezvous before swapping.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GLXBadDrawable`` is generated if *drawable* is not a valid GLX drawable.
* ``GLXBadCurrentWindow`` is generated if *dpy* and *drawable* are respectively the display and drawable associated with the current context of the calling thread, and *drawable* identifies a window that is no longer valid.


.. -----------------------------------------------------------------------------

.. <foot 'glXSwapBuffers'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

