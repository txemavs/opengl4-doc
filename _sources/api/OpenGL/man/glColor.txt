.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:26
.. *****************************************************************************

.. following information was extracted from file 'man/glColor.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glColor`
------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Set the current color

.. c:function:: glColor


         :param red:
         :param green:
         :param blue:

                  Specify new red, green, and blue values for the current color.

         :param alpha:

                  Specifies a new alpha value for the current color.
                  Included only in the four-argument :c:func:`glColor4` commands.

.. rubric:: Specification

.. c:function:: void glColor3b(GLbyte  red, GLbyte  green, GLbyte  blue, GLshort  red, GLshort  green, GLshort  blue, GLint  red, GLint  green, GLint  blue, GLfloat  red, GLfloat  green, GLfloat  blue, GLdouble  red, GLdouble  green, GLdouble  blue, GLubyte  red, GLubyte  green, GLubyte  blue, GLushort  red, GLushort  green, GLushort  blue, GLuint  red, GLuint  green, GLuint  blue, GLbyte  red, GLbyte  green, GLbyte  blue, GLbyte  alpha, GLshort  red, GLshort  green, GLshort  blue, GLshort  alpha, GLint  red, GLint  green, GLint  blue, GLint  alpha, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha, GLdouble  red, GLdouble  green, GLdouble  blue, GLdouble  alpha, GLubyte  red, GLubyte  green, GLubyte  blue, GLubyte  alpha, GLushort  red, GLushort  green, GLushort  blue, GLushort  alpha, GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha)
.. c:function:: void glColor3bv(const GLbyte *  v, const GLshort *  v, const GLint *  v, const GLfloat *  v, const GLdouble *  v, const GLubyte *  v, const GLushort *  v, const GLuint *  v, const GLbyte *  v, const GLshort *  v, const GLint *  v, const GLfloat *  v, const GLdouble *  v, const GLubyte *  v, const GLushort *  v, const GLuint *  v)


.. seealso::


            :c:func:`glColorPointer`\ ,
            :c:func:`glIndex`\ ,
            :c:func:`glSecondaryColor`


..


.. -----------------------------------------------------------------------------

.. rubric:: Parameters

..


      *v*


            Specifies a pointer to an array that contains red, green, blue,
            and (sometimes) alpha values.


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


The GL stores both a current single-valued color index
and a current four-valued RGBA color.
:c:func:`glColor` sets a new four-valued RGBA color.
:c:func:`glColor` has two major variants:
:c:func:`glColor3` and :c:func:`glColor4`\ .
:c:func:`glColor3` variants specify new red,
green,
and blue values explicitly
and set the current alpha value to 1.0 (full intensity) implicitly.
:c:func:`glColor4` variants specify all four color components explicitly.


:c:func:`glColor3b`\ , :c:func:`glColor4b`\ ,
:c:func:`glColor3s`\ , :c:func:`glColor4s`\ , :c:func:`glColor3i`\ , and :c:func:`glColor4i` take
three or four signed byte, short, or long integers as arguments.
When :strong:`v` is appended to the name,
the color commands can take a pointer to an array of such values.


Current color values are stored in floating-point format,
with unspecified mantissa and exponent sizes.
Unsigned integer color components,
when specified,
are linearly mapped to floating-point values such that the largest
representable value maps to 1.0 (full intensity),
and 0 maps to 0.0 (zero intensity).
Signed integer color components,
when specified,
are linearly mapped to floating-point values such that the most positive
representable value maps to 1.0,
and the most negative representable value maps to
|EQUATION_1_|\ .
(Note that
this mapping does not convert 0 precisely to 0.0.)
Floating-point values are mapped directly.


Neither floating-point nor signed integer values are clamped
to the range
|EQUATION_2_| before the current color is updated.
However,
color components are clamped to this range before they are interpolated
or written into a color buffer.


.. note::


   The initial value for the current color is (1, 1, 1, 1).


   The current color can be updated at any time.
   In particular,
   :c:func:`glColor` can be called between a call to :c:func:`glBegin` and the corresponding
   call to :c:func:`glEnd`\ .


..


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_CURRENT_COLOR``
* :c:func:`glGet` with argument ``GL_RGBA_MODE``


.. -----------------------------------------------------------------------------

.. <foot 'glColor'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mn>-1.0</mn></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"><mn>0</mn><mn>1</mn></mfenced></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

