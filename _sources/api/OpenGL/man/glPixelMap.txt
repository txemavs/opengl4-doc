.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:27
.. *****************************************************************************

.. following information was extracted from file 'man/glPixelMap.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glPixelMap`
---------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Set up pixel transfer maps

.. c:function:: glPixelMap


         :param map:

                  Specifies a symbolic map name.
                  Must be one of the following:
                  ``GL_PIXEL_MAP_I_TO_I``\ ,
                  ``GL_PIXEL_MAP_S_TO_S``\ ,
                  ``GL_PIXEL_MAP_I_TO_R``\ ,
                  ``GL_PIXEL_MAP_I_TO_G``\ ,
                  ``GL_PIXEL_MAP_I_TO_B``\ ,
                  ``GL_PIXEL_MAP_I_TO_A``\ ,
                  ``GL_PIXEL_MAP_R_TO_R``\ ,
                  ``GL_PIXEL_MAP_G_TO_G``\ ,
                  ``GL_PIXEL_MAP_B_TO_B``\ , or
                  ``GL_PIXEL_MAP_A_TO_A``\ .

         :param mapsize:

                  Specifies the size of the map being defined.

         :param values:

                  Specifies an array of *mapsize* values.

.. rubric:: Specification

.. c:function:: void glPixelMapfv(GLenum  map, GLsizei  mapsize, const GLfloat *  values, GLenum  map, GLsizei  mapsize, const GLuint *  values, GLenum  map, GLsizei  mapsize, const GLushort *  values)


.. seealso::


            :c:func:`glColorTable`\ ,
            :c:func:`glColorSubTable`\ ,
            :c:func:`glConvolutionFilter1D`\ ,
            :c:func:`glConvolutionFilter2D`\ ,
            :c:func:`glCopyPixels`\ ,
            :c:func:`glCopyTexImage1D`\ ,
            :c:func:`glCopyTexImage2D`\ ,
            :c:func:`glCopyTexSubImage1D`\ ,
            :c:func:`glCopyTexSubImage2D`\ ,
            :c:func:`glDrawPixels`\ ,
            :c:func:`glHistogram`\ ,
            :c:func:`glMinmax`\ ,
            :c:func:`glPixelStore`\ ,
            :c:func:`glPixelTransfer`\ ,
            :c:func:`glReadPixels`\ ,
            :c:func:`glSeparableFilter2D`\ ,
            :c:func:`glTexImage1D`\ ,
            :c:func:`glTexImage2D`\ ,
            :c:func:`glTexImage3D`\ ,
            :c:func:`glTexSubImage1D`\ ,
            :c:func:`glTexSubImage2D`\ ,
            :c:func:`glTexSubImage3D`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glPixelMap` sets up translation tables,
or :strong:`maps`\ ,
used by
:c:func:`glCopyPixels`\ ,
:c:func:`glCopyTexImage1D`\ ,
:c:func:`glCopyTexImage2D`\ ,
:c:func:`glCopyTexSubImage1D`\ ,
:c:func:`glCopyTexSubImage2D`\ ,
:c:func:`glCopyTexSubImage3D`\ ,
:c:func:`glDrawPixels`\ ,
:c:func:`glReadPixels`\ ,
:c:func:`glTexImage1D`\ ,
:c:func:`glTexImage2D`\ ,
:c:func:`glTexImage3D`\ ,
:c:func:`glTexSubImage1D`\ ,
:c:func:`glTexSubImage2D`\ , and
:c:func:`glTexSubImage3D`\ .
Additionally, if the ``ARB_imaging`` subset is supported, the
routines
:c:func:`glColorTable`\ ,
:c:func:`glColorSubTable`\ ,
:c:func:`glConvolutionFilter1D`\ ,
:c:func:`glConvolutionFilter2D`\ ,
:c:func:`glHistogram`\ ,
:c:func:`glMinmax`\ , and
:c:func:`glSeparableFilter2D`\ .
Use of these maps is described completely in the
:c:func:`glPixelTransfer` reference page,
and partly in the reference pages for the pixel and texture image commands.
Only the specification of the maps is described in this reference page.


*map* is a symbolic map name,
indicating one of ten maps to set.
*mapsize* specifies the number of entries in the map,
and *values* is a pointer to an array of *mapsize* map values.


If a non-zero named buffer object is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target
(see :c:func:`glBindBuffer`\ ) while a pixel transfer map is
specified, *values* is treated as a byte offset into the buffer object's data store.


The ten maps are as follows:


         ``GL_PIXEL_MAP_I_TO_I``


               Maps color indices to color indices.


         ``GL_PIXEL_MAP_S_TO_S``


               Maps stencil indices to stencil indices.


         ``GL_PIXEL_MAP_I_TO_R``


               Maps color indices to red components.


         ``GL_PIXEL_MAP_I_TO_G``


               Maps color indices to green components.


         ``GL_PIXEL_MAP_I_TO_B``


               Maps color indices to blue components.


         ``GL_PIXEL_MAP_I_TO_A``


               Maps color indices to alpha components.


         ``GL_PIXEL_MAP_R_TO_R``


               Maps red components to red components.


         ``GL_PIXEL_MAP_G_TO_G``


               Maps green components to green components.


         ``GL_PIXEL_MAP_B_TO_B``


               Maps blue components to blue components.


         ``GL_PIXEL_MAP_A_TO_A``


               Maps alpha components to alpha components.


The entries in a map can be specified as single-precision
floating-point numbers,
unsigned short integers,
or unsigned int integers.
Maps that store color component values
(all but ``GL_PIXEL_MAP_I_TO_I`` and ``GL_PIXEL_MAP_S_TO_S``\ )
retain their values in floating-point format,
with unspecified mantissa and exponent sizes.
Floating-point values specified by :c:func:`glPixelMapfv` are converted directly
to the internal floating-point format of these maps,
then clamped to the range [0,1].
Unsigned integer values specified by :c:func:`glPixelMapusv` and
:c:func:`glPixelMapuiv` are converted linearly such that
the largest representable integer maps to 1.0,
and 0 maps to 0.0.


Maps that store indices,
``GL_PIXEL_MAP_I_TO_I`` and ``GL_PIXEL_MAP_S_TO_S``\ ,
retain their values in fixed-point format,
with an unspecified number of bits to the right of the binary point.
Floating-point values specified by :c:func:`glPixelMapfv` are converted directly
to the internal fixed-point format of these maps.
Unsigned integer values specified by :c:func:`glPixelMapusv` and
:c:func:`glPixelMapuiv` specify integer values,
with all 0's to the right of the binary point.


The following table shows the initial sizes and values for each of the maps.
Maps that are indexed by either color or stencil indices must have
*mapsize* = |EQUATION_1_| for some |EQUATION_2_| or the results are undefined.
The maximum allowable size for each map depends on the implementation
and can be determined by calling :c:func:`glGet` with argument
``GL_MAX_PIXEL_MAP_TABLE``\ .
The single maximum applies to all maps; it is at
least 32.


+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| :strong:`*map*`         | :strong:`Lookup Index` | :strong:`Lookup Value` | :strong:`Initial Size` | :strong:`Initial Value` |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_I_TO_I`` | color index            | color index            | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_S_TO_S`` | stencil index          | stencil index          | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_I_TO_R`` | color index            | R                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_I_TO_G`` | color index            | G                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_I_TO_B`` | color index            | B                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_I_TO_A`` | color index            | A                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_R_TO_R`` | R                      | R                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_G_TO_G`` | G                      | G                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_B_TO_B`` | B                      | B                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+
| ``GL_PIXEL_MAP_A_TO_A`` | A                      | A                      | 1                      | 0                       |
+-------------------------+------------------------+------------------------+------------------------+-------------------------+


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *map* is not an accepted value.
* ``GL_INVALID_VALUE`` is generated if *mapsize* is less than one or larger than ``GL_MAX_PIXEL_MAP_TABLE``\ .
* ``GL_INVALID_VALUE`` is generated if *map* is ``GL_PIXEL_MAP_I_TO_I``\ , ``GL_PIXEL_MAP_S_TO_S``\ , ``GL_PIXEL_MAP_I_TO_R``\ , ``GL_PIXEL_MAP_I_TO_G``\ , ``GL_PIXEL_MAP_I_TO_B``\ , or ``GL_PIXEL_MAP_I_TO_A``\ , and *mapsize* is not a power of two.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the buffer object's data store is currently mapped.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glPixelMapfv` if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *values* is not evenly divisible into the number of bytes needed to store in memory a GLfloat datum.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glPixelMapuiv` if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *values* is not evenly divisible into the number of bytes needed to store in memory a GLuint datum.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glPixelMapusv` if a non-zero buffer object name is bound to the ``GL_PIXEL_UNPACK_BUFFER`` target and *values* is not evenly divisible into the number of bytes needed to store in memory a GLushort datum.
* ``GL_INVALID_OPERATION`` is generated if :c:func:`glPixelMap` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGetPixelMap`
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_I_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_S_TO_S_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_R_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_G_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_B_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_A_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_R_TO_R_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_G_TO_G_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_B_TO_B_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_A_TO_A_SIZE``
* :c:func:`glGet` with argument ``GL_MAX_PIXEL_MAP_TABLE``
* :c:func:`glGet` with argument ``GL_PIXEL_UNPACK_BUFFER_BINDING``


.. -----------------------------------------------------------------------------

.. <foot 'glPixelMap'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <msup><mn>2</mn><mi mathvariant="italic">n</mi></msup></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">n</mi></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

