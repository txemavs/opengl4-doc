.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:27
.. *****************************************************************************

.. following information was extracted from file 'man/glSecondaryColor.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glSecondaryColor`
---------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Set the current secondary color

.. c:function:: glSecondaryColor


         :param red:
         :param green:
         :param blue:

                  Specify new red, green, and blue values for the current secondary color.

.. rubric:: Specification

.. c:function:: void glSecondaryColor3b(GLbyte  red, GLbyte  green, GLbyte  blue, GLshort  red, GLshort  green, GLshort  blue, GLint  red, GLint  green, GLint  blue, GLfloat  red, GLfloat  green, GLfloat  blue, GLdouble  red, GLdouble  green, GLdouble  blue, GLubyte  red, GLubyte  green, GLubyte  blue, GLushort  red, GLushort  green, GLushort  blue, GLuint  red, GLuint  green, GLuint  blue)
.. c:function:: void glSecondaryColor3bv(const GLbyte *  v, const GLshort *  v, const GLint *  v, const GLfloat *  v, const GLdouble *  v, const GLubyte *  v, const GLushort *  v, const GLuint *  v)


.. seealso::


            :c:func:`glColor`\ ,
            :c:func:`glIndex`\ ,
            :c:func:`glIsEnabled`\ ,
            :c:func:`glLightModel`\ ,
            :c:func:`glSecondaryColorPointer`


..


.. -----------------------------------------------------------------------------

.. rubric:: Parameters

..


      *v*


            Specifies a pointer to an array that contains red, green, blue.


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


The GL stores both a primary four-valued RGBA color and a
secondary four-valued RGBA color (where alpha is always set to 0.0) that is
associated with every vertex.


The secondary color is interpolated and applied to each fragment during
rasterization when ``GL_COLOR_SUM`` is enabled.  When lighting is enabled,
and ``GL_SEPARATE_SPECULAR_COLOR`` is specified, the value of the
secondary color is assigned the value computed from the specular term of
the lighting computation. Both the primary and secondary current colors are
applied to each fragment, regardless of the state of ``GL_COLOR_SUM``\ ,
under such conditions.  When ``GL_SEPARATE_SPECULAR_COLOR`` is specified,
the value returned from querying the current secondary color is undefined.


:c:func:`glSecondaryColor3b`\ , :c:func:`glSecondaryColor3s`\ , and
:c:func:`glSecondaryColor3i` take three signed byte, short, or long integers as
arguments.  When :strong:`v` is appended to the name, the color commands can
take a pointer to an array of such values.


Color values are stored in floating-point format, with
unspecified mantissa and exponent sizes.  Unsigned integer color
components, when specified, are linearly mapped to floating-point values
such that the largest representable value maps to 1.0 (full intensity), and
0 maps to 0.0 (zero intensity).  Signed integer color components, when
specified, are linearly mapped to floating-point values such that the most
positive representable value maps to 1.0, and the most negative
representable value maps to
|EQUATION_1_|\ .
(Note that this mapping does not convert
0 precisely to 0.0).  Floating-point values are mapped directly.


Neither floating-point nor signed integer values are clamped to the range
|EQUATION_2_| before the current color is updated.  However, color components are
clamped to this range before they are interpolated or written into a color
buffer.


.. note::


   :c:func:`glSecondaryColor` is available only if the GL version is 1.4 or greater.


   The initial value for the secondary color is (0, 0, 0, 0).


   The secondary color can be updated at any time.  In particular, :c:func:`glSecondaryColor` can
   be called between a call to :c:func:`glBegin` and the corresponding call to
   :c:func:`glEnd`\ .


..


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_CURRENT_SECONDARY_COLOR``
* :c:func:`glGet` with argument ``GL_RGBA_MODE``
* :c:func:`glIsEnabled` with argument ``GL_COLOR_SUM``


.. -----------------------------------------------------------------------------

.. <foot 'glSecondaryColor'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mn>-1.0</mn></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mfenced open="[" close="]"><mn>0</mn><mn>1</mn></mfenced></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

