.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:26
.. *****************************************************************************

.. following information was extracted from file 'man/glEvalCoord.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glEvalCoord`
----------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Evaluate enabled one- and two-dimensional maps

.. c:function:: glEvalCoord


         :param u:

                  Specifies a value that is the domain coordinate
                  |EQUATION_1_| to the basis function
                  defined in a previous :c:func:`glMap1` or :c:func:`glMap2` command.

         :param v:

                  Specifies a value that is the domain coordinate
                  |EQUATION_2_| to the basis function
                  defined in a previous :c:func:`glMap2` command.
                  This argument is not present in a :c:func:`glEvalCoord1` command.

.. rubric:: Specification

.. c:function:: void glEvalCoord1f(GLfloat  u, GLdouble  u, GLfloat  u, GLfloat  v, GLdouble  u, GLdouble  v)
.. c:function:: void glEvalCoord1fv(const GLfloat *  u, const GLdouble *  u, const GLfloat *  u, const GLdouble *  u)


.. seealso::


            :c:func:`glBegin`\ ,
            :c:func:`glColor`\ ,
            :c:func:`glEnable`\ ,
            :c:func:`glEvalMesh`\ ,
            :c:func:`glEvalPoint`\ ,
            :c:func:`glIndex`\ ,
            :c:func:`glMap1`\ ,
            :c:func:`glMap2`\ ,
            :c:func:`glMapGrid`\ ,
            :c:func:`glNormal`\ ,
            :c:func:`glTexCoord`\ ,
            :c:func:`glVertex`


..


.. -----------------------------------------------------------------------------

.. rubric:: Parameters

..


      *u*


            Specifies a pointer to an array containing
            either one or two domain coordinates.
            The first coordinate is
            |EQUATION_3_|\ .
            The second coordinate is |EQUATION_4_|\ ,
            which is present only in :c:func:`glEvalCoord2` versions.


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glEvalCoord1` evaluates enabled one-dimensional maps at argument
*u*\ .
:c:func:`glEvalCoord2` does the same for two-dimensional maps using
two domain values,
*u* and *v*\ .
To define a map, call :c:func:`glMap1` and :c:func:`glMap2`\ ; to enable and
disable it, call :c:func:`glEnable` and :c:func:`glDisable`\ .


When one of the :c:func:`glEvalCoord` commands is issued,
all currently enabled maps of the indicated dimension are evaluated.
Then,
for each enabled map,
it is as if the corresponding GL command had been issued with the
computed value.
That is,
if ``GL_MAP1_INDEX`` or
``GL_MAP2_INDEX`` is enabled,
a :c:func:`glIndex` command is simulated.
If ``GL_MAP1_COLOR_4`` or
``GL_MAP2_COLOR_4`` is enabled,
a :c:func:`glColor` command is simulated.
If ``GL_MAP1_NORMAL`` or ``GL_MAP2_NORMAL`` is enabled,
a normal vector is produced,
and if any of
``GL_MAP1_TEXTURE_COORD_1``\ ,
``GL_MAP1_TEXTURE_COORD_2``\ ,
``GL_MAP1_TEXTURE_COORD_3``\ ,
``GL_MAP1_TEXTURE_COORD_4``\ ,
``GL_MAP2_TEXTURE_COORD_1``\ ,
``GL_MAP2_TEXTURE_COORD_2``\ ,
``GL_MAP2_TEXTURE_COORD_3``\ , or
``GL_MAP2_TEXTURE_COORD_4`` is enabled, then an appropriate :c:func:`glTexCoord` command is simulated.


For color,
color index,
normal,
and texture coordinates the GL uses evaluated values instead of current values for those evaluations
that are enabled,
and current values otherwise,
However,
the evaluated values do not update the current values.
Thus, if :c:func:`glVertex` commands are interspersed with :c:func:`glEvalCoord`
commands, the color,
normal,
and texture coordinates associated with the :c:func:`glVertex` commands are not
affected by the values generated by the :c:func:`glEvalCoord` commands,
but only by the most recent
:c:func:`glColor`\ ,
:c:func:`glIndex`\ ,
:c:func:`glNormal`\ , and
:c:func:`glTexCoord` commands.


No commands are issued for maps that are not enabled.
If more than one texture evaluation is enabled for a particular dimension
(for example, ``GL_MAP2_TEXTURE_COORD_1`` and
``GL_MAP2_TEXTURE_COORD_2``\ ),
then only the evaluation of the map that produces the larger
number of coordinates
(in this case, ``GL_MAP2_TEXTURE_COORD_2``\ )
is carried out.
``GL_MAP1_VERTEX_4`` overrides ``GL_MAP1_VERTEX_3``\ ,
and
``GL_MAP2_VERTEX_4`` overrides ``GL_MAP2_VERTEX_3``\ ,
in the same manner.
If neither a three- nor a four-component vertex map is enabled for the
specified dimension,
the :c:func:`glEvalCoord` command is ignored.


If you have enabled automatic normal generation,
by calling :c:func:`glEnable` with argument ``GL_AUTO_NORMAL``\ ,
:c:func:`glEvalCoord2` generates surface normals analytically,
regardless of the contents or enabling of the ``GL_MAP2_NORMAL`` map.
Let


|EQUATION_5_|


Then the generated normal
|EQUATION_6_| is |EQUATION_7_|

If automatic normal generation is disabled,
the corresponding normal map ``GL_MAP2_NORMAL``\ ,
if enabled,
is used to produce a normal.
If neither automatic normal generation nor a normal map is enabled,
no normal is generated for
:c:func:`glEvalCoord2` commands.


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glIsEnabled` with argument ``GL_MAP1_VERTEX_3``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_VERTEX_4``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_INDEX``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_COLOR_4``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_NORMAL``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_TEXTURE_COORD_1``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_TEXTURE_COORD_2``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_TEXTURE_COORD_3``
* :c:func:`glIsEnabled` with argument ``GL_MAP1_TEXTURE_COORD_4``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_VERTEX_3``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_VERTEX_4``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_INDEX``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_COLOR_4``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_NORMAL``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_TEXTURE_COORD_1``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_TEXTURE_COORD_2``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_TEXTURE_COORD_3``
* :c:func:`glIsEnabled` with argument ``GL_MAP2_TEXTURE_COORD_4``
* :c:func:`glIsEnabled` with argument ``GL_AUTO_NORMAL``
* :c:func:`glGetMap`


.. -----------------------------------------------------------------------------

.. <foot 'glEvalCoord'>

.. role:: mml(raw)
   :format: html

.. |EQUATION_1_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">u</mi></math>` 

.. |EQUATION_2_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">v</mi></math>` 

.. |EQUATION_3_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">u</mi></math>` 

.. |EQUATION_4_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'><mi mathvariant="italic">v</mi></math>` 

.. |EQUATION_5_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="bold">m</mi><mo>=</mo><mrow><mfenced open="" close=""><mfrac><mfenced open="" close=""><mrow><mo>&PartialD;</mo><mi mathvariant="bold">p</mi></mrow></mfenced><mfenced open="" close=""><mrow><mo>&PartialD;</mo><mi mathvariant="italic">u</mi></mrow></mfenced></mfrac></mfenced><mo>&times;</mo><mfenced open="" close=""><mfrac><mfenced open="" close=""><mrow><mo>&PartialD;</mo><mi mathvariant="bold">p</mi></mrow></mfenced><mfenced open="" close=""><mrow><mo>&PartialD;</mo><mi mathvariant="italic">v</mi></mrow></mfenced></mfrac></mfenced></mrow></mrow></math>` 

.. |EQUATION_6_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mi mathvariant="bold">n</mi></math>` 

.. |EQUATION_7_| replace::  :mml:`<math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow><mi mathvariant="bold">n</mi><mo>=</mo><mfrac><mi mathvariant="bold">m</mi><mfenced open="" close=""><mfenced open="&DoubleVerticalBar;" close="&DoubleVerticalBar;"><mi mathvariant="bold">m</mi></mfenced></mfenced></mfrac></mrow></math>` 

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

