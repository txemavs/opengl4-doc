.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:28
.. *****************************************************************************

.. following information was extracted from file 'man/gluTessBeginPolygon.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `gluTessBeginPolygon`
------------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Delimit a polygon description

.. c:function:: gluTessBeginPolygon


         :param tess:

                  Specifies the tessellation object (created with :c:func:`gluNewTess`\ ).

         :param data:

                  Specifies a pointer to user polygon data.

.. rubric:: Specification

.. c:function:: void gluTessBeginPolygon(GLUtesselator*  tess, GLvoid*  data)
   :noindex: 


.. seealso::


            :c:func:`gluNewTess`\ ,
            :c:func:`gluTessBeginContour`\ ,
            :c:func:`gluTessCallback`\ ,
            :c:func:`gluTessEndPolygon`\ ,
            :c:func:`gluTessNormal`\ ,
            :c:func:`gluTessProperty`\ ,
            :c:func:`gluTessVertex`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`gluTessBeginPolygon` and :c:func:`gluTessEndPolygon` delimit the definition of a
convex, concave or self-intersecting polygon. Within each :c:func:`gluTessBeginPolygon` / :c:func:`gluTessEndPolygon`
pair, there must be one or more calls to :c:func:`gluTessBeginContour` / :c:func:`gluTessEndContour`\ .
Within each contour, there are zero or more calls to :c:func:`gluTessVertex`\ . The vertices
specify a closed contour (the last vertex of each contour is automatically linked
to the first). See the :c:func:`gluTessVertex`\ , :c:func:`gluTessBeginContour`\ , and
:c:func:`gluTessEndContour` reference pages for more details.


*data* is a pointer to a user-defined data structure. If the appropriate callback(s)
are specified (see :c:func:`gluTessCallback`\ ), then this pointer is returned to the
callback function(s). Thus, it is a convenient way to store per-polygon information.


Once :c:func:`gluTessEndPolygon` is called, the polygon is tessellated, and the
resulting triangles are described through callbacks.
See :c:func:`gluTessCallback` for descriptions of the callback functions.


.. -----------------------------------------------------------------------------

.. rubric:: Example

..


A quadrilateral with a triangular hole in it can be described as follows:

.. code-block:: c


   gluTessBeginPolygon(tobj, NULL);
      gluTessBeginContour(tobj);
         gluTessVertex(tobj, v1, v1);
         gluTessVertex(tobj, v2, v2);
         gluTessVertex(tobj, v3, v3);
         gluTessVertex(tobj, v4, v4);
      gluTessEndContour(tobj);
      gluTessBeginContour(tobj);
         gluTessVertex(tobj, v5, v5);
         gluTessVertex(tobj, v6, v6);
         gluTessVertex(tobj, v7, v7);
      gluTessEndContour(tobj);
   gluTessEndPolygon(tobj);

..


.. -----------------------------------------------------------------------------

.. <foot 'gluTessBeginPolygon'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

