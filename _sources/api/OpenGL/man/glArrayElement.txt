.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:26
.. *****************************************************************************

.. following information was extracted from file 'man/glArrayElement.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glArrayElement`
-------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Render a vertex using the specified vertex array element

.. c:function:: glArrayElement


         :param i:

                  Specifies an index into the enabled vertex data arrays.

.. rubric:: Specification

.. c:function:: void glArrayElement(GLint  i)
   :noindex: 


.. seealso::


            :c:func:`glClientActiveTexture`\ ,
            :c:func:`glColorPointer`\ ,
            :c:func:`glDrawArrays`\ ,
            :c:func:`glEdgeFlagPointer`\ ,
            :c:func:`glFogCoordPointer`\ ,
            :c:func:`glGetPointerv`\ ,
            :c:func:`glIndexPointer`\ ,
            :c:func:`glInterleavedArrays`\ ,
            :c:func:`glNormalPointer`\ ,
            :c:func:`glSecondaryColorPointer`\ ,
            :c:func:`glTexCoordPointer`\ ,
            :c:func:`glVertexPointer`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


:c:func:`glArrayElement` commands are used within :c:func:`glBegin` / :c:func:`glEnd` pairs to
specify vertex and attribute data for point, line, and polygon
primitives. If ``GL_VERTEX_ARRAY`` is enabled when :c:func:`glArrayElement` is called, a
single vertex is drawn, using
vertex and attribute data taken from location *i* of the enabled
arrays. If ``GL_VERTEX_ARRAY`` is not enabled, no drawing occurs but
the attributes corresponding to the enabled arrays are modified.


Use :c:func:`glArrayElement` to construct primitives by indexing vertex data, rather than
by streaming through arrays of data in first-to-last order. Because
each call specifies only a single vertex, it is possible to explicitly
specify per-primitive attributes such as a single normal for each
triangle.


Changes made to array data between the execution of :c:func:`glBegin` and the
corresponding execution of :c:func:`glEnd` may affect calls to :c:func:`glArrayElement` that are made
within the same :c:func:`glBegin` / :c:func:`glEnd` period in nonsequential ways.
That is, a call to
:c:func:`glArrayElement` that precedes a change to array data may
access the changed data, and a call that follows a change to array data
may access original data.


.. note::


   :c:func:`glArrayElement` is available only if the GL version is 1.1 or greater.


   :c:func:`glArrayElement` is included in display lists. If :c:func:`glArrayElement` is entered into a
   display list, the necessary array data (determined by the array
   pointers and enables) is also entered into the display list. Because
   the array pointers and enables are client-side state, their values
   affect display lists when the lists are created, not when the lists
   are executed.


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_VALUE`` may be generated if *i* is negative.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to an enabled array and the buffer object's data store is currently mapped.


.. -----------------------------------------------------------------------------

.. <foot 'glArrayElement'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

