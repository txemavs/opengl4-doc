.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:26
.. *****************************************************************************

.. following information was extracted from file 'man/glGetPixelMap.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `glGetPixelMap`
------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Return the specified pixel map

.. c:function:: glGetPixelMap


         :param map:

                  Specifies the name of the pixel map to return.
                  Accepted values are
                  ``GL_PIXEL_MAP_I_TO_I``\ ,
                  ``GL_PIXEL_MAP_S_TO_S``\ ,
                  ``GL_PIXEL_MAP_I_TO_R``\ ,
                  ``GL_PIXEL_MAP_I_TO_G``\ ,
                  ``GL_PIXEL_MAP_I_TO_B``\ ,
                  ``GL_PIXEL_MAP_I_TO_A``\ ,
                  ``GL_PIXEL_MAP_R_TO_R``\ ,
                  ``GL_PIXEL_MAP_G_TO_G``\ ,
                  ``GL_PIXEL_MAP_B_TO_B``\ , and
                  ``GL_PIXEL_MAP_A_TO_A``\ .

         :param data:

                  Returns the pixel map contents.

.. rubric:: Specification

.. c:function:: void glGetPixelMapfv(GLenum  map, GLfloat *  data, GLenum  map, GLuint *  data, GLenum  map, GLushort *  data)


.. seealso::


            :c:func:`glColorSubTable`\ ,
            :c:func:`glColorTable`\ ,
            :c:func:`glConvolutionFilter1D`\ ,
            :c:func:`glConvolutionFilter2D`\ ,
            :c:func:`glCopyColorSubTable`\ ,
            :c:func:`glCopyColorTable`\ ,
            :c:func:`glCopyPixels`\ ,
            :c:func:`glCopyTexImage1D`\ ,
            :c:func:`glCopyTexImage2D`\ ,
            :c:func:`glCopyTexSubImage1D`\ ,
            :c:func:`glCopyTexSubImage2D`\ ,
            :c:func:`glCopyTexSubImage3D`\ ,
            :c:func:`glDrawPixels`\ ,
            :c:func:`glGetHistogram`\ ,
            :c:func:`glGetMinmax`\ ,
            :c:func:`glGetTexImage`\ ,
            :c:func:`glPixelMap`\ ,
            :c:func:`glPixelTransfer`\ ,
            :c:func:`glReadPixels`\ ,
            :c:func:`glSeparableFilter2D`\ ,
            :c:func:`glTexImage1D`\ ,
            :c:func:`glTexImage1D`\ ,
            :c:func:`glTexImage2D`
            :c:func:`glTexImage2D`\ ,
            :c:func:`glTexImage3D`\ ,
            :c:func:`glTexSubImage1D`\ ,
            :c:func:`glTexSubImage2D`\ ,
            :c:func:`glTexSubImage3D`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


See the :c:func:`glPixelMap` reference page for a description of the acceptable
values for the *map* parameter.
:c:func:`glGetPixelMap` returns in *data* the contents of the pixel map
specified in *map*\ .
Pixel maps are used during the execution of
:c:func:`glReadPixels`\ ,
:c:func:`glDrawPixels`\ ,
:c:func:`glCopyPixels`\ ,
:c:func:`glTexImage1D`\ ,
:c:func:`glTexImage2D`\ ,
:c:func:`glTexImage3D`\ ,
:c:func:`glTexSubImage1D`\ ,
:c:func:`glTexSubImage2D`\ ,
:c:func:`glTexSubImage3D`\ ,
:c:func:`glCopyTexImage1D`\ ,
:c:func:`glCopyTexImage2D`\ ,
:c:func:`glCopyTexSubImage1D`\ ,
:c:func:`glCopyTexSubImage2D`\ , and
:c:func:`glCopyTexSubImage3D`\ .
to map color indices,
stencil indices,
color components,
and depth components to other values.


If a non-zero named buffer object is bound to the ``GL_PIXEL_PACK_BUFFER`` target
(see :c:func:`glBindBuffer`\ ) while a pixel map is
requested, *data* is treated as a byte offset into the buffer object's data store.


Unsigned integer values,
if requested,
are linearly mapped from the internal fixed or floating-point representation
such that 1.0 maps to the largest representable integer value,
and 0.0 maps to 0.
Return unsigned integer values are undefined if the map value was
not in the range [0,1].


To determine the required size of *map*\ ,
call :c:func:`glGet` with the appropriate symbolic
constant.


.. note::


   If an error is generated,
   no change is made to the contents of *data*\ .


..


.. -----------------------------------------------------------------------------

**Errors:**

* ``GL_INVALID_ENUM`` is generated if *map* is not an accepted value.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the buffer object's data store is currently mapped.
* ``GL_INVALID_OPERATION`` is generated if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and the data would be packed to the buffer object such that the memory writes required would exceed the data store size.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glGetPixelMapfv` if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a GLfloat datum.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glGetPixelMapuiv` if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a GLuint datum.
* ``GL_INVALID_OPERATION`` is generated by :c:func:`glGetPixelMapusv` if a non-zero buffer object name is bound to the ``GL_PIXEL_PACK_BUFFER`` target and *data* is not evenly divisible into the number of bytes needed to store in memory a GLushort datum.
* ``GL_INVALID_OPERATION`` is generated if :c:func:`glGetPixelMap` is executed between the execution of :c:func:`glBegin` and the corresponding execution of :c:func:`glEnd`\ .


.. -----------------------------------------------------------------------------

**Associated Gets:**

* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_I_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_S_TO_S_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_R_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_G_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_B_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_I_TO_A_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_R_TO_R_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_G_TO_G_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_B_TO_B_SIZE``
* :c:func:`glGet` with argument ``GL_PIXEL_MAP_A_TO_A_SIZE``
* :c:func:`glGet` with argument ``GL_MAX_PIXEL_MAP_TABLE``
* :c:func:`glGet` with argument ``GL_PIXEL_PACK_BUFFER_BINDING``


.. -----------------------------------------------------------------------------

.. <foot 'glGetPixelMap'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

