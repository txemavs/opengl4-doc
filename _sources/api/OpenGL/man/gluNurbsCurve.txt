.. nabla.docbook2sphinx project, generated 2012-07-08 18:15:27
.. *****************************************************************************

.. following information was extracted from file 'man/gluNurbsCurve.xml'
.. (c)1991-2006 Silicon Graphics, Inc.
.. See license details at http://oss.sgi.com/projects/FreeB/


.. currentmodule:: OpenGL.man

function `gluNurbsCurve`
------------------------

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   Version 1 Vol. 3G

Define the shape of a NURBS curve

.. c:function:: gluNurbsCurve


         :param nurb:

                  Specifies the NURBS object (created with :c:func:`gluNewNurbsRenderer`\ ).

         :param knotCount:

                  Specifies the number of knots in *knots*\ .
                  *knotCount* equals the number of control points plus the order.

         :param knots:

                  Specifies an array of *knotCount* nondecreasing knot values.

         :param stride:

                  Specifies the offset (as a number of single-precision floating-point values)
                  between successive curve control points.

         :param control:

                  Specifies a pointer to an array of control points. The coordinates must
                  agree with *type*\ , specified below.

         :param order:

                  Specifies the order of the NURBS curve. *order* equals degree + 1, hence
                  a cubic curve has an order of 4.

         :param type:

                  Specifies the type of the curve. If this curve is defined within a
                  :c:func:`gluBeginCurve` / :c:func:`gluEndCurve` pair, then
                  the type can be any of the valid
                  one-dimensional evaluator types (such as ``GLU_MAP1_VERTEX_3`` or
                  ``GLU_MAP1_COLOR_4``\ ). Between a :c:func:`gluBeginTrim` / :c:func:`gluEndTrim` pair,
                  the only valid types are ``GLU_MAP1_TRIM_2`` and ``GLU_MAP1_TRIM_3``\ .

.. rubric:: Specification

.. c:function:: void gluNurbsCurve(GLUnurbs*  nurb, GLint  knotCount, GLfloat *  knots, GLint  stride, GLfloat *  control, GLint  order, GLenum  type)
   :noindex: 


.. seealso::


            :c:func:`gluBeginCurve`\ ,
            :c:func:`gluBeginTrim`\ ,
            :c:func:`gluNewNurbsRenderer`\ ,
            :c:func:`gluPwlCurve`


..


.. -----------------------------------------------------------------------------

.. rubric:: Description

..


Use :c:func:`gluNurbsCurve` to describe a NURBS curve.


When :c:func:`gluNurbsCurve` appears between a :c:func:`gluBeginCurve` / :c:func:`gluEndCurve` pair, it is
used to describe a curve to be rendered.
Positional, texture, and color coordinates are associated
by presenting each as a separate :c:func:`gluNurbsCurve` between a
:c:func:`gluBeginCurve` / :c:func:`gluEndCurve` pair. No more than
one call to :c:func:`gluNurbsCurve` for each of color, position, and texture
data can be made within a single :c:func:`gluBeginCurve` / :c:func:`gluEndCurve`
pair. Exactly one call must be made to describe the position of the
curve (a *type* of ``GLU_MAP1_VERTEX_3`` or ``GLU_MAP1_VERTEX_4``\ ).


When :c:func:`gluNurbsCurve` appears between a :c:func:`gluBeginTrim` / :c:func:`gluEndTrim` pair, it is
used to describe a trimming curve on a NURBS surface. If *type* is
``GLU_MAP1_TRIM_2``\ , then it describes a curve in two-dimensional (\ :strong:`u`
and :strong:`v`\ )
parameter space. If it is ``GLU_MAP1_TRIM_3``\ , then it describes a
curve in two-dimensional homogeneous (\ :strong:`u`\ , :strong:`v`\ , and :strong:`w`\ )
parameter space.
See the :c:func:`gluBeginTrim` reference page for more discussion about trimming
curves.


.. -----------------------------------------------------------------------------

.. rubric:: Example

..


The following commands render a textured NURBS curve with normals:

.. code-block:: c


   gluBeginCurve(nobj);
      gluNurbsCurve(nobj, ..., GL_MAP1_TEXTURE_COORD_2);
      gluNurbsCurve(nobj, ..., GL_MAP1_NORMAL);
      gluNurbsCurve(nobj, ..., GL_MAP1_VERTEX_4);
   gluEndCurve(nobj);

..


.. note::


   To define trim curves that stitch well, use :c:func:`gluPwlCurve`\ .


..


.. -----------------------------------------------------------------------------

.. <foot 'gluNurbsCurve'>

.. <end foot>

.. figure:: /_static/opengl.png
   :alt: OpenGL
   :align: right

   (\ c\ )1991-2006 Silicon Graphics, Inc. SGI Free Software B License.

